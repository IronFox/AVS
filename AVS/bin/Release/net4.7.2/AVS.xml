<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AVS</name>
    </assembly>
    <members>
        <member name="M:AvsUtils.FindVehicleInParents(UnityEngine.Transform,Vehicle@,System.Collections.Generic.List{UnityEngine.Transform})">
            <summary>
            Determines whether the specified transform or any of its ancestors is the currently mounted vehicle.
            </summary>
            <remarks>This method recursively traverses the transform hierarchy to determine if any
            ancestor is the player's currently mounted vehicle. If the specified transform is <see langword="null"/>,
            the method returns <see langword="false"/>.</remarks>
            <param name="current">The transform to check, typically representing a game object in the hierarchy.</param>
            <param name="vehicle">When this method returns, contains the <see cref="T:Vehicle"/> component if found. Null if the method returns false</param>
            <param name="checkedAncestry">A list of all transforms visited by the recursion.</param>
            <returns><see langword="true"/> if the specified transform or one of its ancestors is the vehicle currently mounted
            by the player; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:AvsUtils.RegisterDepthModules">
            <summary>
            Registers the common depth modules for vehicles.
            </summary>
        </member>
        <member name="M:AvsUtils.EvaluateDepthModules(AVS.UpgradeModules.AddActionParams)">
            <summary>
            Evaluates the depth upgrade modules installed on the specified vehicle and adjusts its crush depth
            accordingly.
            </summary>
            <remarks>This method checks the installed depth upgrade modules on the provided vehicle and
            determines the highest level of depth module present. Based on the detected module level, it calculates the
            additional crush depth and applies it to the vehicle. If the vehicle is not compatible with depth upgrades,
            a message is displayed to the user.</remarks>
            <param name="param">The parameters containing the vehicle to evaluate and its associated data.</param>
        </member>
        <member name="M:AvsUtils.GetTechTypeFromVehicleName(System.String)">
            <summary>
            Retrieves the <see cref="T:TechType"/> associated with a vehicle based on its name.
            </summary>
            <remarks>If no vehicle with the specified name is found, an error is logged, and the method
            returns <see cref="F:TechType.None"/>.</remarks>
            <param name="name">The name of the vehicle to search for. This parameter is case-sensitive and must not be null or empty.</param>
            <returns>The <see cref="T:TechType"/> of the vehicle if a match is found; otherwise, returns <see
            cref="F:TechType.None"/>.</returns>
        </member>
        <member name="M:AvsUtils.AddEncyclopediaEntry(PDAEncyclopedia.EntryData)">
            <summary>
            Adds a new entry to the PDA Encyclopedia or updates an existing one if the key already exists.
            </summary>
            <remarks>This method ensures that the entry is added or updated only after the PDA
            Encyclopedia mapping is initialized.  If an entry with the same key already exists, it will be replaced with
            the provided data.</remarks>
            <param name="data">The encyclopedia entry data to add or update. The <see cref="F:PDAEncyclopedia.EntryData.key"/> property must
            be unique and non-null.</param>
        </member>
        <member name="T:AVS.AvsVehicleManager">
            <summary>
            Provides management functions for AVS vehicles, including registration, enrollment, and loading.
            </summary>
        </member>
        <member name="P:AVS.AvsVehicleManager.VehiclesInPlay">
            <summary>
            List of all AVS vehicles currently in play.
            </summary>
        </member>
        <member name="P:AVS.AvsVehicleManager.PingInstances">
            <summary>
            List of all registered ping instances for vehicles.
            </summary>
        </member>
        <member name="P:AVS.AvsVehicleManager.VehicleTypes">
            <summary>
            List of all registered vehicle types.
            </summary>
        </member>
        <member name="M:AVS.AvsVehicleManager.RegisterPingType(PingType)">
            <summary>
            Registers a new <see cref="T:PingType"/> for a vehicle, ensuring it is unique and above the minimum value.
            </summary>
            <param name="pt">The initial ping type to register.</param>
            <returns>The registered, unique ping type.</returns>
        </member>
        <member name="M:AVS.AvsVehicleManager.RegisterPingType(PingType,System.Boolean)">
            <summary>
            Registers a new <see cref="T:PingType"/> for a vehicle, ensuring it is unique and above the minimum value.
            Optionally logs the registration process.
            </summary>
            <param name="pt">The initial ping type to register.</param>
            <param name="verbose">If true, logs detailed registration steps.</param>
            <returns>The registered, unique ping type.</returns>
        </member>
        <member name="M:AVS.AvsVehicleManager.EnrollVehicle(AVS.BaseVehicle.AvsVehicle)">
            <summary>
            Enrolls a vehicle into the <see cref="P:AVS.AvsVehicleManager.VehiclesInPlay"/> list and starts loading it if constructed.
            </summary>
            <param name="mv">The vehicle to enroll.</param>
        </member>
        <member name="M:AVS.AvsVehicleManager.DeregisterVehicle(AVS.BaseVehicle.AvsVehicle)">
            <summary>
            Removes a vehicle from the <see cref="P:AVS.AvsVehicleManager.VehiclesInPlay"/> list.
            </summary>
            <param name="mv">The vehicle to deregister.</param>
        </member>
        <member name="M:AVS.AvsVehicleManager.LoadVehicle(AVS.BaseVehicle.AvsVehicle)">
            <summary>
            Coroutine that waits for the world to be ready, then calls <see cref="M:AVS.BaseVehicle.AvsVehicle.OnFinishedLoading"/> on the vehicle.
            </summary>
            <param name="mv">The vehicle to load.</param>
            <returns>Coroutine enumerator.</returns>
        </member>
        <member name="T:AVS.Admin.ExternalVehicleConfig`1">
            <summary>
            Represents a manager for additional external configurations to be applied to vehicles.
            </summary>
            <typeparam name="T">The type of the configuration values managed by this instance.</typeparam>
        </member>
        <member name="M:AVS.Admin.ExternalVehicleConfig`1.GetValue(System.String)">
            <summary>
            Retrieves the value of the external configuration entry with the specified name.
            </summary>
            <param name="name">The name of the configuration entry to retrieve.</param>
            <returns>The value of the configuration entry associated with the specified name.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the specified <paramref name="name"/> does not exist in the external configuration.</exception>
        </member>
        <member name="M:AVS.Admin.ExternalVehicleConfig`1.GetAvsVehicleConfig(System.String)">
            <summary>
            Retrieves the external vehicle configuration for a specified mod vehicle by its name.
            </summary>
            <remarks>This method searches for a mod vehicle by name within the available vehicle types. If
            no match is found, or if multiple matches are found, an exception is thrown. If the configuration for the
            specified mod vehicle does not already exist, it is created and added to the internal collection.</remarks>
            <param name="vehicleName">The name of the mod vehicle to retrieve the configuration for. The comparison is case-insensitive.</param>
            <returns>An <see cref="T:AVS.Admin.ExternalVehicleConfig`1"/> object representing the configuration of the specified mod
            vehicle.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="vehicleName"/> does not match any mod vehicle, or if it matches multiple mod
            vehicles.</exception>
        </member>
        <member name="M:AVS.Admin.ExternalVehicleConfig`1.GetSeamothConfig">
            <summary>
            Retrieves the configuration for the Seamoth vehicle.
            </summary>
            <remarks>This method ensures that the Seamoth configuration is initialized before returning
            it.  Subsequent calls will return the same configuration instance.</remarks>
            <returns>An instance of <see cref="T:AVS.Admin.ExternalVehicleConfig`1"/> representing the Seamoth's configuration.  If the
            configuration has not been initialized, it will be created and returned.</returns>
        </member>
        <member name="M:AVS.Admin.ExternalVehicleConfig`1.GetPrawnConfig">
            <summary>
            Retrieves the configuration for the Prawn.
            </summary>
            <remarks>If the configuration has not been initialized, this method creates a new instance of 
            <see cref="T:AVS.Admin.ExternalVehicleConfig`1"/> with the name set to the value of  <see
            cref="F:AVS.Admin.ConfigRegistrar.PrawnName"/>.</remarks>
            <returns>An instance of <see cref="T:AVS.Admin.ExternalVehicleConfig`1"/> representing the Prawn configuration.</returns>
        </member>
        <member name="M:AVS.Admin.ExternalVehicleConfig`1.GetCyclopsConfig">
            <summary>
            Retrieves the Cyclops configuration for the specified config type.
            </summary>
            <remarks>This method ensures that the Cyclops configuration is initialized before returning
            it. Subsequent calls will return the same configuration instance.</remarks>
            <returns>An instance of <see cref="T:AVS.Admin.ExternalVehicleConfig`1"/> representing the Cyclops configuration.  If the
            configuration has not been initialized, it will be created and returned.</returns>
        </member>
        <member name="T:AVS.Admin.ConfigRegistrar">
            <summary>
            Provides methods for registering configuration options for various vehicles in the game.
            </summary>
            <remarks>This class includes functionality to register configuration options for all modded vehicles
            or specific vehicles, such as the Seamoth, Prawn Suit, and Cyclops. It supports configuration types of <see
            langword="bool"/>, <see langword="float"/>,  and <see cref="T:BepInEx.Configuration.KeyboardShortcut"/>. Configuration changes can
            trigger optional callbacks for custom handling.</remarks>
        </member>
        <member name="M:AVS.Admin.ConfigRegistrar.LogAllVehicleNames">
            <summary>
            Logs the names of all vehicles currently present in the game.
            </summary>
            <remarks>This method initiates an asynchronous operation to retrieve and log vehicle names. 
            It does not block the calling thread and relies on the game's coroutine system to execute.</remarks>
        </member>
        <member name="M:AVS.Admin.ConfigRegistrar.RegisterForAllAvsVehicles``1(System.String,BepInEx.Configuration.ConfigDescription,``0,System.Action{TechType,``0},BepInEx.Configuration.ConfigFile)">
            <summary>
            Registers a configuration option for all modded vehicles in the game.
            </summary>
            <typeparam name="T">The type of the configuration value.</typeparam>
            <param name="name">The name of the configuration option.</param>
            <param name="description">A description of the configuration option, including its purpose and usage.</param>
            <param name="defaultValue">The default value for the configuration option.</param>
            <param name="OnChange">An optional callback invoked when the configuration value changes. The callback receives the <see
            cref="T:TechType"/> of the vehicle and the new value.</param>
            <param name="configFile">An optional configuration file to store the setting. If not provided, a default configuration file is used.</param>
        </member>
        <member name="M:AVS.Admin.ConfigRegistrar.RegisterForAvsVehicle``1(System.String,System.String,BepInEx.Configuration.ConfigDescription,``0,System.Action{TechType,``0},BepInEx.Configuration.ConfigFile)">
            <summary>
            Registers a configuration option for a specific modded vehicle.
            </summary>
            <remarks>This method initiates the registration process asynchronously. The configuration
            option will be associated with the specified modded vehicle and can be accessed or modified through the
            configuration system.</remarks>
            <typeparam name="T">The type of the configuration value. Must be a type supported by the configuration system.</typeparam>
            <param name="vehicleName">The name of the modded vehicle for which the configuration option is being registered.</param>
            <param name="name">The name of the configuration option.</param>
            <param name="description">A description of the configuration option, including details such as its purpose or valid range.</param>
            <param name="defaultValue">The default value for the configuration option.</param>
            <param name="OnChange">An optional callback that is invoked when the configuration value changes. The callback receives the <see
            cref="T:TechType"/> of the vehicle and the new value of the configuration option.</param>
            <param name="configFile">An optional <see cref="T:BepInEx.Configuration.ConfigFile"/> instance to store the configuration option. If not provided, the
            default configuration file is used.</param>
        </member>
        <member name="M:AVS.Admin.ConfigRegistrar.RegisterForSeamoth``1(System.String,BepInEx.Configuration.ConfigDescription,``0,System.Action{``0},BepInEx.Configuration.ConfigFile)">
            <summary>
            Registers a configuration option for the Seamoth vehicle.
            </summary>
            <remarks>This method initiates the registration process asynchronously. The configuration
            option will be associated with the Seamoth vehicle and can be used to customize its behavior or
            settings.</remarks>
            <typeparam name="T">The type of the configuration value.</typeparam>
            <param name="name">The unique name of the configuration option.</param>
            <param name="description">A description of the configuration option, including its purpose and constraints.</param>
            <param name="defaultValue">The default value for the configuration option.</param>
            <param name="onChange">An optional callback that is invoked when the configuration value changes. The new value is passed as a
            parameter.</param>
            <param name="configFile">An optional configuration file to store the setting. If not provided, a default configuration file is used.</param>
        </member>
        <member name="M:AVS.Admin.ConfigRegistrar.RegisterForPrawn``1(System.String,BepInEx.Configuration.ConfigDescription,``0,System.Action{``0},BepInEx.Configuration.ConfigFile)">
            <summary>
            Registers a configuration option for the Prawn with the specified name, description, and default
            value.
            </summary>
            <remarks>This method starts a coroutine to handle the registration process asynchronously. The
            registration ensures that the configuration option is properly integrated with the Prawn and its
            associated systems.</remarks>
            <typeparam name="T">The type of the configuration value. Must be a type supported by the configuration system.</typeparam>
            <param name="name">The unique name of the configuration option. This name is used to identify the option.</param>
            <param name="description">A description of the configuration option, including details such as its purpose or valid range of values.</param>
            <param name="defaultValue">The default value for the configuration option. This value is used if no other value is provided.</param>
            <param name="onChange">An optional callback that is invoked whenever the configuration value changes. The new value is passed as a
            parameter to the callback.</param>
            <param name="configFile">An optional configuration file object where the configuration option will be stored. If not provided, a
            default configuration file is used.</param>
        </member>
        <member name="M:AVS.Admin.ConfigRegistrar.RegisterForCyclops``1(System.String,BepInEx.Configuration.ConfigDescription,``0,System.Action{``0},BepInEx.Configuration.ConfigFile)">
            <summary>
            Registers a configuration option for the Cyclops submarine with the specified name, description, and default
            value.
            </summary>
            <remarks>This method starts a coroutine to handle the registration process asynchronously. The
            configuration option will be available for use after the coroutine completes.</remarks>
            <typeparam name="T">The type of the configuration value.</typeparam>
            <param name="name">The unique name of the configuration option. This name is used to identify the option.</param>
            <param name="description">A description of the configuration option, including details such as its purpose or valid range.</param>
            <param name="defaultValue">The default value for the configuration option.</param>
            <param name="OnChange">An optional callback that is invoked whenever the configuration value changes. The new value is passed as a
            parameter to the callback.</param>
            <param name="configFile">An optional configuration file where the option will be stored. If not provided, a default configuration
            file is used.</param>
        </member>
        <member name="T:AVS.Admin.GameObjectManager`1">
            <summary>
            Manages a collection of game objects of a specified type, providing functionality for registration,
            deregistration, filtering, and proximity-based queries.
            </summary>
            <remarks>This class is designed to manage game objects of a specific type, allowing for operations 
            such as finding the nearest object to a given position, filtering objects based on a predicate,  and maintaining
            a registry of active objects. It is particularly useful in scenarios where  game objects of a specific type need
            to be tracked and queried efficiently.</remarks>
            <typeparam name="T">The type of game object managed by this class. Must derive from <see cref="T:UnityEngine.Component"/>.</typeparam>
        </member>
        <member name="M:AVS.Admin.GameObjectManager`1.FindNearestSuch(UnityEngine.Vector3,System.Func{`0,System.Boolean})">
            <summary>
            Finds the nearest object of type <typeparamref name="T"/> to the specified target position, optionally
            filtered by a provided predicate.
            </summary>
            <remarks>If an object does not have a valid <c>transform</c> or its position cannot be
            determined, it is excluded from the distance calculation.</remarks>
            <param name="target">The target position to measure distances from.</param>
            <param name="filter">An optional predicate to filter the objects. Only objects for which the predicate returns <see
            langword="true"/> will be considered. If <see langword="null"/>, no filtering is applied.</param>
            <returns>The nearest object of type <typeparamref name="T"/> to the <paramref name="target"/> position that satisfies
            the filter, or <see langword="null"/> if no such object is found.</returns>
        </member>
        <member name="M:AVS.Admin.GameObjectManager`1.Where(System.Func{`0,System.Boolean})">
            <summary>
            Filters the collection of objects based on a specified predicate.
            </summary>
            <remarks>
            Removes registered objects from the local manager that no longer exist.
            </remarks>
            <param name="pred">A function that defines the condition each object must satisfy to be included in the result.</param>
            <returns>A list of objects that satisfy the specified predicate.</returns>
        </member>
        <member name="M:AVS.Admin.GameObjectManager`1.Register(`0)">
            <summary>
            Registers the specified object in the collection of tracked objects.
            </summary>
            <remarks>The registered object is added to a shared collection, which is used to track all
            such objects. Ensure that the object being registered is valid and not already present in the collection to
            avoid duplication.</remarks>
            <param name="cont">The object to register. This object must not be null.</param>
        </member>
        <member name="M:AVS.Admin.GameObjectManager`1.Deregister(`0)">
            <summary>
            Removes the specified object from the collection of registered objects.
            </summary>
            <param name="cont">The object to deregister. Must not be null.</param>
        </member>
        <member name="M:AVS.Admin.GameObjectManager`1.ClearList">
            <summary>
            Clears all items from the list of objects.
            </summary>
            <remarks>After calling this method, the list will be empty. This operation does not raise any
            events or perform additional actions beyond clearing the list.</remarks>
        </member>
        <member name="T:AVS.Admin.GameStateWatcher">
            <summary>
            Provides utilities for monitoring and managing the state of the game, including player and world state.
            </summary>
            <remarks>This class contains static members to track key game state flags, such as whether the player
            has awakened or started, and whether the world is loaded or settled. It also provides mechanisms for resetting
            the game state and invoking cleanup actions when a scene is reset.</remarks>
        </member>
        <member name="P:AVS.Admin.GameStateWatcher.IsPlayerAwakened">
            <summary>
            Gets or sets a value indicating whether the player has been awakened.
            </summary>
        </member>
        <member name="P:AVS.Admin.GameStateWatcher.IsPlayerStarted">
            <summary>
            Gets or sets a value indicating whether the player has started.
            </summary>
        </member>
        <member name="P:AVS.Admin.GameStateWatcher.IsWorldLoaded">
            <summary>
            Gets or sets a value indicating whether the world is currently loaded.
            </summary>
        </member>
        <member name="P:AVS.Admin.GameStateWatcher.IsWorldSettled">
            <summary>
            Gets a value indicating whether the world is fully loaded and the player's immediate surroundings are active
            and built.
            </summary>
        </member>
        <member name="P:AVS.Admin.GameStateWatcher.OnSceneUnloaded">
            <summary>
            Actions called when <see cref="M:AVS.Admin.GameStateWatcher.SignalSceneUnloaded(UnityEngine.SceneManagement.Scene)"/> is invoked.
            </summary>
        </member>
        <member name="M:AVS.Admin.GameStateWatcher.SignalSceneUnloaded(UnityEngine.SceneManagement.Scene)">
            <summary>
            Signals that the scene has been unloaded, clearing the vehicle manager and invoking all registered actions.
            </summary>
            <param name="scene">Scene that has been unloaded</param>
        </member>
        <member name="T:AVS.Admin.Utils">
            <summary>
            Global utility methods for the AVS mod.
            </summary>
        </member>
        <member name="M:AVS.Admin.Utils.FindVehicleInParents(UnityEngine.Transform,Vehicle@,System.Collections.Generic.List{UnityEngine.Transform})">
            <summary>
            Determines whether the specified transform or any of its ancestors is the currently mounted vehicle.
            </summary>
            <remarks>This method recursively traverses the transform hierarchy to determine if any
            ancestor is the player's currently mounted vehicle. If the specified transform is <see langword="null"/>,
            the method returns <see langword="false"/>.</remarks>
            <param name="current">The transform to check, typically representing a game object in the hierarchy.</param>
            <param name="vehicle">When this method returns, contains the <see cref="T:Vehicle"/> component if found. Null if the method returns false</param>
            <param name="checkedAncestry">A list of all transforms visited by the recursion.</param>
            <returns><see langword="true"/> if the specified transform or one of its ancestors is the vehicle currently mounted
            by the player; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:AVS.Admin.Utils.RegisterDepthModules">
            <summary>
            Registers the common depth modules for vehicles.
            </summary>
        </member>
        <member name="M:AVS.Admin.Utils.EvaluateDepthModules(AVS.UpgradeModules.AddActionParams)">
            <summary>
            Evaluates the depth upgrade modules installed on the specified vehicle and adjusts its crush depth
            accordingly.
            </summary>
            <remarks>This method checks the installed depth upgrade modules on the provided vehicle and
            determines the highest level of depth module present. Based on the detected module level, it calculates the
            additional crush depth and applies it to the vehicle. If the vehicle is not compatible with depth upgrades,
            a message is displayed to the user.</remarks>
            <param name="param">The parameters containing the vehicle to evaluate and its associated data.</param>
        </member>
        <member name="M:AVS.Admin.Utils.GetTechTypeFromVehicleName(System.String)">
            <summary>
            Retrieves the <see cref="T:TechType"/> associated with a vehicle based on its name.
            </summary>
            <remarks>If no vehicle with the specified name is found, an error is logged, and the method
            returns <see cref="F:TechType.None"/>.</remarks>
            <param name="name">The name of the vehicle to search for. This parameter is case-sensitive and must not be null or empty.</param>
            <returns>The <see cref="T:TechType"/> of the vehicle if a match is found; otherwise, returns <see
            cref="F:TechType.None"/>.</returns>
        </member>
        <member name="M:AVS.Admin.Utils.AddEncyclopediaEntry(PDAEncyclopedia.EntryData)">
            <summary>
            Adds a new entry to the PDA Encyclopedia or updates an existing one if the key already exists.
            </summary>
            <remarks>This method ensures that the entry is added or updated only after the PDA
            Encyclopedia mapping is initialized.  If an entry with the same key already exists, it will be replaced with
            the provided data.</remarks>
            <param name="data">The encyclopedia entry data to add or update. The <see cref="F:PDAEncyclopedia.EntryData.key"/> property must
            be unique and non-null.</param>
        </member>
        <member name="T:AVS.ExtensionMethods">
            <summary>
            Various extension methods for AVS functionality.
            </summary>
        </member>
        <member name="M:AVS.ExtensionMethods.GetAvsVehicle(Player)">
            <summary>
            Queries the vehicle associated with the player.
            </summary>
            <param name="player">The player instance.</param>
            <returns>The <see cref="T:AVS.BaseVehicle.AvsVehicle"/> associated with the player, or null if not found.</returns>
        </member>
        <member name="M:AVS.ExtensionMethods.GetCurrentUpgrades(Vehicle)">
            <summary>
            Gets the list of current upgrade module names installed in the vehicle.
            </summary>
            <param name="vehicle">The vehicle instance.</param>
            <returns>A list of upgrade module names.</returns>
        </member>
        <member name="M:AVS.ExtensionMethods.GetCurrentUpgrades(SubRoot)">
            <summary>
            Gets the list of current upgrade module names installed in all upgrade consoles of the subroot.
            </summary>
            <param name="subroot">The subroot instance.</param>
            <returns>A list of upgrade module names.</returns>
        </member>
        <member name="M:AVS.ExtensionMethods.Register(UnityEngine.AudioSource)">
            <summary>
            Registers the audio source with the FreezeTimePatcher.
            </summary>
            <param name="source">The audio source to register.</param>
            <returns>The registered <see cref="T:UnityEngine.AudioSource"/>.</returns>
        </member>
        <member name="M:AVS.ExtensionMethods.Undock(Vehicle)">
            <summary>
            Undocks the vehicle from its docking bay, if docked.
            </summary>
            <param name="vehicle">The vehicle to undock.</param>
        </member>
        <member name="M:AVS.ExtensionMethods.MaybeToggleCyclopsCollision(VehicleDockingBay)">
            <summary>
            Coroutine to temporarily disable and re-enable Cyclops collision when undocking.
            </summary>
            <param name="bay">The docking bay instance.</param>
            <returns>An enumerator for the coroutine.</returns>
        </member>
        <member name="M:AVS.ExtensionMethods.IsPilotingCyclops(Player)">
            <summary>
            Determines if the player is currently piloting a Cyclops.
            </summary>
            <param name="player">The player instance.</param>
            <returns>True if piloting a Cyclops, otherwise false.</returns>
        </member>
        <member name="M:AVS.ExtensionMethods.IsInCyclops(Player)">
            <summary>
            Determines if the player is currently inside a Cyclops.
            </summary>
            <param name="player">The player instance.</param>
            <returns>True if inside a Cyclops, otherwise false.</returns>
        </member>
        <member name="M:AVS.ExtensionMethods.IsGameObjectAncestor(UnityEngine.Transform,UnityEngine.GameObject)">
            <summary>
            Checks if the specified GameObject is an ancestor of the current transform.
            </summary>
            <param name="current">The current transform.</param>
            <param name="ancestor">The GameObject to check as ancestor.</param>
            <returns>True if ancestor is found, otherwise false.</returns>
        </member>
        <member name="M:AVS.ExtensionMethods.GetTechType(Vehicle)">
            <summary>
            Gets the <see cref="T:TechType"/> of the vehicle.
            </summary>
            <param name="vehicle">The vehicle instance.</param>
            <returns>The <see cref="T:TechType"/> of the vehicle, or <see cref="F:TechType.None"/> if not found.</returns>
        </member>
        <member name="T:AVS.VehicleManager">
            <summary>
            Provides management functions for AVS vehicles, including registration, enrollment, and loading.
            </summary>
        </member>
        <member name="P:AVS.VehicleManager.VehiclesInPlay">
            <summary>
            List of all AVS vehicles currently in play.
            </summary>
        </member>
        <member name="P:AVS.VehicleManager.MvPings">
            <summary>
            List of all registered ping instances for vehicles.
            </summary>
        </member>
        <member name="P:AVS.VehicleManager.VehicleTypes">
            <summary>
            List of all registered vehicle types.
            </summary>
        </member>
        <member name="M:AVS.VehicleManager.RegisterPingType(PingType)">
            <summary>
            Registers a new <see cref="T:PingType"/> for a vehicle, ensuring it is unique and above the minimum value.
            </summary>
            <param name="pt">The initial ping type to register.</param>
            <returns>The registered, unique ping type.</returns>
        </member>
        <member name="M:AVS.VehicleManager.RegisterPingType(PingType,System.Boolean)">
            <summary>
            Registers a new <see cref="T:PingType"/> for a vehicle, ensuring it is unique and above the minimum value.
            Optionally logs the registration process.
            </summary>
            <param name="pt">The initial ping type to register.</param>
            <param name="verbose">If true, logs detailed registration steps.</param>
            <returns>The registered, unique ping type.</returns>
        </member>
        <member name="M:AVS.VehicleManager.EnrollVehicle(AVS.BaseVehicle.AvsVehicle)">
            <summary>
            Enrolls a vehicle into the <see cref="P:AVS.VehicleManager.VehiclesInPlay"/> list and starts loading it if constructed.
            </summary>
            <param name="mv">The vehicle to enroll.</param>
        </member>
        <member name="M:AVS.VehicleManager.DeregisterVehicle(AVS.BaseVehicle.AvsVehicle)">
            <summary>
            Removes a vehicle from the <see cref="P:AVS.VehicleManager.VehiclesInPlay"/> list.
            </summary>
            <param name="mv">The vehicle to deregister.</param>
        </member>
        <member name="M:AVS.VehicleManager.LoadVehicle(AVS.BaseVehicle.AvsVehicle)">
            <summary>
            Coroutine that waits for the world to be ready, then calls <see cref="M:AVS.BaseVehicle.AvsVehicle.OnFinishedLoading"/> on the vehicle.
            </summary>
            <param name="mv">The vehicle to load.</param>
            <returns>Coroutine enumerator.</returns>
        </member>
        <member name="T:AVS.VehicleRegistrar">
            <summary>
            Handles registration, validation, and queuing of mod vehicles for the AVS system.
            Provides methods for registering vehicles, validating their configuration, and logging registration events.
            </summary>
        </member>
        <member name="P:AVS.VehicleRegistrar.VehiclesRegistered">
            <summary>
            The number of vehicles successfully registered.
            </summary>
        </member>
        <member name="P:AVS.VehicleRegistrar.VehiclesPrefabricated">
            <summary>
            The number of vehicles prefabricated.
            </summary>
        </member>
        <member name="T:AVS.VehicleRegistrar.LogType">
            <summary>
            Specifies the type of log message for verbose logging.
            </summary>
        </member>
        <member name="F:AVS.VehicleRegistrar.LogType.Log">
            <summary>
            Standard log message.
            </summary>
        </member>
        <member name="F:AVS.VehicleRegistrar.LogType.Warn">
            <summary>
            Warning log message.
            </summary>
        </member>
        <member name="M:AVS.VehicleRegistrar.VerboseLog(AVS.VehicleRegistrar.LogType,System.Boolean,System.String)">
            <summary>
            Logs a message if verbose logging is enabled, using the specified log type.
            </summary>
            <param name="type">The type of log message.</param>
            <param name="verbose">Whether verbose logging is enabled.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:AVS.VehicleRegistrar.RegisterVehicleLater(AVS.BaseVehicle.AvsVehicle,System.Boolean)">
            <summary>
            Registers a vehicle asynchronously by starting a coroutine.
            </summary>
            <remarks>Calls <see cref="M:AVS.VehicleRegistrar.RegisterVehicle(AVS.BaseVehicle.AvsVehicle,System.Boolean)"/></remarks>
            <param name="mv">The mod vehicle to register.</param>
            <param name="verbose">Whether to enable verbose logging.</param>
        </member>
        <member name="M:AVS.VehicleRegistrar.RegisterVehicle(AVS.BaseVehicle.AvsVehicle,System.Boolean)">
            <summary>
            Coroutine for registering a mod vehicle, including validation and queuing if necessary.
            </summary>
            <param name="mv">The mod vehicle to register.</param>
            <param name="verbose">Whether to enable verbose logging.</param>
            <returns>IEnumerator for coroutine execution.</returns>
        </member>
        <member name="M:AVS.VehicleRegistrar.InternalRegisterVehicle(AVS.BaseVehicle.AvsVehicle,System.Boolean)">
            <summary>
            Internal coroutine for registering a mod vehicle, including prefab creation and queue management.
            </summary>
            <param name="mv">The mod vehicle to register.</param>
            <param name="verbose">Whether to enable verbose logging.</param>
            <returns>IEnumerator for coroutine execution.</returns>
        </member>
        <member name="M:AVS.VehicleRegistrar.ValidateAll(AVS.BaseVehicle.AvsVehicle,System.Boolean)">
            <summary>
            Validates a mod vehicle and its specific type (Submarine, Submersible, Skimmer).
            </summary>
            <param name="mv">The mod vehicle to validate.</param>
            <param name="verbose">Whether to enable verbose logging.</param>
            <returns>True if the vehicle is valid; otherwise, false.</returns>
        </member>
        <member name="M:AVS.VehicleRegistrar.ValidateRegistration(AVS.BaseVehicle.AvsVehicle,System.Boolean)">
            <summary>
            Validates the registration of a mod vehicle, checking required fields and configuration.
            </summary>
            <param name="mv">The mod vehicle to validate.</param>
            <param name="verbose">Whether to enable verbose logging.</param>
            <returns>True if the vehicle is valid; otherwise, false.</returns>
        </member>
        <member name="M:AVS.VehicleRegistrar.ValidateRegistration(AVS.VehicleTypes.Submarine,System.Boolean)">
            <summary>
            Validates the registration of a Submarine, including submarine-specific requirements.
            </summary>
            <param name="mv">The submarine to validate.</param>
            <param name="verbose">Whether to enable verbose logging.</param>
            <returns>True if the submarine is valid; otherwise, false.</returns>
        </member>
        <member name="M:AVS.VehicleRegistrar.ValidateRegistration(AVS.VehicleTypes.Submersible,System.Boolean)">
            <summary>
            Validates the registration of a Submersible, including submersible-specific requirements.
            </summary>
            <param name="mv">The submersible to validate.</param>
            <param name="verbose">Whether to enable verbose logging.</param>
            <returns>True if the submersible is valid; otherwise, false.</returns>
        </member>
        <member name="T:AVS.Assets.VehicleAssets">
            <summary>
            Represents a set of assets related to a vehicle, including models,
            sprites, and fragments, loaded from an asset bundle.
            </summary>
        </member>
        <member name="P:AVS.Assets.VehicleAssets.Model">
            <summary>
            Retrieved model.
            Null if this asset was not loaded for a model.
            </summary>
        </member>
        <member name="P:AVS.Assets.VehicleAssets.Ping">
            <summary>
            Retrieved ping sprite.
            Null if this asset was not loaded for sprite atlas.
            </summary>
        </member>
        <member name="P:AVS.Assets.VehicleAssets.Crafter">
            <summary>
            Retrieved crafter sprite.
            Null if this asset was not loaded for sprite atlas.
            </summary>
        </member>
        <member name="P:AVS.Assets.VehicleAssets.Unlock">
            <summary>
            Unlock sprite.
            Null if this asset was not loaded for sprite atlas.
            </summary>
        </member>
        <member name="P:AVS.Assets.VehicleAssets.Fragment">
            <summary>
            Fragment GameObject.
            Null if this asset was not loaded for a fragment.
            </summary>
        </member>
        <member name="P:AVS.Assets.VehicleAssets.AssetBundleInterface">
            <summary>
            Gets the asset bundle interface used to load these assets.
            </summary>
        </member>
        <member name="M:AVS.Assets.VehicleAssets.#ctor(AVS.Assets.AssetBundleInterface,UnityEngine.GameObject,Atlas.Sprite,Atlas.Sprite,UnityEngine.GameObject,UnityEngine.Sprite)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.Assets.VehicleAssets"/> struct.
            </summary>
            <param name="abi">The asset bundle interface.</param>
            <param name="model">The vehicle model GameObject.</param>
            <param name="ping">The ping sprite.</param>
            <param name="crafter">The crafter sprite.</param>
            <param name="fragment">The fragment GameObject.</param>
            <param name="unlock">The unlock sprite.</param>
        </member>
        <member name="M:AVS.Assets.VehicleAssets.Close">
            <summary>
            Unloads the asset bundle associated with these assets.
            </summary>
        </member>
        <member name="T:AVS.Assets.AssetBundleInterface">
            <summary>
            Provides methods for loading and managing assets from a Unity asset bundle.
            </summary>
        </member>
        <member name="M:AVS.Assets.AssetBundleInterface.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.Assets.AssetBundleInterface"/> class and loads the asset bundle from the specified path.
            </summary>
            <param name="bundlePath">The file path to the asset bundle.</param>
        </member>
        <member name="M:AVS.Assets.AssetBundleInterface.GetSpriteAtlas(System.String)">
            <summary>
            Loads a sprite atlas from the asset bundle.
            </summary>
            <param name="spriteAtlasName">The name of the sprite atlas.</param>
            <returns>The loaded <see cref="T:UnityEngine.U2D.SpriteAtlas"/>, or null if not found.</returns>
        </member>
        <member name="M:AVS.Assets.AssetBundleInterface.GetSprite(System.String,System.String)">
            <summary>
            Loads a sprite from a sprite atlas in the asset bundle and wraps it in an <see cref="T:Atlas.Sprite"/>.
            </summary>
            <param name="spriteAtlasName">The name of the sprite atlas.</param>
            <param name="spriteName">The name of the sprite.</param>
            <returns>The loaded <see cref="T:Atlas.Sprite"/>, or null if not found.</returns>
        </member>
        <member name="M:AVS.Assets.AssetBundleInterface.GetRawSprite(System.String,System.String)">
            <summary>
            Loads a raw Unity <see cref="T:UnityEngine.Sprite"/> from a sprite atlas in the asset bundle.
            </summary>
            <param name="spriteAtlasName">The name of the sprite atlas.</param>
            <param name="spriteName">The name of the sprite.</param>
            <returns>The loaded <see cref="T:UnityEngine.Sprite"/>, or null if not found.</returns>
        </member>
        <member name="M:AVS.Assets.AssetBundleInterface.GetGameObject(System.String)">
            <summary>
            Loads a <see cref="T:UnityEngine.GameObject"/> from the asset bundle.
            </summary>
            <param name="gameObjectName">The name of the GameObject.</param>
            <returns>The loaded <see cref="T:UnityEngine.GameObject"/>, or null if not found.</returns>
        </member>
        <member name="M:AVS.Assets.AssetBundleInterface.GetAudioClip(System.String,System.String)">
            <summary>
            Loads an <see cref="T:UnityEngine.AudioClip"/> from a prefab in the asset bundle by name.
            </summary>
            <param name="prefabName">The name of the prefab containing the audio source.</param>
            <param name="clipName">The name of the audio clip.</param>
            <returns>The loaded <see cref="T:UnityEngine.AudioClip"/>, or null if not found.</returns>
        </member>
        <member name="M:AVS.Assets.AssetBundleInterface.GetVehicleAssetsFromBundle(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Loads vehicle-related assets from an asset bundle.
            </summary>
            <param name="bundleName">The name of the asset bundle file.</param>
            <param name="modelName">The name of the vehicle model GameObject.</param>
            <param name="spriteAtlasName">The name of the sprite atlas.</param>
            <param name="pingSpriteName">The name of the ping sprite.</param>
            <param name="crafterSpriteName">The name of the crafter sprite.</param>
            <param name="fragmentName">The name of the fragment GameObject.</param>
            <param name="unlockName">The name of the unlock sprite.</param>
            <returns>A <see cref="T:AVS.Assets.VehicleAssets"/> struct containing the loaded assets.</returns>
        </member>
        <member name="M:AVS.Assets.AssetBundleInterface.LoadAdditionalGameObject(AVS.Assets.AssetBundleInterface,System.String)">
            <summary>
            Loads an additional <see cref="T:UnityEngine.GameObject"/> from the asset bundle.
            </summary>
            <param name="abi">The asset bundle interface.</param>
            <param name="modelName">The name of the GameObject.</param>
            <returns>The loaded <see cref="T:UnityEngine.GameObject"/>, or null if not found.</returns>
        </member>
        <member name="M:AVS.Assets.AssetBundleInterface.LoadAdditionalSprite(AVS.Assets.AssetBundleInterface,System.String,System.String)">
            <summary>
            Loads an additional <see cref="T:Atlas.Sprite"/> from the asset bundle.
            </summary>
            <param name="abi">The asset bundle interface.</param>
            <param name="SpriteAtlasName">The name of the sprite atlas.</param>
            <param name="SpriteName">The name of the sprite.</param>
            <returns>The loaded <see cref="T:Atlas.Sprite"/>, or null if not found.</returns>
        </member>
        <member name="M:AVS.Assets.AssetBundleInterface.LoadAdditionalRawSprite(AVS.Assets.AssetBundleInterface,System.String,System.String)">
            <summary>
            Loads an additional raw <see cref="T:UnityEngine.Sprite"/> from the asset bundle.
            </summary>
            <param name="abi">The asset bundle interface.</param>
            <param name="SpriteAtlasName">The name of the sprite atlas.</param>
            <param name="SpriteName">The name of the sprite.</param>
            <returns>The loaded <see cref="T:UnityEngine.Sprite"/>, or null if not found.</returns>
        </member>
        <member name="M:AVS.Assets.AssetBundleInterface.LoadAudioClip(AVS.Assets.AssetBundleInterface,System.String,System.String)">
            <summary>
            Loads an <see cref="T:UnityEngine.AudioClip"/> from the asset bundle.
            </summary>
            <param name="abi">The asset bundle interface.</param>
            <param name="prefabName">The name of the prefab containing the audio source.</param>
            <param name="clipName">The name of the audio clip.</param>
            <returns>The loaded <see cref="T:UnityEngine.AudioClip"/>, or null if not found.</returns>
        </member>
        <member name="M:AVS.Assets.AssetBundleInterface.CloseBundle">
            <summary>
            Unloads the asset bundle from memory.
            </summary>
        </member>
        <member name="T:AVS.Assets.AbstractBiomeType">
            <summary>
            Biome types used in Subnautica.
            </summary>
        </member>
        <member name="T:AVS.Assets.BiomeTypes">
            <summary>
            Provides methods and mappings for working with biome types and their associated data.
            </summary>
            <remarks>The <see cref="T:AVS.Assets.BiomeTypes"/> class offers functionality to retrieve biome types associated
            with  specific abstract biome categories, as well as methods to generate biome data based on input parameters. 
            This class is designed to facilitate operations involving biomes, such as retrieving biome lists or  creating
            biome-specific data structures.</remarks>
        </member>
        <member name="M:AVS.Assets.BiomeTypes.Get(AVS.Assets.AbstractBiomeType)">
            <summary>
            Retrieves a read-only list of biome types associated with the specified abstract biome type.
            </summary>
            <param name="type">The abstract biome type for which to retrieve the associated biome types.</param>
            <returns>A read-only list of <see cref="T:BiomeType"/> objects associated with the specified  <paramref name="type"/>.
            The list will contain all biome types mapped to the given abstract biome type.</returns>
        </member>
        <member name="M:AVS.Assets.BiomeTypes.GetBiomeData(AVS.Assets.BiomeStruct)">
            <summary>
            Retrieves a list of biome data based on the specified biome structure.
            </summary>
            <remarks>The method uses the type specified in <paramref name="biomeStruct"/> to determine the
            biome types and generates corresponding biome data entries based on the count and probability
            values.</remarks>
            <param name="biomeStruct">A structure containing the type, count, and probability information used to generate the biome data.</param>
            <returns>A read-only list of <see cref="T:LootDistributionData.BiomeData"/> objects representing the generated biome data.</returns>
        </member>
        <member name="T:AVS.Assets.BiomeStruct">
            <summary>
            Represents a biome with its type, count, and probability of loot occurrence in this biome.
            </summary>
            <remarks>This structure is immutable and is used to encapsulate information about a specific biome,
            including its type, the number of occurrences, and the likelihood of loot in it.</remarks>
        </member>
        <member name="P:AVS.Assets.BiomeStruct.Type">
            <summary>
            Gets the type of the biome represented by this instance.
            </summary>
        </member>
        <member name="P:AVS.Assets.BiomeStruct.Count">
            <summary>
            Probably the number of loot items spawned at once if this biome is selected by random based on Probability.
            </summary>
        </member>
        <member name="P:AVS.Assets.BiomeStruct.Probability">
            <summary>
            Gets the probability value as a floating-point number.
            </summary>
        </member>
        <member name="M:AVS.Assets.BiomeStruct.#ctor(AVS.Assets.AbstractBiomeType,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.Assets.BiomeStruct"/> class with the specified biome type, count, and
            probability.
            </summary>
            <param name="type">The type of the biome represented by this structure. This value cannot be null.</param>
            <param name="count">The number of occurrences or instances of the biome. Must be a non-negative integer.</param>
            <param name="probability">The probability associated with the biome, represented as a floating-point value between 0.0 and 1.0.</param>
        </member>
        <member name="T:AVS.Assets.AbstractBiomeData">
            <summary>
            Represents a collection of abstract biome data, allowing conversion to concrete biome data.
            </summary>
        </member>
        <member name="P:AVS.Assets.AbstractBiomeData.Biomes">
            <summary>
            Gets the list of <see cref="T:AVS.Assets.BiomeStruct"/> instances representing the abstract biomes.
            </summary>
        </member>
        <member name="M:AVS.Assets.AbstractBiomeData.ConvertStruct(AVS.Assets.BiomeStruct)">
            <summary>
            Converts a <see cref="T:AVS.Assets.BiomeStruct"/> to a read-only list of <see cref="T:LootDistributionData.BiomeData"/> objects.
            </summary>
            <param name="biome">The <see cref="T:AVS.Assets.BiomeStruct"/> to convert.</param>
            <returns>A read-only list of <see cref="T:LootDistributionData.BiomeData"/> objects corresponding to the given biome structure.</returns>
        </member>
        <member name="M:AVS.Assets.AbstractBiomeData.Get">
            <summary>
            Retrieves all <see cref="T:LootDistributionData.BiomeData"/> objects for the biomes contained in this instance.
            </summary>
            <returns>A read-only list of <see cref="T:LootDistributionData.BiomeData"/> objects representing all biomes in this collection.</returns>
        </member>
        <member name="T:AVS.Assets.AbstractBiomeDataExtensions">
            <summary>
            Extension methods for <see cref="T:AVS.Assets.AbstractBiomeData"/> to simplify adding biomes.
            </summary>
        </member>
        <member name="M:AVS.Assets.AbstractBiomeDataExtensions.WithBiome(AVS.Assets.AbstractBiomeData,AVS.Assets.AbstractBiomeType,System.Int32,System.Single)">
            <summary>
            Adds a new <see cref="T:AVS.Assets.BiomeStruct"/> to the <see cref="T:AVS.Assets.AbstractBiomeData"/> instance with the specified parameters.
            </summary>
            <param name="data">The <see cref="T:AVS.Assets.AbstractBiomeData"/> instance to add the biome to.</param>
            <param name="type">The abstract biome type to add.</param>
            <param name="count">The number of occurrences for the biome. Defaults to 1.</param>
            <param name="probability">The probability of loot occurrence in the biome. Defaults to 0.1.</param>
            <returns>The <see cref="T:AVS.Assets.AbstractBiomeData"/> instance with the new biome added.</returns>
        </member>
        <member name="T:AVS.Assets.FragmentSpawnLocation">
            <summary>
            Possible spawn location for fragments.
            </summary>
        </member>
        <member name="P:AVS.Assets.FragmentSpawnLocation.Position">
            <summary>
            Spawn position.
            </summary>
        </member>
        <member name="P:AVS.Assets.FragmentSpawnLocation.EulerAngles">
            <summary>
            Spawn euler angles.
            </summary>
        </member>
        <member name="M:AVS.Assets.FragmentSpawnLocation.#ctor(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Creates a new spawn location for fragments.
            </summary>
        </member>
        <member name="T:AVS.Assets.FragmentData">
            <summary>
            FragmentData is a struct that contains all the information needed to register a fragment in the game.
            </summary>
        </member>
        <member name="P:AVS.Assets.FragmentData.Fragments">
            <summary>
            Fragment variations to use. The first one will be used as the main fragment, the rest will be used as variations.
            </summary>
        </member>
        <member name="P:AVS.Assets.FragmentData.Unlocks">
            <summary>
            The tech type that will be unlocked when the fragment is scanned.
            </summary>
        </member>
        <member name="P:AVS.Assets.FragmentData.FragmentsToScan">
            <summary>
            Number of fragments that need to be scanned to unlock the tech type.
            </summary>
        </member>
        <member name="P:AVS.Assets.FragmentData.ScanTime">
            <summary>
            The scan time in seconds for each fragment.
            </summary>
        </member>
        <member name="P:AVS.Assets.FragmentData.ClassID">
            <summary>
            The unique class ID of the fragment.
            </summary>
        </member>
        <member name="P:AVS.Assets.FragmentData.DisplayName">
            <summary>
            The display text for the fragment.
            </summary>
        </member>
        <member name="P:AVS.Assets.FragmentData.Description">
            <summary>
            The description text for the fragment, shown in the PDA.
            </summary>
        </member>
        <member name="P:AVS.Assets.FragmentData.SpawnLocations">
            <summary>
            Spawn locations for the fragment. If there are multiple fragments, they will be spawned in a round-robin fashion.
            </summary>
        </member>
        <member name="P:AVS.Assets.FragmentData.EncyclopediaKey">
            <summary>
            The encyclopedia key for the fragment, used to link it to the encyclopedia entry.
            </summary>
        </member>
        <member name="M:AVS.Assets.FragmentData.#ctor(System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},TechType,System.Int32,System.Single,System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList{AVS.Assets.FragmentSpawnLocation},System.String)">
            <summary>
            Creates a new FragmentData instance.
            </summary>
            <param name="fragments">Fragment variations to use. The first one will be used as the main fragment, the rest will be used as variations</param>
            <param name="unlocks">The tech type that will be unlocked when the fragment is scanned</param>
            <param name="fragmentsToScan">Number of fragments that need to be scanned to unlock the tech type</param>
            <param name="scanTime">The scan time in seconds for each fragment</param>
            <param name="classID">The unique class ID of the fragment</param>
            <param name="displayName">The display text for the fragment</param>
            <param name="description">The description text for the fragment, shown in the PDA</param>
            <param name="spawnLocations">Spawn locations for the fragment. If there are multiple fragments, they will be spawned in a round-robin fashion</param>
            <param name="encyKey">The encyclopedia key for the fragment, used to link it to the encyclopedia entry</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:AVS.Assets.FragmentManager">
            <summary>
            Management class for fragments, scattered across the map.
            Use this to register fragments and their properties.
            </summary>
        </member>
        <member name="M:AVS.Assets.FragmentManager.RegisterFragment(AVS.Assets.FragmentData)">
            <summary>
            Registers a fragment using a FragmentData struct as input. For a ModVehicle, you can access its techtype AFTER registration like this:
            vehicle.GetComponent&lt;TechTag&gt;().type
            </summary>
            <returns>The TechType of the new fragment.</returns>
        </member>
        <member name="M:AVS.Assets.FragmentManager.Start">
            <inheritdoc />
        </member>
        <member name="T:AVS.Assets.Image">
            <summary>
            Helper structure for sprites
            </summary>
        </member>
        <member name="P:AVS.Assets.Image.Sprite">
            <summary>
            The image loaded as a sprite
            </summary>
        </member>
        <member name="P:AVS.Assets.Image.AtlasSprite">
            <summary>
            The image loaded as an Atlas.Sprite
            </summary>
        </member>
        <member name="M:AVS.Assets.Image.#ctor(UnityEngine.Sprite)">
            <summary>
            Constructs a new <see cref="T:AVS.Assets.Image"/> from a <see cref="P:AVS.Assets.Image.Sprite"/>.
            </summary>
            <param name="sprite"></param>
        </member>
        <member name="T:AVS.Assets.PatcherImages">
            <summary>
            Represents a collection of images used by AVS.
            </summary>
        </member>
        <member name="P:AVS.Assets.PatcherImages.DepthModule1Icon">
            <summary>
            The icon for the Depth Module 1 upgrade.
            </summary>
        </member>
        <member name="P:AVS.Assets.PatcherImages.DepthModule2Icon">
            <summary>
            The icon for the Depth Module 2 upgrade.
            </summary>
        </member>
        <member name="P:AVS.Assets.PatcherImages.DepthModule3Icon">
            <summary>
            The icon for the Depth Module 3 upgrade.
            </summary>
        </member>
        <member name="P:AVS.Assets.PatcherImages.DepthModuleNodeIcon">
            <summary>
            The icon to use for the parent node of all depth modules in the crafting tree.
            </summary>
        </member>
        <member name="P:AVS.Assets.PatcherImages.FabricatorIcon">
            <summary>
            Icon used by the AVS fabricator.
            </summary>
        </member>
        <member name="M:AVS.Assets.PatcherImages.#ctor(AVS.Assets.Image,AVS.Assets.Image,AVS.Assets.Image,AVS.Assets.Image,AVS.Assets.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.Assets.PatcherImages"/> class with specified images for depth module
            icons.
            </summary>
        </member>
        <member name="T:AVS.Assets.PrefabLoader">
            <summary>
            Helper class for loading prefabs asynchronously.
            </summary>
        </member>
        <member name="P:AVS.Assets.PrefabLoader.Techtype">
            <summary>
            The tech type of the prefab being loaded.
            </summary>
        </member>
        <member name="P:AVS.Assets.PrefabLoader.Coroutine">
            <summary>
            The coroutine that is responsible for loading the prefab.
            </summary>
        </member>
        <member name="M:AVS.Assets.PrefabLoader.Request(TechType)">
            <summary>
            Requests a <see cref="T:AVS.Assets.PrefabLoader"/> instance for the specified <see cref="T:TechType"/>.
            </summary>
            <param name="techtype">The <see cref="T:TechType"/> for which to request a <see cref="T:AVS.Assets.PrefabLoader"/>.</param>
            <returns>A <see cref="T:AVS.Assets.PrefabLoader"/> instance associated with the specified <paramref name="techtype"/>. If an
            instance already exists, it returns the existing instance; otherwise, it creates a new one and starts the loading process.</returns>
        </member>
        <member name="P:AVS.Assets.PrefabLoader.Instance">
            <summary>
            Queries the latest known instance of the requested resource.
            </summary>
        </member>
        <member name="P:AVS.Assets.PrefabLoader.CanLoad">
            <summary>
            True if the prefab can be loaded, false if any ongoing loading operation should be delayed.
            </summary>
        </member>
        <member name="T:AVS.Assets.SeamothHelper">
            <summary>
            Global helper for loading the Seamoth prefab.
            </summary>
        </member>
        <member name="P:AVS.Assets.SeamothHelper.Coroutine">
            <summary>
            Access to the coroutine that loads the Seamoth prefab.
            Allocated on first access, so it is safe to call this property multiple times.
            </summary>
        </member>
        <member name="P:AVS.Assets.SeamothHelper.Seamoth">
            <summary>
            Tries to access the Seamoth prefab.
            If <see cref="P:AVS.Assets.SeamothHelper.Coroutine" /> was never accessed, it will throw an <see cref="T:System.InvalidOperationException"/>.
            Ohterwise it may return null if the prefab is not yet loaded.
            </summary>
        </member>
        <member name="P:AVS.Assets.SeamothHelper.RequireSeamoth">
            <summary>
            Access to the Seamoth prefab, guaranteed to be non-null.
            Throws an <see cref="T:System.InvalidOperationException"/> if the prefab is not yet loaded.
            </summary>
        </member>
        <member name="T:AVS.Assets.SpriteHelper">
            <summary>
            Provides helper methods for loading and managing sprites from disk and registering ping sprites.
            </summary>
        </member>
        <member name="M:AVS.Assets.SpriteHelper.GetSpriteInternal(System.String)">
            <summary>
            Loads an <see cref="T:Atlas.Sprite"/> from the "Sprites" directory relative to the executing assembly.
            </summary>
            <param name="name">The sprite file name.</param>
            <returns>The loaded <see cref="T:Atlas.Sprite"/>, or null if not found.</returns>
        </member>
        <member name="M:AVS.Assets.SpriteHelper.GetSprite(System.String)">
            <summary>
            Loads an <see cref="T:Atlas.Sprite"/> from a relative path based on the calling assembly's location.
            </summary>
            <param name="relativePath">The relative path to the sprite file.</param>
            <returns>The loaded <see cref="T:Atlas.Sprite"/>, or null if not found.</returns>
        </member>
        <member name="M:AVS.Assets.SpriteHelper.GetSpriteRaw(System.String)">
            <summary>
            Loads a raw <see cref="T:UnityEngine.Sprite"/> from a relative path based on the calling assembly's location.
            </summary>
            <param name="relativePath">The relative path to the sprite file.</param>
            <returns>The loaded <see cref="T:UnityEngine.Sprite"/>, or null if not found.</returns>
        </member>
        <member name="M:AVS.Assets.SpriteHelper.RequireImage(System.String)">
            <summary>
            Loads a required <see cref="T:AVS.Assets.Image"/> from a relative path based on the calling assembly's location.
            </summary>
            <param name="relativePath">Path relative to the executing assembly's path</param>
            <returns>Loaded image</returns>
            <exception cref="T:System.IO.FileNotFoundException">The file does not exist</exception>
            <exception cref="T:System.IO.IOException">Sprite loading has failed</exception>
        </member>
        <member name="M:AVS.Assets.SpriteHelper.GetSpriteGeneric(System.String)">
            <summary>
            Loads an <see cref="T:Atlas.Sprite"/> from a full file path.
            </summary>
            <param name="fullPath">The full path to the sprite file.</param>
            <returns>The loaded <see cref="T:Atlas.Sprite"/>, or null if not found.</returns>
        </member>
        <member name="M:AVS.Assets.SpriteHelper.GetSpriteGenericRaw(System.String)">
            <summary>
            Loads a <see cref="T:UnityEngine.Sprite"/> from a full file path.
            </summary>
            <param name="fullPath">The full path to the sprite file.</param>
            <returns>The loaded <see cref="T:UnityEngine.Sprite"/>, or null if not found.</returns>
        </member>
        <member name="M:AVS.Assets.SpriteHelper.CreateSpriteFromAtlasSprite(Atlas.Sprite)">
            <summary>
            Creates a <see cref="T:UnityEngine.Sprite"/> from an <see cref="T:Atlas.Sprite"/>.
            </summary>
            <param name="sprite">The <see cref="T:Atlas.Sprite"/> to convert.</param>
            <returns>The created <see cref="T:UnityEngine.Sprite"/>.</returns>
        </member>
        <member name="P:AVS.Assets.SpriteHelper.PingSprites">
            <summary>
            List of registered ping sprites, each with a name, ping type, and sprite.
            </summary>
        </member>
        <member name="M:AVS.Assets.SpriteHelper.RegisterPingSprite(System.String,PingType,Atlas.Sprite)">
            <summary>
            Registers a ping sprite with a name and ping type.
            </summary>
            <param name="name">The name of the ping sprite.</param>
            <param name="pt">The ping type.</param>
            <param name="pingSprite">The <see cref="T:Atlas.Sprite"/> to register.</param>
        </member>
        <member name="T:AVS.Assets.StaticAssets">
            <summary>
            Provides static access to commonly used assets such as sprites, recipes, and default engine instances.
            </summary>
        </member>
        <member name="P:AVS.Assets.StaticAssets.AvsVehicleIcon">
            <summary>
            Gets the default sprite used as the icon for mod vehicle that do not customize it.
            </summary>
        </member>
        <member name="P:AVS.Assets.StaticAssets.UpgradeIcon">
            <summary>
            Gets the default sprite used as the icon for upgrades if the mod vehicle does not customize it.
            </summary>
        </member>
        <member name="P:AVS.Assets.StaticAssets.DefaultPingSprite">
            <summary>
            Gets the default ping sprite for the mod vehicle used in the PDA and other interfaces
            if the mod vehicle does not customize it.
            </summary>
        </member>
        <member name="P:AVS.Assets.StaticAssets.DefaultSaveFileSprite">
            <summary>
            Gets the default sprite used for save files of the mod vehicle if the mod vehicle does not customize it.
            </summary>
        </member>
        <member name="M:AVS.Assets.StaticAssets.GetSprites">
            <summary>
            Loads and assigns static sprite assets from internal and asset bundle sources.
            </summary>
        </member>
        <member name="T:AVS.Audio.AsyncPromise`1">
            <summary>
            Represents an asynchronous operation that will eventually yield a value of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the result value.</typeparam>
        </member>
        <member name="P:AVS.Audio.AsyncPromise`1.Value">
            <summary>
            Gets the value of the promise if resolved.
            </summary>
        </member>
        <member name="P:AVS.Audio.AsyncPromise`1.IsDone">
            <summary>
            Gets a value indicating whether the promise has completed (either resolved or rejected).
            </summary>
        </member>
        <member name="P:AVS.Audio.AsyncPromise`1.IsError">
            <summary>
            Gets a value indicating whether the promise was rejected due to an error.
            </summary>
        </member>
        <member name="P:AVS.Audio.AsyncPromise`1.ErrorMessage">
            <summary>
            Error message if the promise was rejected.
            </summary>
        </member>
        <member name="M:AVS.Audio.AsyncPromise`1.Resolve(`0)">
            <summary>
            Resolves the promise with the specified value.
            </summary>
            <param name="value">The value to resolve the promise with.</param>
        </member>
        <member name="M:AVS.Audio.AsyncPromise`1.Reject(System.String)">
            <summary>
            Rejects the promise, indicating an error occurred.
            </summary>
        </member>
        <member name="T:AVS.Audio.DynamicClipLoader">
            <summary>
            Provides asynchronous loading and caching of <see cref="T:UnityEngine.AudioClip"/> assets.
            </summary>
        </member>
        <member name="P:AVS.Audio.DynamicClipLoader.AudioClipPromises">
            <summary>
            Caches promises for audio clips by file path.
            </summary>
        </member>
        <member name="M:AVS.Audio.DynamicClipLoader.GetAudioClipAsync(System.String)">
            <summary>
            Asynchronously gets an <see cref="T:UnityEngine.AudioClip"/> from the specified file path.
            If the clip is already being loaded, returns the existing promise.
            </summary>
            <param name="filePath">The file path to the audio clip.</param>
            <returns>An <see cref="T:AVS.Audio.AsyncPromise`1"/> representing the loading operation.</returns>
        </member>
        <member name="M:AVS.Audio.DynamicClipLoader.LoadAudioClip(System.String,System.Action{UnityEngine.AudioClip},System.Action{System.String})">
            <summary>
            Coroutine that loads an <see cref="T:UnityEngine.AudioClip"/> from the specified file path.
            </summary>
            <param name="filePath">The file path to the audio clip.</param>
            <param name="onSuccess">Callback invoked with the loaded <see cref="T:UnityEngine.AudioClip"/> on success.</param>
            <param name="onError">Callback invoked if loading fails.</param>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for use with Unity coroutines.</returns>
        </member>
        <member name="T:AVS.Audio.FModException">
            <summary>
            Caught fatal FMOD result.
            </summary>
        </member>
        <member name="P:AVS.Audio.FModException.Result">
            <summary>
            The result that caused the exception.
            </summary>
        </member>
        <member name="M:AVS.Audio.FModException.#ctor(System.String,FMOD.RESULT)">
            <summary>
            Represents an exception that occurs when an FMOD operation fails.
            </summary>
            <param name="message">The error message that describes the exception.</param>
            <param name="result">The FMOD result code associated with the exception.</param>
        </member>
        <member name="T:AVS.Audio.FModSoundCreator">
            <summary>
            FMOD sound creator.
            </summary>
        </member>
        <member name="M:AVS.Audio.FModSoundCreator.Instantiate(AVS.Audio.SoundSetup,UnityEngine.Vector3)">
            <summary>
            Attempts to instantiate a new FMOD sound based on the provided configuration.
            </summary>
            <param name="cfg">The sound configuration to instantiate</param>
            <param name="startingPosition">The position where the sound should start playing</param>
            <returns></returns>
        </member>
        <member name="T:AVS.Audio.FModSoundSource">
            <summary>
            FMOD sound source, potentially spatial. Attachable as component to any GameObject.
            </summary>
        </member>
        <member name="P:AVS.Audio.FModSoundSource.Setup">
            <summary>
            The sound configuration for this sound source.
            Until property set, the local sound will not be created.
            </summary>
        </member>
        <member name="P:AVS.Audio.FModSoundSource.Settings">
            <summary>
            Volume and pitch settings for this sound source.
            </summary>
        </member>
        <member name="M:AVS.Audio.FModSoundSource.OnDestroy">
            <inheritDoc />
        </member>
        <member name="M:AVS.Audio.FModSoundSource.Update">
            <inheritDoc />
        </member>
        <member name="T:AVS.Audio.SoundSettings">
            <summary>
            Represents the volume and pitch settings for a sound.
            </summary>
        </member>
        <member name="P:AVS.Audio.SoundSettings.Pitch">
            <summary>
            Gets the pitch value for the sound.
            </summary>
        </member>
        <member name="P:AVS.Audio.SoundSettings.Volume">
            <summary>
            Gets the volume value for the sound.
            </summary>
        </member>
        <member name="M:AVS.Audio.SoundSettings.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.Audio.SoundSettings"/> struct.
            </summary>
            <param name="volume">The volume of the sound. Default is 1.0f.</param>
            <param name="pitch">The pitch of the sound. Default is 1.0f.</param>
        </member>
        <member name="M:AVS.Audio.SoundSettings.IsSignificantlyDifferent(AVS.Audio.SoundSettings)">
            <summary>
            Determines whether the current settings are significantly different from another <see cref="T:AVS.Audio.SoundSettings"/> instance.
            </summary>
            <param name="other">The other <see cref="T:AVS.Audio.SoundSettings"/> to compare with.</param>
            <returns>True if the settings differ by more than a small threshold; otherwise, false.</returns>
        </member>
        <member name="M:AVS.Audio.SoundSettings.SigDif(System.Single,System.Single)">
            <summary>
            Determines if two float values are significantly different based on a fixed threshold.
            </summary>
            <param name="a">First value.</param>
            <param name="b">Second value.</param>
            <returns>True if the absolute difference is greater than 0.005f; otherwise, false.</returns>
        </member>
        <member name="T:AVS.Audio.SoundSetup">
            <summary>
            Represents the configuration for a sound source, including its audio clip, playback settings, and spatial properties.
            </summary>
            <remarks>
            This struct encapsulates the settings required to configure and play a sound, such as the
            associated audio clip, volume, pitch, spatial distances, and looping behavior. It is immutable and can be used
            to define sound properties for playback in both 2D and 3D contexts.
            </remarks>
        </member>
        <member name="P:AVS.Audio.SoundSetup.AudioClip">
            <summary>
            Gets the audio clip associated with this instance.
            </summary>
        </member>
        <member name="P:AVS.Audio.SoundSetup.Is3D">
            <summary>
            Gets a value indicating whether the object is represented in 3D.
            </summary>
        </member>
        <member name="P:AVS.Audio.SoundSetup.Loop">
            <summary>
            Gets a value indicating whether the playback is set to loop.
            </summary>
        </member>
        <member name="P:AVS.Audio.SoundSetup.MinDistance">
            <summary>
            Gets the minimum distance for the listener.
            If the listener is closer than this distance, the sound will be played at full volume.
            </summary>
        </member>
        <member name="P:AVS.Audio.SoundSetup.MaxDistance">
            <summary>
            Gets the maximum distance for the listener.
            If the listener is farther than this distance, the sound will not be heard.
            </summary>
        </member>
        <member name="P:AVS.Audio.SoundSetup.HalfDistance">
            <summary>
            Gets the listener distance at which the sound volume is exactly half the maximum volume.
            Must be in the range (MinDistance, MaxDistance).
            </summary>
        </member>
        <member name="P:AVS.Audio.SoundSetup.Settings">
            <summary>
            The initial volume and pitch settings.
            </summary>
        </member>
        <member name="M:AVS.Audio.SoundSetup.#ctor(UnityEngine.AudioClip,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.Audio.SoundSetup"/> struct.
            </summary>
            <param name="audioClip">The audio clip to play. Cannot be null.</param>
            <param name="volume">The initial volume. Default is 1.0f.</param>
            <param name="pitch">The initial pitch. Default is 1.0f.</param>
            <param name="minDistance">The minimum distance for full volume. Default is 1.0f.</param>
            <param name="maxDistance">The maximum distance for audibility. Default is 500.0f.</param>
            <param name="halfDistance">The distance at which the volume is half. Must be between minDistance and maxDistance. Default is 20.0f.</param>
            <param name="loop">Whether the sound should loop. Default is false.</param>
            <param name="is3D">Whether the sound is 3D. Default is true.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="audioClip"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if distance parameters are invalid.</exception>
        </member>
        <member name="M:AVS.Audio.SoundSetup.IsLiveCompatibleTo(AVS.Audio.SoundSetup)">
            <summary>
            Determines if this <see cref="T:AVS.Audio.SoundSetup"/> is compatible with another for live playback (e.g., can be swapped without stopping playback).
            </summary>
            <param name="other">The other <see cref="T:AVS.Audio.SoundSetup"/> to compare with.</param>
            <returns>True if both setups use the same AudioClip and looping setting; otherwise, false.</returns>
        </member>
        <member name="T:AVS.BaseVehicle.AvsVehicle">
            <summary>
            ModVehicle is the primary abstract class provided by Vehicle Framework. 
            All VF vehicles inherit from ModVehicle.
            </summary>
        </member>
        <member name="T:AVS.BaseVehicle.AvsVehicle.PilotingStyle">
            <summary>
            The piloting style of the vehicle.
            </summary>
        </member>
        <member name="F:AVS.BaseVehicle.AvsVehicle.PilotingStyle.Cyclops">
            <summary>
            Arms expected to grab a wheel
            </summary>
        </member>
        <member name="F:AVS.BaseVehicle.AvsVehicle.PilotingStyle.Seamoth">
            <summary>
            Arms expected to grab joysticks
            </summary>
        </member>
        <member name="F:AVS.BaseVehicle.AvsVehicle.PilotingStyle.Prawn">
            <summary>
            Arms expected to grab joysticks
            </summary>
        </member>
        <member name="F:AVS.BaseVehicle.AvsVehicle.PilotingStyle.Other">
            <summary>
            Arm animations controled via <see cref="M:AVS.BaseVehicle.AvsVehicle.HandleOtherPilotingAnimations(System.Boolean)"/>
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.VehicleRoot">
            <summary>
            The root game object of this vehicle. Usually the same as the vehicle game object.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.Log">
            <summary>
            Primary logging facility for this vehicle.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.Config">
            <summary>
            Invariant vehicle configuration. Initialized during construction.
            Never null.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.LogDebug">
            <summary>
            True to log high-verbosity debug messages (as non-debug)
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetVehicleComposition">
            <summary>
            Retrieves the composition of the vehicle.
            Executed once either during <see cref="M:AVS.BaseVehicle.AvsVehicle.Awake"/> or vehicle registration, whichever comes first.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.Com">
            <summary>
            Resolved vehicle composition.
            If accessed before <see cref="M:AVS.BaseVehicle.AvsVehicle.Awake"/> (or vehicle registration), InvalidOperationException will be thrown.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.#ctor(AVS.Configuration.VehicleConfiguration)">
            <summary>
            Constructs the vehicle with the given configuration.
            </summary>
            <param name="config">Vehicle configuration. Must not be null</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.SpawnMiniWorld(UnityEngine.Transform,UnityEngine.Material,System.Int32,System.Boolean)">
            <summary>
            Constructs a map mini-world hologram on the given object.
            </summary>
            <param name="worldObject">The object that will hold the map. May be scaled and rotated by the minimap</param>
            <param name="material">Material to use for the hologram</param>
            <param name="mapWorldRadius">Effective map radius in meters</param>
            <param name="withShadows">True if the map material should cast and receive shadows,
            false to use the default behavior (off)</param>
            <returns>Created mini-world</returns>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.RequireComposition">
            <summary>
            Initialized <see cref="P:AVS.BaseVehicle.AvsVehicle.Com"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.Id">
            <summary>
            A unique ID for this vehicle instance.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.VoiceQueue">
            <summary>
            The voice queue for this vehicle.
            Set by <see cref="M:AVS.BaseVehicle.AvsVehicle.Awake"/>.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.Autopilot">
            <summary>
            Gets the AutoPilot system associated with the current instance.
            Set by <see cref="M:AVS.BaseVehicle.AvsVehicle.Awake"/>.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.Awake">
            <inheritdoc />
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.Start">
            <inheritdoc />
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.AnticipatePlayerIssues">
            <summary>
            If set true, the vehicle assumes the player will be manipulated by external processes.
            Remains active until the PDA, main menu, or builder menu are opened, or the player
            exists the vehicle or enters helm control.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.Update">
            <inheritdoc />
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.FixedUpdate">
            <inheritdoc />
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnKill">
            <summary>
            To be executed when the vehicle is killed.
            </summary>
            <remarks>Calls <see cref="M:AVS.BaseVehicle.AvsVehicle.DestroyVehicle"/> </remarks>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetDepth(System.Int32@,System.Int32@)">
            <summary>
            Gets the current vehicle depth and crush depth.
            </summary>
            <param name="depth">Vehicle depth</param>
            <param name="crushDepth">Crush depth</param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.ExitHelmControl">
            <summary>
            Deselects quick-slots and exits piloting
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.vehicleDefaultName">
            <summary>
            Vehicle default name
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnAIBatteryReload">
            <summary>
            Supposed to be called when the AI battery is reloaded.
            The way it's implement now, this appears to be called when any battery is reloaded.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetIsUnderwater">
            <summary>
            Detects if the vehicle is currently underwater.
            </summary>
            <returns>true if underwater</returns>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.HudPingInstance">
            <summary>
            Marker on the HUD.
            Can be used to enable or disable the marker.
            </summary>
            <remarks>Set during <see cref="M:AVS.BaseVehicle.AvsVehicle.Awake"/></remarks>
        </member>
        <member name="F:AVS.BaseVehicle.AvsVehicle.aiEnergyInterface">
            <summary>
            Energy interface used by the AI.
            At present, this is only used by the <see cref="P:AVS.BaseVehicle.AvsVehicle.Autopilot" /> to refill oxygen.
            </summary>
            <remarks> Prefabrication fields must remain open fields or
            Unity instantiation will not preserve them. We cannot fetch it during awake because
            the vehicle may have multiple energy interfaces.</remarks>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.IsPoweredOn">
            <summary>
            if the player toggles the power off, the vehicle is called "powered off,"
            because it is unusable yet the batteries are not empty
            </summary>
        </member>
        <member name="F:AVS.BaseVehicle.AvsVehicle.ambienceSound">
            <summary>
            Ambient sound emitter, copied from the seamoth prefab.
            </summary>
            <remarks>
            Copied during prefab setup.
            </remarks>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.PowerManager">
            <summary>
            The vehicle's power manager.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.TechType">
            <summary>
            Fetches the tech type of the vehicle by searching for its <see cref="T:TechTag" /> component.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.HandlePilotingAnimations">
            <summary>
            Executed when the player has started piloting a vehicle. The exact animations depend on <see cref="P:AVS.Configuration.VehicleConfiguration.PilotingStyle" />.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.NotifyStatus(AVS.PlayerStatus)">
            <summary>
            Broadcasts a new player status to all components that implement <see cref="T:AVS.IPlayerListener" />.
            </summary>
            <param name="newStatus">New status to broadcast</param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetHUDValues(System.Single@,System.Single@)">
            <summary>
            Retrieves the current health and power values of the vehicle.
            Returned values are in the range of 0 to 1, where 1 is full health/power.
            </summary>
            <param name="health">Relative out health</param>
            <param name="power">Relative out power</param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.SetName(System.String)">
            <summary>
            Updates the vehicle name.
            </summary>
            <param name="name">New vehicle name</param>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.VehicleName">
            <summary>
            Gets the applied local vehicle name
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.SubRoot">
            <summary>
            Retrieves and/or caches the SubRoot instance attached to this vehicle
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetPilotingMode">
            <summary>
            Checks if the vehicle is in locked piloting mode.
            That is, the player is in locked piloting mode and is currently
            located in this vehicle's helm location.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetEnergyMixinFromVehicle(Vehicle)">
            <summary>
            Retrieves the <see cref="T:EnergyMixin"/> from the given vehicle.
            </summary>
            <remarks>Called via reflection</remarks>
            <param name="veh">Vehicle to retrieve the energy mixin from</param>
            <returns>Energy mixin. Every vehicle should have one</returns>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.SetBaseColor(AVS.VehicleComponents.VehicleColor)">
            <summary>
            Updates the base color of the vehicle.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.SetInteriorColor(AVS.VehicleComponents.VehicleColor)">
            <summary>
            Updates the interior color of the vehicle.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.SetStripeColor(AVS.VehicleComponents.VehicleColor)">
            <summary>
            Updates the stripe color of the vehicle.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.SetNameColor(AVS.VehicleComponents.VehicleColor)">
            <summary>
            Updates the name color of the vehicle.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.BaseColor">
            <summary>
            The current base color.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.InteriorColor">
            <summary>
            The current interior color.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.StripeColor">
            <summary>
            The current stripe color.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.NameColor">
            <summary>
            The current name color.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.IsUndockingAnimating">
            <summary>
            Gets a value indicating whether the undocking animation is currently in progress.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.IsVehicleDocked">
            <summary>
            True if the vehicle is currently docked in a docking bay (e.g. a moonpool).
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnVehicleDocked(UnityEngine.Vector3)">
            <summary>
            Executed when the vehicle docks in a docking bay (e.g. a moonpool).
            </summary>
            <remarks>Calls <see cref="M:AVS.BaseVehicle.AvsVehicle.OnPlayerDocked(UnityEngine.Vector3)" /> if the vessel is currently being controlled</remarks>
            <param name="exitLocation">
            The location the player should exit to after docking</param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnPlayerDocked(UnityEngine.Vector3)">
            <summary>
            Executed when the player should evict the vehicle after being docked in a docking bay (e.g. a moonpool).
            </summary>
            <remarks>Calls <see cref="M:AVS.BaseVehicle.AvsVehicle.ClosestPlayerExit(System.Boolean)" /></remarks>
            <param name="exitLocation">If non-zero, the player should relocate to this location</param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnVehicleUndocked">
            <summary>
            Executed when the vehicle undocks from a docking bay (e.g. a moonpool).
            </summary>
            <remarks>Calls <see cref="M:AVS.BaseVehicle.AvsVehicle.OnPlayerUndocked" /></remarks>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnPlayerUndocked">
            <summary>
            Executed when the player should reenter a newly undocked local vehicle.
            </summary>
            <remarks>Calls <see cref="M:AVS.BaseVehicle.AvsVehicle.ClosestPlayerEntry"/></remarks>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.AnimateMoonPoolArms(VehicleDockingBay)">
            <summary>
            Animation routine to execute when the vehicle is (un)docked in a moonpool.
            </summary>
            <param name="moonpool"></param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetDockingDifferenceFromCenter">
            <summary>
            Gets the difference between the vehicle's position and the center of its bounding box in world space,
            subject to its current orientation.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetDockingBoundsSize">
            <summary>
            Loosely computes the bounding dimensions of the vehicle.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.PlayerAtHelm">
            <summary>
            True if the player is currently piloting the vehicle.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.DoExitRoutines">
            <summary>
            Executed by <see cref="M:AVS.BaseVehicle.AvsVehicle.DeselectSlots" />, as part of the player exiting helm control
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.CanPilot">
            <summary>
            Checks if this vehicle can be piloted.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.IsBoarded">
            <summary>
            True if the vehicle is currently boarded by the player.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.IsPlayerControlling">
            <summary>
            Checks if the player is currently piloting this vehicle.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.HandleOtherPilotingAnimations(System.Boolean)">
            <summary>
            Executed has started being piloted by a player and <see cref="P:AVS.Configuration.VehicleConfiguration.PilotingStyle" /> is set to <see cref="F:AVS.BaseVehicle.AvsVehicle.PilotingStyle.Other" />.
            </summary>
            <param name="isPiloting">True if the player is actually piloting</param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.PlayerCanExitHelmControl(System.Single,System.Single,System.Single)">
            <summary>
            Checks if the player can exit helm control based on the current roll, pitch, and velocity.
            </summary>
            <param name="roll">Current roll delta angle from identity</param>
            <param name="pitch">Current pitch delta angle from identity</param>
            <param name="velocity">Current vehicle velocity</param>
            <returns>True if the player is permitted to exit helm control</returns>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnPreBeginHelmControl(AVS.VehicleParts.Helm)">
            <summary>
            Invoked when <see cref="M:AVS.BaseVehicle.AvsVehicle.BeginHelmControl(AVS.VehicleParts.Helm)" /> starts.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnBeginHelmControl(AVS.VehicleParts.Helm)">
            <summary>
            Invoked when <see cref="M:AVS.BaseVehicle.AvsVehicle.BeginHelmControl(AVS.VehicleParts.Helm)" /> ends.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnPreEndHelmControl">
            <summary>
            Invoked when <see cref="M:AVS.BaseVehicle.AvsVehicle.EndHelmControl(System.Single)" /> starts.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnEndHelmControl">
            <summary>
            Invoked when <see cref="M:AVS.BaseVehicle.AvsVehicle.EndHelmControl(System.Single)" /> ends.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnPrePlayerExit">
            <summary>
            Invoked when <see cref="M:AVS.BaseVehicle.AvsVehicle.PlayerExit(AVS.VehicleParts.VehicleHatchDefinition,System.Boolean)" /> starts.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnPlayerExit">
            <summary>
            Invoked when <see cref="M:AVS.BaseVehicle.AvsVehicle.PlayerExit(AVS.VehicleParts.VehicleHatchDefinition,System.Boolean)" /> ends.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnPrePlayerEntry">
            <summary>
            Invoked when <see cref="M:AVS.BaseVehicle.AvsVehicle.PlayerEntry(AVS.VehicleParts.VehicleHatchDefinition)" /> starts.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnPlayerEntry">
            <summary>
            Invoked when <see cref="M:AVS.BaseVehicle.AvsVehicle.PlayerEntry(AVS.VehicleParts.VehicleHatchDefinition)" /> ends.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetMainHelm">
            <summary>
            Queries the main helm of the vehicle.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.EnterVehicle(Player,System.Boolean,System.Boolean)">
            <summary>
            Invoked when the player enters helm control.
            <see cref="F:Vehicle.playerPosition" /> is referenced by the base class implementation, so
            we do not forward the call when that field is null.
            </summary>
            <remarks>
            <see cref="F:Vehicle.playerPosition" /> is intentionally kept null while the player is not in control of the vehicle.
            Otherwise, clicking anywhere on the inside hull immediately causes the player to be teleported to
            and locked in the helm.
            </remarks>
            <param name="player">Player entering</param>
            <param name="teleport">If true, the player is localized to (0,0,0) after being reparented to the sub</param>
            <param name="playEnterAnimation">If true, the character enter animation is played</param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.BeginHelmControl(AVS.VehicleParts.Helm)">
            <summary>
            Enters the player into the sub, updates the quickbar and notifies the player of the piloting status.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.EndHelmControl(System.Single)">
            <summary>
            Stops the piloting of the current vehicle and resets the control state.
            </summary>
            <remarks>This method disengages the player from controlling a vehicle and resets any
            associated UI elements.  It also triggers a notification to update the player's status to reflect the end of
            piloting.
            This is not the primary entry point to exit helm control, but rather a utility method.
            Call <see cref="M:AVS.BaseVehicle.AvsVehicle.ExitHelmControl"/> /<see cref="M:AVS.BaseVehicle.AvsVehicle.DeselectSlots" /> to exit helm control and reset the quickbar.
            </remarks>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetClosestExitHatch">
            <summary>
            Finds the closest exit hatch to the player by comparing entry locations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetClosestEntryHatch">
            <summary>
            Finds the closest entry hatch to the player by comparing exit locations.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.ClosestPlayerEntry">
            <summary>
            Enters the vehicle through the hatch closest to the player's current location.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.RegisterPlayerEntry(System.Action)">
            <summary>
            Internal registration for when the player enters the vehicle
            or was detected as entering the vehicle.
            </summary>
            <param name="ifNotDockedAction">Code to execute if not docked </param>
            <remarks>Designed to handle edge-cases like the player entering
            the tether space of the vehicle via teleport</remarks>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.PlayerEntry(AVS.VehicleParts.VehicleHatchDefinition)">
            <summary>
            Enters the player through the given hatch.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.ClosestPlayerExit(System.Boolean)">
            <summary>
            Exits the vehicle through the hatch closest to the player's current location.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.PlayerExit(AVS.VehicleParts.VehicleHatchDefinition,System.Boolean)">
            <summary>
            Called when the player exits the vehicle.
            </summary>
        </member>
        <member name="F:AVS.BaseVehicle.AvsVehicle.lightsOffSound">
            <summary>
            Use <see cref="P:AVS.BaseVehicle.AvsVehicle.LightsOffSound"/> instead.
            </summary>
            <remarks> Prefabrication fields must remain open fields or
            Unity instantiation will not preserve them.
            Since the vehicle has multiple custom emitters, we cannot
            fetch it during Awake()</remarks>
        </member>
        <member name="F:AVS.BaseVehicle.AvsVehicle.lightsOnSound">
            <summary>
            Use <see cref="P:AVS.BaseVehicle.AvsVehicle.LightsOnSound"/> instead.
            </summary>
            <remarks> Prefabrication fields must remain open fields or
            Unity instantiation will not preserve them.
            Since the vehicle has multiple custom emitters, we cannot
            fetch it during Awake()</remarks>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.LightsOffSound">
            <summary>
            Sound to play when the vehicle lights are turned on.
            Set during prefabrication.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.LightsOnSound">
            <summary>
            Sound to play when the vehicle lights are turned off.
            Set during prefabrication.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.VolumetricLights">
            <summary>
            Populated during prefabrication/Awake().
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.HeadlightsController">
            <summary>
            The headlights controller for this vehicle.
            Set during Awake().
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.CreateDataBlocks(System.Action{AVS.SaveLoad.DataBlock})">
            <summary>
            Creates the save data container for this vehicle.
            </summary>
            <remarks>
            For consistency, the base method should be called LAST
            by any inherited class
            </remarks>
            <param name="addBlock">Action to register new blocks with</param>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.Constructed">
            <summary>
            The construction date of this vehicle.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetLoadedHelm">
            <summary>
            Gets the helm restored from the save data.
            If the derived vehicle does not have multiple helms,
            the default helm is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnDataLoaded">
            <summary>
            Executed when the data for this vehicle has been loaded.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.PrefabID">
            <summary>
            Fetches the prefab identifier of this vehicle.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnGameSaved">
            <summary>
            Executed when the local vehicle has finished saving.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnFinishedLoading">
            <summary>
            Executed last when everything has been loaded successfully and the
            scene was completely initialized.
            Everything loaded by the savegame now exists at its final location and state.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.MaterialFixer">
            <summary>
            The material fixer instance used for this vehicle.
            Ineffective if <see cref="P:AVS.Configuration.VehicleConfiguration.AutoFixMaterials"/> is false.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnUpgradeModuleToggle(System.Int32,System.Boolean)">
            <summary>
            Executed if a toggleable upgrade module is toggled on or off.
            </summary>
            <param name="slotID">Upgrade module slot</param>
            <param name="active">True if has been toggled on, false if off</param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnUpgradeModuleUse(TechType,System.Int32)">
            <summary>
            Executed when a usable upgrade module is used.
            </summary>
            <param name="techType">The tech type of the upgrade being used</param>
            <param name="slotID">Upgrade module slot</param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnUpgradeModuleChange(System.Int32,TechType,System.Boolean)">
            <summary>
            Executed when an upgrade module is added or removed.
            </summary>
            <param name="slotID">Slot index the module is added to or removed from</param>
            <param name="techType">Tech type of the module being added or removed</param>
            <param name="added">True if the module is added, false if removed</param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetSlotItem(System.Int32)">
            <summary>
            Gets the quick slot type of the given slot ID.
            </summary>
            <param name="slotID">Slot index with 0 being the first</param>
            <returns>Slotted inventory item or null</returns>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.DeselectSlots">
            <summary>
            Deselects quick-slots and exits piloting.
            Misnomer but since the base class has this method, we must override it.
            Invoked when you press the Exit button while having a "currentMountedVehicle."
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.slotIDs">
            <summary>
            The slotIds of the vehicle.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.NumEfficiencyModules">
            <summary>
            The number of installed power efficiency modules.
            Automatically updated when a power efficiency module is added or removed.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.UpgradeOnAddedActions">
            <summary>
            Actions to execute when an upgrade module is added or removed.
            The first argument is the slot ID,
            then the tech type of the module,
            finally a boolean indicating if the module is being added (true) or removed (false).
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.isScuttled">
            <summary>
            True if the vehicle is scuttled (destroyed and ready to be salvaged).
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.DestroyVehicle">
            <summary>
            Destroys the vehicle and executes the death action.
            </summary>
            <remarks>Calls <see cref="M:AVS.BaseVehicle.AvsVehicle.DeathAction" /> and <see cref="M:AVS.BaseVehicle.AvsVehicle.ScuttleVehicle" /></remarks>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.DeathAction">
            <summary>
            Executed when the vehicle is destroyed.
            This default behavior lets the vehicle slowly sink to the bottom of the ocean.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.ScuttleVehicle">
            <summary>
            Executed when the vehicle is destroyed.
            Sets this vehicle as ready to be salvaged.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.UnscuttleVehicle">
            <summary>
            Returns the vehicle to a non-scuttled state.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnSalvage">
            <summary>
            Executed when the vehicle is salvaged.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.SubConstructionComplete">
            <summary>
            Invoked via reflection by patches to notify the vehicle of a sub construction completion.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.SubConstructionBeginning">
            <summary>
            Invoked via reflection by patches to notify the vehicle of a sub construction beginning.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnCraftEnd(TechType)">
            <summary>
            Called via reflection once vehicle crafting is completed.
            </summary>
            <param name="techType">This vehicle's tech type</param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnRecipeOverride(AVS.Configuration.Recipe)">
            <summary>
            Overridable import method called when an imported recipe is loaded.
            </summary>
            <param name="recipe">Recipe restored from file</param>
            <returns>Recipe to use</returns>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.IsConstructed">
            <summary>
            True if the vehicle is constructed and ready to be piloted.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.PrefabSetupHudPing(PingType)">
            <summary>
            Constructs the vehicle's ping instance as part of the prefab setup.
            </summary>
            <param name="pingType"></param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnStorageOpen(System.String,System.Boolean)">
            <summary>
            Executed when the PDA storage is opened or closed.
            </summary>
            <param name="name">Name of the storage being opened or closed</param>
            <param name="open">True if the storage was opened, otherwise false</param>
            <returns>
            The number of seconds to wait before opening the PDF, to show off the cool animations
            </returns>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetOrCreateDefaultStorageRootObject">
            <summary>
            Gets or creates a storage root object named "StorageRootObject".
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetOrCreateDefaultModulesRootObject">
            <summary>
            Gets or creates a modules root object named "ModulesRootObject".
            </summary>
        </member>
        <member name="T:AVS.Composition.SkimmerComposition">
            <summary>
            Vehicle composition for skimmers, which are small, fast vehicles designed for surface travel.
            </summary>
        </member>
        <member name="P:AVS.Composition.SkimmerComposition.PilotSeats">
            <summary>
            The pilot seats of the vehicle.
            </summary>
        </member>
        <member name="M:AVS.Composition.SkimmerComposition.#ctor(UnityEngine.GameObject,UnityEngine.GameObject,System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleHatchDefinition},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.Helm},AVS.Engines.AbstractEngine,UnityEngine.GameObject,System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleBattery},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleUpgrades},UnityEngine.BoxCollider,System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleStorage},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleStorage},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleFloodLight},System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleBattery},System.Collections.Generic.IReadOnlyList{UnityEngine.Collider},System.Collections.Generic.IReadOnlyList{TMPro.TextMeshProUGUI},System.Collections.Generic.IReadOnlyList{UnityEngine.Transform},UnityEngine.GameObject)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.Composition.SkimmerComposition"/> class, representing the composition of a
            skimmer vehicle with its associated components and configuration.
            </summary>
            <remarks>This constructor initializes the skimmer vehicle with its various components,
            including storage, modules, hatches, pilot seats, and other optional features. The <paramref
            name="pilotSeats"/> parameter must not be null, and an empty collection will be used if no pilot seats are
            provided.</remarks>
            <param name="storageRootObject">The root <see cref="T:UnityEngine.GameObject"/> that serves as the parent for all storage-related components.</param>
            <param name="modulesRootObject">The root <see cref="T:UnityEngine.GameObject"/> that serves as the parent for all module-related components.</param>
            <param name="hatches">A collection of hatches (<see cref="T:AVS.VehicleParts.VehicleHatchDefinition"/>) that provide entry and exit points
            for the vehicle.</param>
            <param name="pilotSeats">A collection of pilot seats (<see cref="T:AVS.VehicleParts.Helm"/>) available in the vehicle. Cannot
            be null.</param>
            <param name="engine">The engine (<see cref="T:AVS.Engines.AbstractEngine"/>) that powers the vehicle. Must not be null</param>
            <param name="collisionModel"><see cref="T:UnityEngine.GameObject"/> representing the collision model of the vehicle. Must not be null</param>
            <param name="batteries">An optional collection of batteries (<see cref="T:AVS.VehicleParts.VehicleBattery"/>) used to power the vehicle.
            Can be null.</param>
            <param name="upgrades">An optional collection of upgrades (<see cref="T:AVS.VehicleParts.VehicleUpgrades"/>) installed on the vehicle.
            Can be null.</param>
            <param name="boundingBoxCollider">An optional <see cref="T:UnityEngine.BoxCollider"/> defining the bounding box of the vehicle. Can be null.</param>
            <param name="waterClipProxies">An optional collection of <see cref="T:UnityEngine.GameObject"/> proxies used for water clipping. Can be null.</param>
            <param name="innateStorages">An optional collection of innate storage components (<see cref="T:AVS.VehicleParts.VehicleStorage"/>) built into
            the vehicle. Can be null.</param>
            <param name="modularStorages">An optional collection of modular storage components (<see cref="T:AVS.VehicleParts.VehicleStorage"/>) that can be
            added to the vehicle. Can be null.</param>
            <param name="headLights">An optional collection of floodlights (<see cref="T:AVS.VehicleParts.VehicleFloodLight"/>) used as headlights for
            the vehicle. Can be null.</param>
            <param name="canopyWindows">An optional collection of <see cref="T:UnityEngine.GameObject"/> instances representing the canopy windows of the vehicle.
            Can be null.</param>
            <param name="backupBatteries">An optional collection of backup batteries (<see cref="T:AVS.VehicleParts.VehicleBattery"/>) for the vehicle. Can
            be null.</param>
            <param name="denyBuildingColliders">An optional collection of <see cref="T:UnityEngine.Collider"/> instances that prevent building in certain areas. Can be
            null.</param>
            <param name="subNameDecals">An optional collection of <see cref="T:TMPro.TextMeshProUGUI"/> decals used to display the vehicle's name. Can
            be null.</param>
            <param name="lavaLarvaAttachPoints">An optional collection of <see cref="T:UnityEngine.Transform"/> points where lava larvae can attach. Can be null.</param>
            <param name="leviathanGrabPoint">An optional <see cref="T:UnityEngine.GameObject"/> representing the grab point for leviathans. Can be null.</param>
        </member>
        <member name="T:AVS.Composition.SubmarineComposition">
            <summary>
            Represents the composition of a submarine vehicle, including all relevant objects, lights, seats, and optional components.
            Inherits from <see cref="T:AVS.Composition.VehicleComposition"/> and adds submarine-specific parts such as tethers, pilot seats, navigation lights, and more.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.TetherSources">
            <summary>
            The list of active tethers in the submarine.
            Each tether is an object with attached SphereCollider,
            no renderers or rigidbodies,
            and scale set to 1, 1, 1.
            As long as a player is within the radius of at least one tether,
            they will be considered to be inside the submarine.
            Must not be empty.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.Helms">
            <summary>
            The list of helm stations in the submarine.
            Each helm allows a player to pilot the submarine.
            Must not be empty.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.FloodLights">
            <summary>
            Optional flood light definitions.
            If non-empty, these lights will be controlled using the control panel, if installed.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.InteriorLights">
            <summary>
            Optional interior light definitions.
            If non-empty, these lights will be controlled using the control panel, if installed.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.NavigationPortLights">
            <summary>
            External navigation lights located on the port side of the submarine.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.NavigationStarboardLights">
            <summary>
            External navigation lights located on the starboard side of the submarine.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.NavigationPositionLights">
            <summary>
            External position navigation lights.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.NavigationWhiteStrobeLights">
            <summary>
            White strobe lights that also emit light.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.NavigationRedStrobeLights">
            <summary>
            Red strobe lights that also emit light.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.ControlPanel">
            <summary>
            Optional parent game object for the flood light control panel.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.Fabricator">
            <summary>
            Optional pre-install fabricator parent game object.
            If not null, a fabricator will be automatically created as child of this game object.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.ColorPicker">
            <summary>
            Optional color picker console game object to construct necessary components in.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.RespawnPoint">
            <summary>
            Optional respawn point in case the character dies.
            If null, a respawn point will automatically be created in the vehicle's root object.
            </summary>
        </member>
        <member name="M:AVS.Composition.SubmarineComposition.#ctor(UnityEngine.GameObject,UnityEngine.GameObject,System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.Helm},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleHatchDefinition},AVS.Engines.AbstractEngine,UnityEngine.GameObject,System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleFloodLight},System.Collections.Generic.IReadOnlyList{UnityEngine.Light},System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},UnityEngine.GameObject,UnityEngine.GameObject,UnityEngine.GameObject,UnityEngine.GameObject,System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleBattery},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleUpgrades},UnityEngine.BoxCollider,System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleStorage},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleStorage},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleFloodLight},System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleBattery},System.Collections.Generic.IReadOnlyList{UnityEngine.Collider},System.Collections.Generic.IReadOnlyList{TMPro.TextMeshProUGUI},System.Collections.Generic.IReadOnlyList{UnityEngine.Transform},UnityEngine.GameObject)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.Composition.SubmarineComposition"/> class with the specified components and configuration.
            </summary>
            <param name="storageRootObject">The parent object for all storage objects. Must not be null and not the same as vehicle object.</param>
            <param name="modulesRootObject">The parent object for all modules. Must not be null and not the same as vehicle object.</param>
            <param name="tetherSources">The list of active tethers in the submarine. Must not be null or empty.</param>
            <param name="helms">The list of helm stations in the submarine. Must not be null or empty.</param>
            <param name="hatches">Entry/exit hatches for the submarine. Must not be null or empty.</param>
            <param name="floodLights">Optional flood light definitions. If non-empty, these lights will be controlled using the control panel, if installed.</param>
            <param name="interiorLights">Optional interior light definitions. If non-empty, these lights will be controlled using the control panel, if installed.</param>
            <param name="navigationPortLights">External navigation lights located on the port side of the submarine.</param>
            <param name="navigationStarboardLights">External navigation lights located on the starboard side of the submarine.</param>
            <param name="navigationPositionLights">External position navigation lights.</param>
            <param name="navigationWhiteStrobeLights">White strobe lights that also emit light.</param>
            <param name="navigationRedStrobeLights">Red strobe lights that also emit light.</param>
            <param name="controlPanel">Optional parent game object for the flood light control panel.</param>
            <param name="fabricator">Optional pre-install fabricator parent game object. If not null, a fabricator will be automatically created as child of this game object.</param>
            <param name="colorPicker">Optional color picker console game object to construct necessary components in.</param>
            <param name="respawnPoint">Optional respawn point in case the character dies. If null, a respawn point will automatically be created in the vehicle's root object.</param>
            <param name="collisionModel">Object containing all colliders. Must not be null. Should not be the same as the vehicle object.</param>
            <param name="batteries">Battery definitions. Optional.</param>
            <param name="upgrades">Upgrade module definitions. Optional.</param>
            <param name="boundingBoxCollider">Single box collider for the vehicle. Can be null.</param>
            <param name="waterClipProxies">Water clip proxies. Optional.</param>
            <param name="innateStorages">Innate storages. Optional.</param>
            <param name="modularStorages">Modular storages. Optional.</param>
            <param name="headLights">Headlights. Optional.</param>
            <param name="canopyWindows">Canopy windows. Optional.</param>
            <param name="backupBatteries">Backup batteries. Optional.</param>
            <param name="denyBuildingColliders">Deny building colliders. Optional.</param>
            <param name="subNameDecals">Sub name decals. Optional.</param>
            <param name="lavaLarvaAttachPoints">Lava larva attach points. Optional.</param>
            <param name="leviathanGrabPoint">Leviathan grab point. Optional.</param>
            <param name="engine">The engine that powers the vehicle. Must not be null.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="tetherSources"/> or <paramref name="helms"/> is null or empty.</exception>
        </member>
        <member name="P:AVS.Composition.SubmersibleComposition.PilotSeat">
            <summary>
            The pilot seat of the vehicle.
            Must not be null.
            </summary>
        </member>
        <member name="M:AVS.Composition.SubmersibleComposition.#ctor(AVS.VehicleParts.Helm,UnityEngine.GameObject,UnityEngine.GameObject,System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleHatchDefinition},AVS.Engines.AbstractEngine,UnityEngine.GameObject,System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleBattery},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleUpgrades},UnityEngine.BoxCollider,System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleStorage},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleStorage},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleFloodLight},System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleBattery},System.Collections.Generic.IReadOnlyList{UnityEngine.Collider},System.Collections.Generic.IReadOnlyList{TMPro.TextMeshProUGUI},System.Collections.Generic.IReadOnlyList{UnityEngine.Transform},UnityEngine.GameObject)">
            <summary>
            Represents the composition of a submersible vehicle, including all required and optional parts.
            Inherits from <see cref="T:AVS.Composition.VehicleComposition"/> and adds a required pilot seat.
            </summary>
            <param name="pilotSeat">
            The pilot seat of the vehicle. Must not be null and must have a non-null <c>Seat</c> property.
            </param>
            <param name="storageRootObject">
            The parent object for all storage objects. Must not be null and not the same as the vehicle object.
            </param>
            <param name="modulesRootObject">
            The parent object for all modules. Must not be null and not the same as the vehicle object.
            </param>
            <param name="hatches">
            Entry/exit hatches for the submarine. Must not be null or empty.
            </param>
            <param name="collisionModel">
            Object containing all colliders. Must not be null. Should not be the same as the vehicle object.
            </param>
            <param name="batteries">
            Battery definitions. Optional. Can be null or empty.
            </param>
            <param name="upgrades">
            Upgrade module definitions. Optional. Can be null or empty.
            </param>
            <param name="boundingBoxCollider">
            Single box collider for the vehicle. Can be null.
            </param>
            <param name="waterClipProxies">
            Water clip proxies. Optional. Can be null or empty.
            </param>
            <param name="innateStorages">
            Storages that the vehicle always has. Optional. Can be null or empty.
            </param>
            <param name="modularStorages">
            Storages that can be added to the vehicle by the player. Optional. Can be null or empty.
            </param>
            <param name="headLights">
            Collection and configuration of headlights. Optional. Can be null or empty.
            </param>
            <param name="canopyWindows">
            Window objects automatically hidden when the vehicle is being piloted. Optional. Can be null or empty.
            </param>
            <param name="backupBatteries">
            Batteries exclusively used for the AI. Optional. Can be null or empty.
            </param>
            <param name="denyBuildingColliders">
            Colliders within which building is not permitted. Optional. Can be null or empty.
            </param>
            <param name="subNameDecals">
            Text output objects containing the vehicle name decals. Optional. Can be null or empty.
            </param>
            <param name="lavaLarvaAttachPoints">
            Attach points for Lava Larvae. Optional. Can be null or empty.
            </param>
            <param name="leviathanGrabPoint">
            Leviathan grab point. Optional.
            </param>
            <param name="engine">The engine that powers the vehicle. Must not be null.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="pilotSeat"/> is null or if <c>PilotSeat.Seat</c> is null.
            </exception>
        </member>
        <member name="T:AVS.Composition.VehicleComposition">
            <summary>
            Objects, transforms, and components as identified by the derived mod vehicle.
            GameObjects, Transforms, and Components are expected to be contained by the vehicle
            or its children.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.StorageRootObject">
            <summary>
            The parent object for all storage objects.
            Must not be null. Must be different from the vehicle game object.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.ModulesRootObject">
            <summary>
            The parent object for all modules.
            Must not be null. Must be different from the vehicle game object.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.CollisionModel">
            <summary>
            Base object containing colliders (and nothing else).
            AVS can do without but the Subnautica system uses this object to switch off colliders while docked.
            Therefore, this value must be set, even if the referenced game object contains nothing.
            Should not be the vehicle root as this would disable everything.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.Hatches">
            <summary>
            Entry/exit hatches for the submarine.
            Required not empty
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.Batteries">
            <summary>
            Battery definitions. Can be empty which disallows any batteries.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.Upgrades">
            <summary>
            Upgrade module definitions. Can be empty which disallows any upgrades.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.BoundingBoxCollider">
            <summary>
            Single box collider that contains the entire vehicle.
            While the code can handle this not being set, it really should be set.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.WaterClipProxies">
            <summary>
            Empty game objects that each define a box that clips the water surface.
            These objects must not contain any components (renderers or otherwise).
            The position identifies their center, the size their extents.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.InnateStorages">
            <summary>
            Storages that the vehicle always has.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.ModularStorages">
            <summary>
            Storages that can be added to the vehicle by the player.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.HeadLights">
            <summary>
            Collection and configuration of headlights, to be rendered volumetrically while the player is outside the vehicle.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.CanopyWindows">
            <summary>
            Window objects automatically hidden when the vehicle is being piloted as to avoid reflections.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.BackupBatteries">
            <summary>
            Batteries exclusively used for the AI. Not sure anyone uses these.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.DenyBuildingColliders">
            <summary>
            Base object building is not permitted within these colliders.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.SubNameDecals">
            <summary>
            Text output objects containing the vehicle name decals.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.LavaLarvaAttachPoints">
            <summary>
            Contains the attach points for the Lava Larvae (to suck away energy).
            If empty, the vehicle will not be attacked by Lava Larvae.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.LeviathanGrabPoint">
            <summary>
            Leviathan grab point, used by the Leviathan to grab the vehicle.
            If empty, the vehicle's own object is used as the grab point.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.Engine">
            <summary>
            The engine that powers the vehicle. Must not be null.
            </summary>
            <remarks>
            The engine must be instantiated and attached during or before querying the vehicle's
            composition.
            As such, it is the only part that is not just derived from the model but rather newly
            created on demand.
            It is contained here because the mod vehicle requires it and it must be custom defined
            by the client vehicle.
            </remarks>
        </member>
        <member name="M:AVS.Composition.VehicleComposition.#ctor(UnityEngine.GameObject,UnityEngine.GameObject,System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleHatchDefinition},AVS.Engines.AbstractEngine,UnityEngine.GameObject,System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleBattery},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleUpgrades},UnityEngine.BoxCollider,System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleStorage},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleStorage},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleFloodLight},System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{AVS.VehicleParts.VehicleBattery},System.Collections.Generic.IReadOnlyList{UnityEngine.Collider},System.Collections.Generic.IReadOnlyList{TMPro.TextMeshProUGUI},System.Collections.Generic.IReadOnlyList{UnityEngine.Transform},UnityEngine.GameObject)">
            <summary>
            Constructs a VehicleComposition with required and optional parts.
            </summary>
            <param name="storageRootObject">The parent object for all storage objects. Must not be null and not the same as vehicle object.</param>
            <param name="modulesRootObject">The parent object for all modules. Must not be null and not the same as vehicle object.</param>
            <param name="collisionModel">Base object containing all colliders. Can be null.</param>
            <param name="hatches">Entry/exit hatches. Must not be null or empty.</param>
            <param name="batteries">Battery definitions. Optional.</param>
            <param name="upgrades">Upgrade module definitions. Optional.</param>
            <param name="boundingBoxCollider">Single box collider for the vehicle. Can be null.</param>
            <param name="waterClipProxies">Water clip proxies. Optional.</param>
            <param name="innateStorages">Innate storages. Optional.</param>
            <param name="modularStorages">Modular storages. Optional.</param>
            <param name="headLights">Headlights. Optional.</param>
            <param name="canopyWindows">Canopy windows. Optional.</param>
            <param name="backupBatteries">Backup batteries. Optional.</param>
            <param name="denyBuildingColliders">Deny building colliders. Optional.</param>
            <param name="subNameDecals">Sub name decals. Optional.</param>
            <param name="lavaLarvaAttachPoints">Lava larva attach points. Optional.</param>
            <param name="leviathanGrabPoint">Leviathan grab point. Optional.</param>
            <param name="engine">The engine that powers the vehicle. Must not be null.</param>
        </member>
        <member name="T:AVS.Configuration.RecipeIngredient">
            <summary>
            Ingredient of a recipe, including its type and quantity.
            </summary>
        </member>
        <member name="P:AVS.Configuration.RecipeIngredient.Type">
            <summary>
            Type of the ingredient.
            </summary>
        </member>
        <member name="P:AVS.Configuration.RecipeIngredient.Amount">
            <summary>
            Amount of the ingredient required for the recipe.
            </summary>
        </member>
        <member name="M:AVS.Configuration.RecipeIngredient.#ctor(TechType,System.Int32)">
            <summary>
            Constructs an ingredient
            </summary>
            <param name="type">The type of the ingredient, represented as a <see cref="T:TechType"/>.</param>
            <param name="amount">The quantity of the ingredient required. Must be a positive, non-zero integer.</param>
        </member>
        <member name="M:AVS.Configuration.RecipeIngredient.ToIngredient">
            <summary>
            Converts this ingredient to a <see cref="T:CraftData.Ingredient"/>.
            </summary>
            <returns>Converted ingredient</returns>
        </member>
        <member name="T:AVS.Configuration.NewRecipe">
            <summary>
            Sequential builder for a <see cref="T:AVS.Configuration.Recipe"/>.
            </summary>
        </member>
        <member name="M:AVS.Configuration.NewRecipe.WithNothing">
            <summary>
            Creates a new instance of the <see cref="T:AVS.Configuration.NewRecipe"/> class with no ingredients.
            </summary>
            <returns>A new <see cref="T:AVS.Configuration.NewRecipe"/> instance.</returns>
        </member>
        <member name="M:AVS.Configuration.NewRecipe.StartWith(AVS.Configuration.Recipe)">
            <summary>
            Creates a new <see cref="T:AVS.Configuration.NewRecipe"/> instance from the specified <see cref="T:AVS.Configuration.Recipe"/>.
            </summary>
            <param name="recipe">The source <see cref="T:AVS.Configuration.Recipe"/> to convert. Must not be <see langword="null"/>.</param>
            <returns>A new <see cref="T:AVS.Configuration.NewRecipe"/> instance containing the ingredients from the specified <see cref="T:AVS.Configuration.Recipe"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="recipe"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:AVS.Configuration.NewRecipe.StartWith(TechType,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:AVS.Configuration.NewRecipe"/> class with an initial ingredient.
            </summary>
            <param name="type">The type of the ingredient to add to the recipe.</param>
            <param name="amount">The quantity of the ingredient to add. Must be a positive integer.</param>
            <returns>A new <see cref="T:AVS.Configuration.NewRecipe"/> instance containing the specified ingredient.</returns>
        </member>
        <member name="M:AVS.Configuration.NewRecipe.StartWith(System.ValueTuple{TechType,System.Int32})">
            <summary>
            Creates a new instance of <see cref="T:AVS.Configuration.NewRecipe"/> with the specified ingredient.
            </summary>
            <param name="ingredient">A tuple containing the ingredient's <see cref="T:TechType"/> and the amount to be added. The <see
            cref="T:TechType"/> specifies the type of the ingredient, and the amount must be a positive integer.</param>
            <returns>A new <see cref="T:AVS.Configuration.NewRecipe"/> instance with the specified ingredient added.</returns>
        </member>
        <member name="M:AVS.Configuration.NewRecipe.Include(System.Collections.Generic.IEnumerable{AVS.Configuration.RecipeIngredient})">
            <summary>
            Adds the ingredients from the specified <see cref="T:AVS.Configuration.Recipe"/> to the current recipe.
            </summary>
            <param name="recipe">Recipe to add ingredients of</param>
            <returns>this</returns>
        </member>
        <member name="M:AVS.Configuration.NewRecipe.Include(AVS.Configuration.NewRecipe)">
            <summary>
            Combines the current recipe with another recipe by merging their ingredients.
            </summary>
            <param name="other">The recipe to combine with the current recipe. Must not be <see langword="null"/>.</param>
            <returns>A new <see cref="T:AVS.Configuration.NewRecipe"/> instance containing the combined ingredients of both recipes.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:AVS.Configuration.NewRecipe.IncludeOneOfEach(System.Collections.Generic.IEnumerable{TechType})">
            <summary>
            Adds one unit of each specified <see cref="T:TechType"/> to the recipe.
            </summary>
            <param name="types">A collection of <see cref="T:TechType"/> values to add to the recipe. Any <see cref="F:TechType.None"/> values
            in the collection are ignored.</param>
            <returns>The updated <see cref="T:AVS.Configuration.NewRecipe"/> instance, allowing for method chaining.</returns>
        </member>
        <member name="M:AVS.Configuration.NewRecipe.Include(TechType,System.Int32)">
            <summary>
            Adds a specified ingredient and its quantity to the recipe.
            </summary>
            <remarks>If <paramref name="type"/> is <see cref="F:TechType.None"/> or <paramref
            name="amount"/> is less than or equal to zero,  the method does nothing and returns the current
            instance.</remarks>
            <param name="type">The type of ingredient to add. Must not be <see cref="F:TechType.None"/>.</param>
            <param name="amount">The quantity of the ingredient to add. Must be greater than zero.</param>
            <returns>The current <see cref="T:AVS.Configuration.NewRecipe"/> instance, allowing for method chaining.</returns>
        </member>
        <member name="M:AVS.Configuration.NewRecipe.And(System.ValueTuple{TechType,System.Int32})">
            <summary>
            Adds an ingredient to the recipe with the specified type and amount.
            </summary>
            <param name="ingredient">A tuple containing the type of the ingredient and the amount to add.  <paramref name="ingredient.Type.Type"/>
            specifies the ingredient type, and  <paramref name="ingredient.Amount.Amount"/> specifies the quantity to add.</param>
            <returns>The current <see cref="T:AVS.Configuration.NewRecipe"/> instance, allowing for method chaining.</returns>
        </member>
        <member name="M:AVS.Configuration.NewRecipe.Include(AVS.Configuration.RecipeIngredient)">
            <summary>
            Adds the specified ingredient to the recipe.
            </summary>
            <param name="ingredient">The ingredient to add, including its type and amount.</param>
            <returns>A <see cref="T:AVS.Configuration.NewRecipe"/> instance with the ingredient added, allowing for method chaining.</returns>
        </member>
        <member name="M:AVS.Configuration.NewRecipe.op_Addition(AVS.Configuration.NewRecipe,AVS.Configuration.RecipeIngredient)">
            <summary>
            Adds a <see cref="T:AVS.Configuration.RecipeIngredient"/> to the <see cref="T:AVS.Configuration.NewRecipe"/> and returns the updated builder.
            </summary>
            <param name="builder">The <see cref="T:AVS.Configuration.NewRecipe"/> to which the ingredient will be added.</param>
            <param name="ingredient">The <see cref="T:AVS.Configuration.RecipeIngredient"/> to add to the builder.</param>
            <returns>The updated <see cref="T:AVS.Configuration.NewRecipe"/> instance with the added ingredient.</returns>
        </member>
        <member name="M:AVS.Configuration.NewRecipe.op_Addition(AVS.Configuration.NewRecipe,System.ValueTuple{TechType,System.Int32})">
            <summary>
            Adds an ingredient to the recipe using the specified <see cref="T:TechType"/> and amount.
            </summary>
            <remarks>This operator provides a convenient way to add ingredients to a recipe by using the
            <c>+</c> operator.</remarks>
            <param name="builder">The <see cref="T:AVS.Configuration.NewRecipe"/> instance to which the ingredient will be added.</param>
            <param name="ingredient">A tuple containing the <see cref="T:TechType"/> of the ingredient and the amount to add. The first item
            represents the type of the ingredient, and the second item represents the quantity.</param>
            <returns>A new <see cref="T:AVS.Configuration.NewRecipe"/> instance with the specified ingredient added.</returns>
        </member>
        <member name="M:AVS.Configuration.NewRecipe.Done">
            <summary>
            Constructs a new <see cref="T:AVS.Configuration.Recipe"/> instance using the specified ingredients.
            </summary>
            <returns>A <see cref="T:AVS.Configuration.Recipe"/> object containing the provided ingredients.</returns>
        </member>
        <member name="T:AVS.Configuration.Recipe">
            <summary>
            Readonly vehicle construction recipe.
            </summary>
        </member>
        <member name="P:AVS.Configuration.Recipe.Example">
            <summary>
            Gets an example recipe that demonstrates the required ingredients for crafting.
            </summary>
        </member>
        <member name="P:AVS.Configuration.Recipe.Empty">
            <summary>
            Gets an empty recipe with no ingredients.
            </summary>
        </member>
        <member name="M:AVS.Configuration.Recipe.Import(Nautilus.Crafting.RecipeData,AVS.Configuration.Recipe)">
            <summary>
            Converts a <see cref="T:Nautilus.Crafting.RecipeData"/> to a <see cref="T:AVS.Configuration.Recipe"/>.
            </summary>
            <param name="recipeData">Data to import</param>
            <param name="fallback">Fallback recipe to return in case of invalid data</param>
            <returns>Imported data</returns>
        </member>
        <member name="M:AVS.Configuration.Recipe.#ctor(System.Collections.Generic.IEnumerable{AVS.Configuration.RecipeIngredient})">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.Configuration.Recipe"/> class with the specified ingredients.
            </summary>
            <remarks>If multiple ingredients of the same type are provided, the last one in the collection
            will overwrite the previous entries in the internal dictionary.</remarks>
            <param name="ingredients">A collection of <see cref="T:AVS.Configuration.RecipeIngredient"/> objects representing the ingredients and their amounts. Each
            ingredient's type will be used as a key in the internal dictionary.</param>
        </member>
        <member name="P:AVS.Configuration.Recipe.IsEmpty">
            <summary>
            Gets a value indicating whether the collection of ingredients is empty.
            </summary>
        </member>
        <member name="M:AVS.Configuration.Recipe.ToRecipeData">
            <summary>
            Converts the current object to a <see cref="T:Nautilus.Crafting.RecipeData"/> instance.
            </summary>
            <remarks>The method creates a new <see cref="T:Nautilus.Crafting.RecipeData"/> object and populates its
            ingredients list based on the current object's <c>IngredientsDictionary</c>. Each entry in the dictionary is
            transformed into a <see cref="T:CraftData.Ingredient"/> and added to the resulting recipe.</remarks>
            <returns>A <see cref="T:Nautilus.Crafting.RecipeData"/> instance containing the ingredients from the current object's
            <c>IngredientsDictionary</c>.</returns>
        </member>
        <member name="M:AVS.Configuration.Recipe.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AVS.Configuration.Recipe.CheckValidity(System.String)">
            <summary>
            Checks if the recipe is valid for vehicle registration.
            </summary>
            <param name="vehicleName"></param>
            <returns></returns>
        </member>
        <member name="M:AVS.Configuration.Recipe.Equals(AVS.Configuration.Recipe)">
            <inheritdoc />
        </member>
        <member name="M:AVS.Configuration.Recipe.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AVS.Configuration.Recipe.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AVS.Configuration.Recipe.op_Equality(AVS.Configuration.Recipe,AVS.Configuration.Recipe)">
            <inheritdoc />
        </member>
        <member name="M:AVS.Configuration.Recipe.op_Inequality(AVS.Configuration.Recipe,AVS.Configuration.Recipe)">
            <inheritdoc />
        </member>
        <member name="M:AVS.Configuration.Recipe.ToString">
            <inheritdoc />
        </member>
        <member name="T:AVS.Configuration.VehicleConfiguration">
            <summary>
            Read-only vehicle configuration
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.PingSprite">
            <summary>
            Sprite to show when the camera is sufficiently far away while the vehicle is not boarded.
            Also used on the map, if used.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.SaveFileSprite">
            <summary>
            Sprite to attach to the save file in the preview.
            Should be very abstract, ideally just an outline.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.Recipe">
            <summary>
            Construction recipe.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.AllowRecipeOverride">
            <summary>
            If true, the recipe can be overridden by a JSON file created in the "recipes" folder.
            If so, the imported recipe is passed to <see cref="M:AVS.BaseVehicle.AvsVehicle.OnRecipeOverride(AVS.Configuration.Recipe)"/> before being applied.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.UnlockedSprite">
            <summary>
            Optional sprite that shows in the popup when the tech type of this vehicle is unlocked
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.Description">
            <summary>
            Localized description of the vehicle.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.EncyclopediaEntry">
            <summary>
            Localized encyclopedia entry for this vehicle.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.EncyclopediaImage">
            <summary>
            Image to show in the encyclopedia entry, if any.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.CraftingSprite">
            <summary>
            The sprite to show in the crafting menu of the mobile vehicle bay.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.ModuleBackgroundImage">
            <summary>
            The image to show in the background of the vehicle's module menu.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.UnlockedWith">
            <summary>
            Type that, if unlocked, also automatically unlocks this vehicle for crafting.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.MaxHealth">
            <summary>
            Maximum health of the vehicle.
            100 is very low.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.CrushDamage">
            <summary>
            Absolute damage dealt to the vehicle when it decended below its crush depth.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.GhostAdultBiteDamage">
            <summary>
            Absolute damage dealt to the vehicle when it is bit by a adult ghost leviathan.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.GhostJuvenileBiteDamage">
            <summary>
            Absolute damage dealt to the vehicle when it is bit by a juvenile ghost leviathan.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.ReaperBiteDamage">
            <summary>
            Absolute damage dealt to the vehicle when it is bit by a reaper leviathan.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.Mass">
            <summary>
            Physical mass of the vehicle. Must be greater than 0.
            For reference,
            Cyclop: 12000
            Abyss: 5000
            Atrama: 4250
            Odyssey: 3500
            Prawn: 1250
            Seamoth: 800
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.NumModules">
            <summary>
            Maximum number of modules that can be installed on this vehicle.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.UnlockedMessage">
            <summary>
            PDA message shown when the vehicle is unlocked.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.BaseCrushDepth">
            <summary>
            Gets the base crush depth of the vehicle, measured in meters.
            If it decends below this depth and there are up upgrades installed, it will take damage.
            Must be greater than 0.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.CrushDepthUpgrade1">
            <summary>
            Crush depth increase if a level 1 depth upgrade is installed.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.CrushDepthUpgrade2">
            <summary>
            Crush depth increase if a level 2 depth upgrade is installed.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.CrushDepthUpgrade3">
            <summary>
            Crush depth increase if a level 3 depth upgrade is installed.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.CrushDamageFrequency">
            <summary>
            Number of times per second the vehicle will take damage when below its crush depth.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.PilotingStyle">
            <summary>
            The piloting style of the vehicle. Affects player animations.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.TimeToConstruct">
            <summary>
            The number of seconds it takes to construct the vehicle in the mobile vehicle bay.
            Reference times: Seamoth : 10 seconds, Cyclops : 20, Rocket Base : 25
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.ConstructionGhostColor">
            <summary>
            Gets the color used for rendering construction ghost objects.
            Applied only if not black.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.ConstructionWireframeColor">
            <summary>
            Gets the color used for rendering construction wireframes.
            Applied only if not black.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.CanLeviathanGrab">
            <summary>
            True if the vehicle can be grabbed by a leviathan.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.CanMoonpoolDock">
            <summary>
            True if the vehicle can be docked in a moonpool.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.CyclopsDockRotation">
            <summary>
            Rotation applied when docking the vehicle in a cyclops.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.AutoFixMaterials">
            <summary>
            True to automatically correct shaders of the vehicle's materials.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.MaterialAdaptConfig">
            <summary>
            Material adaptation configuration. If not provided, initialized with a new instance of <see cref="T:AVS.MaterialAdapt.DefaultMaterialAdaptConfig" />.
            Effective only if <see cref="P:AVS.Configuration.VehicleConfiguration.AutoFixMaterials"/> is true.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.InitialBaseColor">
            <summary>
            The initial base color of the vehicle.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.InitialStripeColor">
            <summary>
            The initial stripe color of the vehicle.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.InitialInteriorColor">
            <summary>
            The initial interior color of the vehicle.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.InitialNameColor">
            <summary>
            The initial name color of the vehicle.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.GetVoiceSoundVolume">
            <summary>
            Gets the current setting regarding sound volume for voice messages sent by the vehicle's <see cref="T:AVS.VoiceQueue"/> component,
            further modified by Subnautica's global voice and master sound volumes.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.GetVoiceSubtitlesEnabled">
            <summary>
            Gets the current setting whether to show subtitles for voice messages sent by the vehicle's <see cref="T:AVS.VoiceQueue"/> component.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.HudTemperatureIsFahrenheit">
            <summary>
            True if the HUD temperature display is in Fahrenheit.
            </summary>
        </member>
        <member name="M:AVS.Configuration.VehicleConfiguration.#ctor(Atlas.Sprite,UnityEngine.Sprite,UnityEngine.Sprite,UnityEngine.Sprite,Atlas.Sprite,System.Nullable{AVS.VehicleComponents.VehicleColor},System.Nullable{AVS.VehicleComponents.VehicleColor},System.Nullable{AVS.VehicleComponents.VehicleColor},System.Nullable{AVS.VehicleComponents.VehicleColor},AVS.MaterialAdapt.IMaterialAdaptConfig,AVS.Configuration.Recipe,System.Boolean,System.String,System.String,UnityEngine.Sprite,TechType,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,AVS.BaseVehicle.AvsVehicle.PilotingStyle,System.Single,System.Nullable{UnityEngine.Color},System.Nullable{UnityEngine.Color},System.Boolean,System.Boolean,System.Nullable{UnityEngine.Quaternion},System.Boolean,System.Func{System.Single},System.Func{System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.Configuration.VehicleConfiguration"/> class with the specified parameters.
            </summary>
            <param name="pingSprite">Sprite to show when the camera is sufficiently far away. Also used on the map, if used.</param>
            <param name="saveFileSprite">Sprite to attach to the save file in the preview. Should be very abstract, ideally just an outline.</param>
            <param name="recipe">Construction recipe. If null, uses <see cref="P:AVS.Configuration.Recipe.Example"/>.</param>
            <param name="allowRecipeOverride">If true, the recipe can be overridden by a JSON file created in the "recipes" folder.</param>
            <param name="unlockedSprite">Sprite shown when the vehicle is unlocked.</param>
            <param name="description">Localized description of the vehicle.</param>
            <param name="encyclopediaEntry">Localized encyclopedia entry for this vehicle.</param>
            <param name="encyclopediaImage">Image to show in the encyclopedia entry, if any.</param>
            <param name="craftingSprite">The sprite to show in the crafting menu of the mobile vehicle bay.</param>
            <param name="moduleBackgroundImage">The image to show in the background of the vehicle's module menu.</param>
            <param name="unlockedWith">Type that, if unlocked, also automatically unlocks this vehicle for crafting.</param>
            <param name="maxHealth">Maximum health of the vehicle. Must be greater than 0.</param>
            <param name="crushDamage">Absolute damage dealt to the vehicle when it descends below its crush depth.</param>
            <param name="ghostAdultBiteDamage">Absolute damage dealt to the vehicle when it is bit by an adult ghost leviathan.</param>
            <param name="ghostJuvenileBiteDamage">Absolute damage dealt to the vehicle when it is bit by a juvenile ghost leviathan.</param>
            <param name="reaperBiteDamage">Absolute damage dealt to the vehicle when it is bit by a reaper leviathan.</param>
            <param name="mass">Physical mass of the vehicle. Must be greater than 0.
            For reference,
            Cyclop: 12000
            Abyss: 5000
            Atrama: 4250
            Odyssey: 3500
            Prawn: 1250
            Seamoth: 800
            </param>
            <param name="numModules">Maximum number of modules that can be installed on this vehicle.</param>
            <param name="unlockedMessage">PDA message shown when the vehicle is unlocked.</param>
            <param name="baseCrushDepth">Base crush depth of the vehicle, measured in meters. Must be greater than 0.</param>
            <param name="crushDepthUpgrade1">Crush depth increase if a level 1 depth upgrade is installed.</param>
            <param name="crushDepthUpgrade2">Crush depth increase if a level 2 depth upgrade is installed.</param>
            <param name="crushDepthUpgrade3">Crush depth increase if a level 3 depth upgrade is installed.</param>
            <param name="crushDamageFrequency">Number of times per second the vehicle will take damage when below its crush depth.</param>
            <param name="pilotingStyle">The piloting style of the vehicle. Affects player animations.</param>
            <param name="timeToConstruct">The number of seconds it takes to construct the vehicle in the mobile vehicle bay.</param>
            <param name="constructionGhostColor">Color used for rendering construction ghost objects. Applied only if not black.</param>
            <param name="constructionWireframeColor">Color used for rendering construction wireframes. Applied only if not black.</param>
            <param name="canLeviathanGrab">True if the vehicle can be grabbed by a leviathan.</param>
            <param name="canMoonpoolDock">True if the vehicle can be docked in a moonpool.</param>
            <param name="cyclopsDockRotation">Rotation applied when docking the vehicle in a cyclops.</param>
            <param name="autoFixMaterials">True to automatically correct shaders to the vehicle's materials.</param>
            <param name="initialBaseColor">Initial base color of the vehicle. If null, defaults to <see cref="P:AVS.VehicleComponents.VehicleColor.Default"/>.</param>
            <param name="initialStripeColor">Initial stripe color of the vehicle. If null, defaults to <see cref="P:AVS.VehicleComponents.VehicleColor.Default"/>.</param>
            <param name="initialInteriorColor">Initial interior color of the vehicle. If null, defaults to <see cref="P:AVS.VehicleComponents.VehicleColor.Default"/>.</param>
            <param name="initialNameColor">Initial name color of the vehicle. If null, defaults to <see cref="P:AVS.VehicleComponents.VehicleColor.Default"/>.</param>
            <param name="getVoiceSoundVolume">Query function to get the sound volume for voice messages sent by the vehicle's <see cref="T:AVS.VoiceQueue"/> component. If null, defaults to always 1</param>
            <param name="getVoiceSubtitlesEnabled">Query function to get whether to show subtitles for voice messages sent by the vehicle's <see cref="T:AVS.VoiceQueue"/> component. If null, defaults to always false</param>
            <param name="materialAdaptConfig">Optional configuration for material adaptation</param>
            <param name="hudTemperatureIsFahrenheit">True if the HUD temperature display is in Fahrenheit.</param>
        </member>
        <member name="T:AVS.ControlPanel">
            <summary>
            Represents the control panel for a submarine, handling button initialization, lighting, and user interactions.
            Implements listeners for vehicle status, power, lights, and autopilot events.
            </summary>
        </member>
        <member name="F:AVS.ControlPanel.mv">
            <summary>
            The submarine instance this control panel is associated with.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.Init">
            <summary>
            Initializes the control panel by finding and configuring all button GameObjects and their logic.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.ResetAllButtonLighting">
            <summary>
            Resets all button lighting to their default states.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.AdjustButtonLightingForPowerDown">
            <summary>
            Adjusts all button lighting for a power down state (all off).
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.EmptyClick">
            <summary>
            No-op click handler for unused buttons.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.EmptyHover">
            <summary>
            Hover handler for unused buttons, sets the hand reticle text and icon.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.HeadlightsClick">
            <summary>
            Click handler for the headlights button, toggles the headlights.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.HeadLightsHover">
            <summary>
            Hover handler for the headlights button, sets the hand reticle text and icon.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.FloodLightsClick">
            <summary>
            Click handler for the floodlights button, toggles the floodlights.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.FloodLightsHover">
            <summary>
            Hover handler for the floodlights button, sets the hand reticle text and icon.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.NavLightsClick">
            <summary>
            Click handler for the navigation lights button, toggles the navigation lights.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.NavLightsHover">
            <summary>
            Hover handler for the navigation lights button, sets the hand reticle text and icon.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.InteriorLightsClick">
            <summary>
            Click handler for the interior lights button, toggles the interior lights.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.InteriorLightsHover">
            <summary>
            Hover handler for the interior lights button, sets the hand reticle text and icon.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.DefaultColorClick">
            <summary>
            Click handler for the default color button, paints the vehicle with its default style.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.DefaultColorHover">
            <summary>
            Hover handler for the default color button, sets the hand reticle text and icon.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.PowerClick">
            <summary>
            Click handler for the power button, toggles vehicle power if there is charge.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.PowerHover">
            <summary>
            Hover handler for the power button, sets the hand reticle text and icon.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.AutoPilotClick">
            <summary>
            Click handler for the autopilot button. (Not implemented.)
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.AutoPilotHover">
            <summary>
            Hover handler for the autopilot button, sets the hand reticle text and icon.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.SetButtonLightingActive(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Sets the lighting state of a button, enabling or disabling emission and color.
            </summary>
            <param name="button">The button GameObject.</param>
            <param name="active">True to enable lighting, false to disable.</param>
        </member>
        <member name="M:AVS.ControlPanel.AVS#ILightsStatusListener#OnHeadLightsOn">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#ILightsStatusListener#OnHeadLightsOff">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#ILightsStatusListener#OnInteriorLightsOn">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#ILightsStatusListener#OnInteriorLightsOff">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#IVehicleStatusListener#OnTakeDamage">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#ILightsStatusListener#OnFloodLightsOn">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#ILightsStatusListener#OnFloodLightsOff">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#ILightsStatusListener#OnNavLightsOn">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#ILightsStatusListener#OnNavLightsOff">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#IPowerListener#OnBatterySafe">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#IPowerListener#OnBatteryLow">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#IPowerListener#OnBatteryNearlyEmpty">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#IPowerListener#OnBatteryDepleted">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#IPowerListener#OnPowerUp">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#IPowerListener#OnPowerDown">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#IPowerListener#OnBatteryDead">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#IPowerListener#OnBatteryRevive">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#IVehicleStatusListener#OnNearbyLeviathan">
            <inheritdoc />
        </member>
        <member name="T:AVS.Crafting.CraftingNode">
            <summary>
            A node declaration in the crafting interface, representing a tab or module.
            </summary>
        </member>
        <member name="P:AVS.Crafting.CraftingNode.Name">
            <summary>
            The name of the crafting node, used for identification.
            </summary>
        </member>
        <member name="P:AVS.Crafting.CraftingNode.DisplayName">
            <summary>
            Gets the display name of the entity.
            </summary>
        </member>
        <member name="P:AVS.Crafting.CraftingNode.Icon">
            <summary>
            Gets the icon associated with this item.
            </summary>
        </member>
        <member name="M:AVS.Crafting.CraftingNode.#ctor(System.String,System.String,Atlas.Sprite)">
            <summary>
            Constructs a new instance of the <see cref="T:AVS.Crafting.CraftingNode"/> struct.
            </summary>
        </member>
        <member name="T:AVS.Crafting.CraftPath">
            <summary>
            Path to a tab or module in the crafting interface.
            </summary>
        </member>
        <member name="P:AVS.Crafting.CraftPath.Segments">
            <summary>
            The segments of the crafting path.
            </summary>
        </member>
        <member name="P:AVS.Crafting.CraftPath.IsEmpty">
            <summary>
            Gets a value indicating whether the collection of segments is empty.
            </summary>
        </member>
        <member name="P:AVS.Crafting.CraftPath.Length">
            <summary>
            Gets the number of segments in the collection.
            </summary>
        </member>
        <member name="P:AVS.Crafting.CraftPath.Empty">
            <summary>
            An empty crafting path, representing the root or no specific path.
            </summary>
        </member>
        <member name="P:AVS.Crafting.CraftPath.Last">
            <summary>
            Gets the last segment of the path. An empty path returns an empty string.
            </summary>
        </member>
        <member name="P:AVS.Crafting.CraftPath.Previous">
            <summary>
            Gets the segment preceding the last segment in the collection.
            </summary>
        </member>
        <member name="P:AVS.Crafting.CraftPath.Parent">
            <summary>
            Gets the parent path, which is the path without the last segment.
            </summary>
        </member>
        <member name="P:AVS.Crafting.CraftPath.Ancestors">
            <summary>
            Gets an enumerable collection of <see cref="T:AVS.Crafting.CraftPath"/> objects representing the ancestors of the
            current path.
            </summary>
        </member>
        <member name="M:AVS.Crafting.CraftPath.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs a new <see cref="T:AVS.Crafting.CraftPath"/> with the specified segments.
            </summary>
        </member>
        <member name="M:AVS.Crafting.CraftPath.#ctor(System.String[])">
            <summary>
            Constructs a new <see cref="T:AVS.Crafting.CraftPath"/> with the specified segments.
            </summary>
        </member>
        <member name="M:AVS.Crafting.CraftPath.Append(System.String)">
            <summary>
            Appends a new segment to the crafting path.
            </summary>
            <param name="segment">Segment to append. Must not be empty (after trim) and must not contain / characters</param>
            <returns>New crafting path with the given segment appended</returns>
        </member>
        <member name="M:AVS.Crafting.CraftPath.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Crafting.CraftPath.Equals(AVS.Crafting.CraftPath)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Crafting.CraftPath.op_Equality(AVS.Crafting.CraftPath,AVS.Crafting.CraftPath)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Crafting.CraftPath.op_Inequality(AVS.Crafting.CraftPath,AVS.Crafting.CraftPath)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Crafting.CraftPath.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Crafting.CraftPath.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Crafting.CraftPath.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Crafting.CraftPath.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Crafting.CraftPath.op_Addition(AVS.Crafting.CraftPath,System.String)">
            <summary>
            Concatenates a specified segment to the end of the given <see cref="T:AVS.Crafting.CraftPath"/>.
            </summary>
            <param name="path">The <see cref="T:AVS.Crafting.CraftPath"/> to which the segment will be appended.</param>
            <param name="segment">The segment to append to the <see cref="T:AVS.Crafting.CraftPath"/>. Cannot be null or empty.</param>
            <returns>A new <see cref="T:AVS.Crafting.CraftPath"/> instance with the segment appended.</returns>
        </member>
        <member name="P:AVS.Crafting.CraftTreeHandler.KnownRootNodes">
            For consistency, tabs and modules must not exist in the same tab. Either a tab contains only tabs, or it contains only modules.
            To assert consistency, we maintain these sets.
        </member>
        <member name="T:AVS.Crafting.UpgradeCompat">
            <summary>
            Specifies compatibility flags for registering upgrades with different vehicle types.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeCompat.SkipAvsVehicle">
            <summary>
            If true, skip registering for <see cref="T:AVS.BaseVehicle.AvsVehicle" />.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeCompat.SkipSeamoth">
            <summary>
            If true, skip registering for Seamoth.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeCompat.SkipExosuit">
            <summary>
            If true, skip registering for Exosuit.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeCompat.SkipCyclops">
            <summary>
            If true, skip registering for Cyclops.
            </summary>
        </member>
        <member name="M:AVS.Crafting.UpgradeCompat.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.Crafting.UpgradeCompat"/> class with options to skip certain vehicle
            upgrades.
            </summary>
            <param name="skipAvsVehicle">If <see langword="true"/>, the AVS vehicle upgrade will be skipped; otherwise, it will be included. Defaults
            to <see langword="false"/>.</param>
            <param name="skipSeamoth">If <see langword="true"/>, the Seamoth upgrade will be skipped; otherwise, it will be included. Defaults to
            <see langword="false"/>.</param>
            <param name="skipExosuit">If <see langword="true"/>, the Exosuit upgrade will be skipped; otherwise, it will be included. Defaults to
            <see langword="false"/>.</param>
            <param name="skipCyclops">If <see langword="true"/>, the Cyclops upgrade will be skipped; otherwise, it will be included. Defaults to
            <see langword="false"/>.</param>
        </member>
        <member name="P:AVS.Crafting.UpgradeCompat.AvsVehiclesOnly">
            <summary>
            Default compatibility settings for registering upgrades to be applicable only to
            AVS vehicles.
            </summary>
        </member>
        <member name="T:AVS.Crafting.UpgradeTechTypes">
            <summary>
            Holds TechTypes for an upgrade for each supported vehicle type.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeTechTypes.ForAvsVehicle">
            <summary>
            Tech type applicable for any AVS vehicle.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeTechTypes.ForSeamoth">
            <summary>
            Tech type applicable for Seamoth vehicles.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeTechTypes.ForExosuit">
            <summary>
            Tech type applicable for PRAWN exosuits.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeTechTypes.ForCyclops">
            <summary>
            Tech type applicable for Cyclops vehicles.
            </summary>
        </member>
        <member name="M:AVS.Crafting.UpgradeTechTypes.#ctor(TechType,TechType,TechType,TechType)">
            <summary>
            Constructor for UpgradeTechTypes.
            </summary>
        </member>
        <member name="M:AVS.Crafting.UpgradeTechTypes.HasTechType(TechType)">
            <summary>
            Determines whether the specified <see cref="T:TechType"/> is not <see cref="F:TechType.None" />
            and equal to any of the contained types.
            </summary>
        </member>
        <member name="T:AVS.Crafting.VehicleType">
            <summary>
            Enum representing supported vehicle types.
            </summary>
        </member>
        <member name="F:AVS.Crafting.VehicleType.AvsVehicle">
            <summary>
            Any mod vehicle type
            </summary>
        </member>
        <member name="F:AVS.Crafting.VehicleType.Seamoth">
            <summary>
            The Seamoth vehicle type.
            </summary>
        </member>
        <member name="F:AVS.Crafting.VehicleType.Prawn">
            <summary>
            The Prawn exosuit vehicle type.
            </summary>
        </member>
        <member name="F:AVS.Crafting.VehicleType.Cyclops">
            <summary>
            The Cyclops vehicle type.
            </summary>
        </member>
        <member name="F:AVS.Crafting.VehicleType.Custom">
            <summary>
            Vehicle specific type, used for upgrades that are specific to one vehicle type.
            </summary>
        </member>
        <member name="T:AVS.Crafting.UpgradeRegistrar">
            <summary>
            Handles registration and management of vehicle upgrades, including their icons, actions, and compatibility.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeRegistrar.UpgradeIcons">
            <summary>
            Dictionary of upgrade icons, indexed by upgrade ClassId.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeRegistrar.OnAddActions">
            <summary>
            List of actions to invoke when an upgrade is added or removed.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeRegistrar.OnToggleActions">
            <summary>
            List of actions to invoke when a toggleable upgrade is toggled.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeRegistrar.OnSelectChargeActions">
            <summary>
            List of actions to invoke when a selectable chargeable upgrade is selected.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeRegistrar.OnSelectActions">
            <summary>
            List of actions to invoke when a selectable upgrade is selected.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeRegistrar.OnArmDownActions">
            <summary>
            List of actions to invoke when an arm action is performed (down).
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeRegistrar.OnArmHeldActions">
            <summary>
            List of actions to invoke when an arm action is held.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeRegistrar.OnArmUpActions">
            <summary>
            List of actions to invoke when an arm action is released (up).
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeRegistrar.OnArmAltActions">
            <summary>
            List of actions to invoke when an alternate arm action is performed.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeRegistrar.ToggledActions">
            <summary>
            Tracks currently toggled actions for vehicles, by vehicle, slot, and coroutine.
            </summary>
        </member>
        <member name="M:AVS.Crafting.UpgradeRegistrar.RegisterUpgrade(AVS.UpgradeModules.Node,AVS.UpgradeModules.AvsVehicleUpgrade,AVS.Crafting.UpgradeCompat)">
            <summary>
            Registers a AvsVehicleUpgrade and sets up its icons, recipes, and actions for compatible vehicle types.
            </summary>
            <param name="node">The folder containing the upgrade assets.</param>
            <param name="upgrade">The upgrade to register.</param>
            <param name="compat">Compatibility flags for vehicle types.</param>
            <returns>UpgradeTechTypes containing TechTypes for each vehicle type.</returns>
        </member>
        <member name="M:AVS.Crafting.UpgradeRegistrar.ValidateAvsVehicleUpgrade(AVS.UpgradeModules.AvsVehicleUpgrade,AVS.Crafting.UpgradeCompat)">
            <summary>
            Validates the provided <see cref="T:AVS.UpgradeModules.AvsVehicleUpgrade"/> and its compatibility settings.
            </summary>
            <param name="upgrade">The upgrade to validate.</param>
            <param name="compat">Compatibility flags.</param>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="M:AVS.Crafting.UpgradeRegistrar.RegisterAvsVehicleUpgrade(AVS.UpgradeModules.Node,AVS.UpgradeModules.AvsVehicleUpgrade)">
            <summary>
            Registers the <see cref="T:AVS.UpgradeModules.AvsVehicleUpgrade"/> for <see cref="T:AVS.BaseVehicle.AvsVehicle"/>, sets up its prefab, recipe, and unlock conditions.
            </summary>
            <param name="folder">The folder containing the upgrade assets.</param>
            <param name="upgrade">The upgrade to register.</param>
            <returns>The TechType assigned to the upgrade.</returns>
        </member>
        <member name="M:AVS.Crafting.UpgradeRegistrar.RegisterUpgradeMethods(AVS.UpgradeModules.AvsVehicleUpgrade,AVS.Crafting.UpgradeCompat,AVS.Crafting.UpgradeTechTypes@,System.Boolean)">
            <summary>
            Registers the appropriate upgrade methods (passive, selectable, chargeable, toggleable) for the upgrade.
            </summary>
            <param name="upgrade">The upgrade to register methods for.</param>
            <param name="compat">Compatibility flags.</param>
            <param name="utt">Reference to UpgradeTechTypes to update.</param>
            <param name="isPDASetup">Indicates if PDA registration has occurred.</param>
        </member>
        <member name="M:AVS.Crafting.UpgradeRegistrar.RegisterPassiveUpgradeActions(AVS.UpgradeModules.AvsVehicleUpgrade,AVS.Crafting.UpgradeCompat,AVS.Crafting.UpgradeTechTypes@,System.Boolean@)">
            <summary>
            Registers passive upgrade actions for the upgrade.
            </summary>
            <param name="upgrade">The upgrade to register.</param>
            <param name="compat">Compatibility flags.</param>
            <param name="utt">Reference to UpgradeTechTypes to update.</param>
            <param name="isPDASetup">Indicates if PDA registration has occurred.</param>
        </member>
        <member name="M:AVS.Crafting.UpgradeRegistrar.RegisterSelectableUpgradeActions(AVS.UpgradeModules.AvsVehicleUpgrade,AVS.Crafting.UpgradeCompat,AVS.Crafting.UpgradeTechTypes@,System.Boolean@)">
            <summary>
            Registers selectable upgrade actions for the upgrade.
            </summary>
            <param name="upgrade">The upgrade to register.</param>
            <param name="compat">Compatibility flags.</param>
            <param name="utt">Reference to UpgradeTechTypes to update.</param>
            <param name="isPDASetup">Indicates if PDA registration has occurred.</param>
        </member>
        <member name="M:AVS.Crafting.UpgradeRegistrar.RegisterSelectableChargeableUpgradeActions(AVS.UpgradeModules.AvsVehicleUpgrade,AVS.Crafting.UpgradeCompat,AVS.Crafting.UpgradeTechTypes@,System.Boolean@)">
            <summary>
            Registers selectable chargeable upgrade actions for the upgrade.
            </summary>
            <param name="upgrade">The upgrade to register.</param>
            <param name="compat">Compatibility flags.</param>
            <param name="utt">Reference to UpgradeTechTypes to update.</param>
            <param name="isPDASetup">Indicates if PDA registration has occurred.</param>
        </member>
        <member name="M:AVS.Crafting.UpgradeRegistrar.RegisterToggleableUpgradeActions(AVS.UpgradeModules.AvsVehicleUpgrade,AVS.Crafting.UpgradeCompat,AVS.Crafting.UpgradeTechTypes@,System.Boolean@)">
            <summary>
            Registers toggleable upgrade actions for the upgrade.
            </summary>
            <param name="upgrade">The upgrade to register.</param>
            <param name="compat">Compatibility flags.</param>
            <param name="utt">Reference to UpgradeTechTypes to update.</param>
            <param name="isPDASetup">Indicates if PDA registration has occurred.</param>
        </member>
        <member name="T:AVS.Engines.AbstractEngine">
            <summary>
            Base class for vehicle engines in the mod framework.
            Handles movement, physics, and input for mod vehicles.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.CenterOfMass">
            <summary>
            Center of mass for the vehicle, applied during Start().
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.AngularDrag">
            <summary>
            Angular drag for the vehicle, applied during Start().
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.MV">
            <summary>
            Gets the vehicle component associated with this engine.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.RB">
            <summary>
            Gets the Rigidbody component associated with this engine.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.CanMoveAboveWater">
            <summary>
            Gets or sets a value indicating whether the vehicle can move above water.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.CanRotateAboveWater">
            <summary>
            Gets or sets a value indicating whether the vehicle can rotate above water.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.DragDecay">
            <summary>
            Gets the drag decay value depending on whether the vehicle is underwater.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.ForwardMomentum">
            <summary>
            Gets or sets the forward momentum of the vehicle.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.UpdateForwardMomentum(System.Single)">
            <summary>
            Updates the forward momentum based on input magnitude.
            </summary>
            <param name="inputMagnitude">Input value for forward movement.</param>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.RightMomentum">
            <summary>
            Gets or sets the right (strafe) momentum of the vehicle.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.UpdateRightMomentum(System.Single)">
            <summary>
            Updates the right (strafe) momentum based on input magnitude.
            </summary>
            <param name="inputMagnitude">Input value for right movement.</param>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.UpMomentum">
            <summary>
            Gets or sets the upward momentum of the vehicle.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.UpdateUpMomentum(System.Single)">
            <summary>
            Updates the upward momentum based on input magnitude.
            </summary>
            <param name="inputMagnitude">Input value for upward movement.</param>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.Awake">
            <summary>
            Unity Awake callback. Initializes references and registers the engine.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.Start">
            <summary>
            Unity Start callback. Applies center of mass and angular drag.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.OnDisable">
            <summary>
            Unity OnDisable callback. Stops engine sounds if needed.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.FixedUpdate">
            <summary>
            Unity FixedUpdate callback. Handles movement and physics updates.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.CanMove">
            <summary>
            Determines if the vehicle can move.
            </summary>
            <returns>True if movement is allowed.</returns>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.CanRotate">
            <summary>
            Determines if the vehicle can rotate.
            </summary>
            <returns>True if rotation is allowed.</returns>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.DoMovement">
            <summary>
            Performs the movement logic for the vehicle.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.DoFixedUpdate">
            <summary>
            Performs additional fixed update logic, such as drag application.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.MoveWithInput(UnityEngine.Vector3)">
            <summary>
            Applies movement input to the vehicle.
            </summary>
            <param name="moveInput">Movement input vector.</param>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.ApplyPlayerControls(UnityEngine.Vector3)">
            <summary>
            Applies player controls to the vehicle, including acceleration modifiers.
            </summary>
            <param name="moveDirection">Movement direction vector.</param>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.DoMovementInputs">
            <summary>
            Handles movement input and power drain if the player is controlling the vehicle.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.DrainPower(UnityEngine.Vector3)">
            <summary>
            Drains power from the vehicle based on movement input.
            </summary>
            <param name="moveDirection">Movement direction vector.</param>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.KillMomentum">
            <summary>
            Kills all movement momentum for the vehicle.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.ControlRotation">
            <summary>
            Controls the rotation of the vehicle based on player input.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.DragThresholdSpeed">
            <summary>
            Gets or sets the drag threshold speed below which momentum is killed.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.ApplyDrag(UnityEngine.Vector3)">
            <summary>
            Applies drag to the vehicle's momentum based on movement input.
            </summary>
            <param name="move">Movement input vector.</param>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.ExecutePhysicsMove">
            <summary>
            Executes the physics-based movement for the vehicle.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.CanTakeInputs">
            <summary>
            Determines if the vehicle can take player inputs.
            </summary>
            <returns>True if input is allowed.</returns>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.GetTimeToStop">
            <summary>
            Gets the estimated time (in seconds) for the vehicle to come to a stop.
            </summary>
            <returns>Maximum time to stop among all axes.</returns>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.AVS#IScuttleListener#OnScuttle">
            <summary>
            Called when the vehicle is scuttled. Disables the engine.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.AVS#IScuttleListener#OnUnscuttle">
            <summary>
            Called when the vehicle is unscuttled. Enables the engine.
            </summary>
        </member>
        <member name="P:AVS.Engines.AtramaEngine.ForwardMomentum">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Engines.AtramaEngine.UpdateForwardMomentum(System.Single)">
            <inheritdoc/>
        </member>
        <member name="P:AVS.Engines.AtramaEngine.RightMomentum">
            <inheritdoc/>
        </member>
        <member name="P:AVS.Engines.AtramaEngine.UpMomentum">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Engines.AtramaEngine.UpdateUpMomentum(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Engines.AtramaEngine.GetCurrentPercentOfTopSpeed">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Engines.AtramaEngine.ControlRotation">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Engines.AtramaEngine.DrainPower(UnityEngine.Vector3)">
            <inheritdoc/>
        </member>
        <member name="P:AVS.Engines.OdysseyEngine.ForwardMomentum">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Engines.OdysseyEngine.UpdateForwardMomentum(System.Single)">
            <inheritdoc/>
        </member>
        <member name="P:AVS.Engines.OdysseyEngine.RightMomentum">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Engines.OdysseyEngine.UpdateRightMomentum(System.Single)">
            <inheritdoc/>
        </member>
        <member name="P:AVS.Engines.OdysseyEngine.UpMomentum">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Engines.OdysseyEngine.UpdateUpMomentum(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Engines.OdysseyEngine.ControlRotation">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Engines.OdysseyEngine.DrainPower(UnityEngine.Vector3)">
            <inheritdoc/>
        </member>
        <member name="T:AVS.Interfaces.AutopilotStatusChange">
            <summary>
            Signals that an autopilot status change has occurred.
            </summary>
        </member>
        <member name="P:AVS.Interfaces.AutopilotStatusChange.PreviousStatus">
            <summary>
            The previous autopilot status.
            </summary>
        </member>
        <member name="P:AVS.Interfaces.AutopilotStatusChange.NewStatus">
            <summary>
            The new autopilot status.
            </summary>
        </member>
        <member name="M:AVS.Interfaces.AutopilotStatusChange.#ctor(AVS.Interfaces.AutopilotStatus,AVS.Interfaces.AutopilotStatus)">
            <summary>
            Constructs a new autopilot status change.
            </summary>
            <param name="previousStatus">Previous status</param>
            <param name="newStatus">New status</param>
        </member>
        <member name="T:AVS.Interfaces.AutopilotEvent">
            <summary>
            Plain autopilot event
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotEvent.PowerUp">
            <summary>
            Engine is powering up.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotEvent.PowerDown">
            <summary>
            Engine is powering down.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotEvent.PlayerEntry">
            <summary>
            The player has entered the vehicle.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotEvent.PlayerExit">
            <summary>
            The player has exited the vehicle.
            </summary>
        </member>
        <member name="T:AVS.Interfaces.AutopilotStatus">
            <summary>
            Autopilot events that can be detected by the autopilot system.
            More severe statuses are generally greater than less severe statuses.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.HealthSafe">
            <summary>
            Health status is now within safe limits.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.HealthLow">
            <summary>
            Health is low, but not critical.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.HealthCritical">
            <summary>
            Health is critical and requires immediate attention.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.PowerSafe">
            <summary>
            Power is within safe limits.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.PowerLow">
            <summary>
            Power is low, but not critical.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.PowerCritical">
            <summary>
            Power is critical and requires immediate attention.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.PowerDead">
            <summary>
            Battery/ies is/are dead and require(s) replacement.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.DepthSafe">
            <summary>
            Depth is within safe limits.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.DepthNearCrush">
            <summary>
            Depth is near crush depth, but not critical.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.DepthBeyondCrush">
            <summary>
            Depth is beyond crush depth and will cause damage.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.LeviathanSafe">
            <summary>
            No leviathan is nearby.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.LeviathanNearby">
            <summary>
            Leviathan is nearby.
            </summary>
        </member>
        <member name="T:AVS.Interfaces.IAutopilotEventListener">
            <summary>
            Listener for events detected by the autopilot system.
            </summary>
        </member>
        <member name="M:AVS.Interfaces.IAutopilotEventListener.Signal(AVS.Interfaces.AutopilotEvent)">
            <summary>
            Signals that the specified event was detected by the autopilot system.
            </summary>
            <param name="autopilotEvent">Event that was detected</param>
        </member>
        <member name="M:AVS.Interfaces.IAutopilotEventListener.Signal(AVS.Interfaces.AutopilotStatusChange)">
            <summary>
            Signals that a status change has occurred in the autopilot system.
            </summary>
            <param name="statusChange">Change that was detected</param>
        </member>
        <member name="T:AVS.IDockListener">
            <summary>
            Implementations of this interface are notified when the vessel is docked or undocked.
            </summary>
        </member>
        <member name="M:AVS.IDockListener.OnDock">
            <summary>
            Notifies the listener that the vessel has been docked.
            </summary>
        </member>
        <member name="M:AVS.IDockListener.OnUndock">
            <summary>
            Notifies the listener that the vessel has been undocked.
            </summary>
        </member>
        <member name="T:AVS.IScuttleListener">
            <summary>
            Listeners for scuttling events.
            </summary>
        </member>
        <member name="M:AVS.IScuttleListener.OnScuttle">
            <summary>
            Executed when the scuttle action is triggered.
            </summary>
        </member>
        <member name="M:AVS.IScuttleListener.OnUnscuttle">
            <summary>
            Executed when the unscuttle action is triggered.
            </summary>
        </member>
        <member name="T:AVS.Localization.DefaultTranslator">
            <summary>
            Default implementation of the ITranslator interface for AVS.
            </summary>
        </member>
        <member name="M:AVS.Localization.DefaultTranslator.GetTranslationKey(AVS.Localization.TranslationKey)">
            <summary>
            Retrieves the translation key for a given TranslationKey enum value.
            </summary>
        </member>
        <member name="M:AVS.Localization.DefaultTranslator.Translate(AVS.Localization.TranslationKey)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Localization.DefaultTranslator.Translate``1(AVS.Localization.TranslationKey,``0)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Localization.DefaultTranslator.Translate``2(AVS.Localization.TranslationKey,``0,``1)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Localization.DefaultTranslator.Translate``3(AVS.Localization.TranslationKey,``0,``1,``2)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Localization.DefaultTranslator.Translate``4(AVS.Localization.TranslationKey,``0,``1,``2,``3)">
            <inheritdoc/>
        </member>
        <member name="T:AVS.Localization.ITranslator">
            <summary>
            Translator interface for AVS.
            </summary>
        </member>
        <member name="M:AVS.Localization.ITranslator.Translate(AVS.Localization.TranslationKey)">
            <summary>
            Translates a simple translation key.
            </summary>
        </member>
        <member name="M:AVS.Localization.ITranslator.Translate``1(AVS.Localization.TranslationKey,``0)">
            <summary>
            Translates a translation key with arguments.
            </summary>
        </member>
        <member name="M:AVS.Localization.ITranslator.Translate``2(AVS.Localization.TranslationKey,``0,``1)">
            <summary>
            Translates a translation key with arguments.
            </summary>
        </member>
        <member name="M:AVS.Localization.ITranslator.Translate``3(AVS.Localization.TranslationKey,``0,``1,``2)">
            <summary>
            Translates a translation key with arguments.
            </summary>
        </member>
        <member name="M:AVS.Localization.ITranslator.Translate``4(AVS.Localization.TranslationKey,``0,``1,``2,``3)">
            <summary>
            Translates a translation key with arguments.
            </summary>
        </member>
        <member name="T:AVS.Localization.Text">
            <summary>
            Helpers for creating <see cref="T:AVS.Localization.MaybeTranslate"/> instances.
            </summary>
        </member>
        <member name="M:AVS.Localization.Text.Translated(System.String)">
            <summary>
            Creates a new instance of <see cref="T:AVS.Localization.MaybeTranslate"/> with the specified text.
            </summary>
            <param name="text">The text to be used for translation.</param>
            <returns>A <see cref="T:AVS.Localization.MaybeTranslate"/> object initialized with the provided text.</returns>
        </member>
        <member name="M:AVS.Localization.Text.Untranslated(System.String)">
            <summary>
            Creates a <see cref="T:AVS.Localization.MaybeTranslate"/> instance representing untranslated text.
            </summary>
            <param name="text">The text to be marked as untranslated. Cannot be null.</param>
            <returns>A <see cref="T:AVS.Localization.MaybeTranslate"/> object with the specified text marked as untranslated.</returns>
        </member>
        <member name="T:AVS.Localization.MaybeTranslate">
            <summary>
            Text that may or may not be translated.
            </summary>
        </member>
        <member name="P:AVS.Localization.MaybeTranslate.Text">
            <summary>
            The text to display or use as key for localization.
            </summary>
        </member>
        <member name="P:AVS.Localization.MaybeTranslate.Localize">
            <summary>
            True if the text should be localized, false if it should be used as is.
            </summary>
        </member>
        <member name="P:AVS.Localization.MaybeTranslate.Rendered">
            <summary>
            Gets the localized or original text based on the localization setting.
            </summary>
        </member>
        <member name="M:AVS.Localization.MaybeTranslate.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of MaybeTranslate.
            </summary>
            <param name="text">The text to display or use as key for localization</param>
            <param name="localize">True if the text should be localized, false if it should be used as is</param>
        </member>
        <member name="M:AVS.Localization.MaybeTranslate.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Localization.MaybeTranslate.Equals(AVS.Localization.MaybeTranslate)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Localization.MaybeTranslate.Equals(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:AVS.Localization.TranslationKey">
            <summary>
            All AVS translation keys.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.VehicleDefaultName">
            <summary>
            The localized default name of the vehicle created by AVS.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Reactor_BatteryCharge">
            <summary>
            Produces the current charge status.
            The first argument is the current charge fraction.
            The second is the absolute charge value.
            The third is the maximum charge value.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Reactor_WhitelistWithPowerValue">
            <summary>
            Headline when listing the reactor's whitelist
            with power potentials.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Reactor_WhitelistPlain">
            <summary>
            Headline when listing the reactor's whitelist
            without power potentials.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Command_NothingToUndock">
            <summary>
            No vehicle was found to undock.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Command_UndockingVehicle">
            <summary>
            The undock console command did undock something.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.HandHover_OpenStorage">
            <summary>
            Text displayed when the player hovers over a storage component.
            The first argument is the given display name of the storage component (which may also be localized).
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.HandHover_Vehicle_StartHelmControl">
            <summary>
            Displayed over a vehicle's helm control
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.HandHover_Reactor_Charge">
            <summary>
            The string to display over a material reactor.
            Expected to produce a string like "*: 500/1000".
            The first argument is the absolute current charge,
            the second is the maximum charge.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.HandHoverSub_Reactor_ShowWhitelist">
            <summary>
            The translation key that hints that the user can show the reactor's item-whitelist by right-clicking.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.HandHover_Vehicle_DesconstructionPercent">
            <summary>
            The vehicle status when the vehicle is scuttled, showing the percentage of its deconstruction.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.HandHover_Docked_StatusCharged">
            <summary>
            The vehicle status when hovering while docked and the vehicle is fully charged.
            The first argument is the vehicle health fraction.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.HandHover_Docked_StatusCharging">
            <summary>
            Represents the status of a hand hover event when the device is docked and charging.
            The first argument is the vehicle health fraction.
            The second argument is the current charge level fraction.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Report_AddedToStorage">
            <summary>
            An item was added to the storage.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Error_UpgradeNotRemovable_StorageNotEmpty">
            <summary>
            When trying to remove an upgrade that is not removable because its storage is not empty.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Error_CannotAdd_StorageFull">
            <summary>
            Then trying to add an item to a storage that is full.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Error_CannotExitVehicle">
            <summary>
            Exiting the vehicle is not allowed at the moment.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Error_CannotRemoveMaterialsFromReactor">
            <summary>
            Error message shown when the player tries to remove materials from a reactor.
            The first argument is the reactor's interactText field.
            </summary>
        </member>
        <member name="T:AVS.Localization.Translator">
            <summary>
            Global localization utility for AVS.
            </summary>
        </member>
        <member name="P:AVS.Localization.Translator.Implementation">
            <summary>
            The replaceable implementation for translating keys.
            </summary>
        </member>
        <member name="T:AVS.ILogFilter">
            <summary>
            Defines a filter for controlling whether debug-level log messages are processed.
            </summary>
            <remarks>Implementations of this interface can be used to determine whether debug-level log messages
            should be included in the logging output. This is typically used to enable or disable verbose logging
            dynamically based on application settings or runtime conditions.</remarks>
        </member>
        <member name="P:AVS.ILogFilter.LogDebug">
            <summary>
            Gets a value indicating whether debug-level logging is enabled.
            </summary>
        </member>
        <member name="T:AVS.Logger">
            <summary>
            Provides logging, notification, and main menu alert utilities for the AVS mod.
            Integrates with BepInEx logging and Subnautica's in-game messaging systems.
            </summary>
        </member>
        <member name="P:AVS.Logger.OutLog">
            <summary>
            The BepInEx log source used for outputting log messages.
            </summary>
        </member>
        <member name="M:AVS.Logger.Log(System.String)">
            <summary>
            Logs an informational message.
            </summary>
        </member>
        <member name="M:AVS.Logger.Warn(System.String)">
            <summary>
            Logs a warning message.
            </summary>
        </member>
        <member name="M:AVS.Logger.Error(System.String)">
            <summary>
            Logs an error message.
            </summary>
        </member>
        <member name="M:AVS.Logger.Exception(System.String,System.Exception)">
            <summary>
            Logs an exception with a prefix.
            </summary>
        </member>
        <member name="M:AVS.Logger.DebugLog(AVS.ILogFilter,System.String)">
            <summary>
            Logs a debug message if the owner allows debug logging.
            </summary>
        </member>
        <member name="M:AVS.Logger.DebugLog(System.String)">
            <summary>
            Logs a debug message.
            </summary>
        </member>
        <member name="M:AVS.Logger.WarnException(System.String,System.Exception,System.Boolean)">
            <summary>
            Logs a warning and exception details, optionally outputs to screen.
            </summary>
        </member>
        <member name="M:AVS.Logger.LogException(System.String,System.Exception,System.Boolean)">
            <summary>
            Logs an error and exception details, optionally outputs to screen.
            </summary>
        </member>
        <member name="F:AVS.Logger.IDCounter">
            <summary>
            Counter for generating unique notification IDs.
            </summary>
        </member>
        <member name="F:AVS.Logger.NoteIDsMemory">
            <summary>
            Stores message-to-ID mappings for notifications.
            </summary>
        </member>
        <member name="M:AVS.Logger.GetFreshID">
            <summary>
            Gets a fresh, unused notification ID.
            </summary>
        </member>
        <member name="M:AVS.Logger.PDANote(System.String,System.Single,System.Single)">
            <summary>
            Shows a PDA notification with the specified message, duration, and delay.
            </summary>
        </member>
        <member name="M:AVS.Logger.Output(System.String,System.Single,System.Int32,System.Int32)">
            <summary>
            Outputs a warning message to the in-game screen.
            </summary>
        </member>
        <member name="F:AVS.Logger.Notifications">
            <summary>
            Stores main menu notifications to be displayed in a loop.
            </summary>
        </member>
        <member name="M:AVS.Logger.LoopMainMenuError(System.String,System.String)">
            <summary>
            Adds an error notification to the main menu loop and logs it.
            </summary>
        </member>
        <member name="M:AVS.Logger.LoopMainMenuWarning(System.String,System.String)">
            <summary>
            Adds a warning notification to the main menu loop and logs it.
            </summary>
        </member>
        <member name="M:AVS.Logger.MakeAlerts">
            <summary>
            Coroutine that displays main menu notifications in a loop until the player is loaded.
            </summary>
        </member>
        <member name="T:AVS.Log.LogWriter">
            <summary>
            Logging configuration, mostly used for material adaptation processes.
            </summary>
        </member>
        <member name="P:AVS.Log.LogWriter.Prefix">
            <summary>
            Logging prefix, used to identify the source of the log message.
            </summary>
        </member>
        <member name="P:AVS.Log.LogWriter.Tags">
            <summary>
            Logging tags, used to identify the source of the log message.
            </summary>
        </member>
        <member name="P:AVS.Log.LogWriter.IncludeTimestamp">
            <summary>
            If true, log messages will include a timestamp.
            </summary>
        </member>
        <member name="M:AVS.Log.LogWriter.#ctor(System.String,System.String[],System.Boolean)">
            <summary>
            Creates a new logging definition.
            </summary>
            <param name="prefix">Logging prefix, used to identify the source of the log message.</param>
            <param name="tags">Logging tags, used to identify the source of the log message.</param>
            <param name="includeTimestamp">If true, log messages will include a timestamp.</param>
        </member>
        <member name="M:AVS.Log.LogWriter.#ctor(System.String,System.String[])">
            <summary>
            Creates a new logging definition.
            </summary>
            <param name="prefix">Logging prefix, used to identify the source of the log message.</param>
            <param name="tags">Logging tags, used to identify the source of the log message.</param>
        </member>
        <member name="F:AVS.Log.LogWriter.DefaultTags">
            <summary>
            Default tags used for logging by AVS itself.
            </summary>
        </member>
        <member name="F:AVS.Log.LogWriter.Default">
            <summary>
            Default log writer instance for AVS itself.
            </summary>
        </member>
        <member name="M:AVS.Log.LogWriter.Debug(AVS.ILogFilter,System.String)">
            <summary>
            Logs a debug message if the filter allows it.
            </summary>
            <param name="filter">Filter for verbose log messages</param>
            <param name="msg">Message to log</param>
        </member>
        <member name="M:AVS.Log.LogWriter.Debug(System.String)">
            <summary>
            Logs a debug message
            </summary>
            <param name="msg">Message to log</param>
        </member>
        <member name="M:AVS.Log.LogWriter.Write(System.String)">
            <summary>
            Logs a regular message.
            </summary>
        </member>
        <member name="M:AVS.Log.LogWriter.Warn(System.String)">
            <summary>
            Logs a warning message.
            </summary>
        </member>
        <member name="M:AVS.Log.LogWriter.Error(System.String)">
            <summary>
            Logs an error message.
            </summary>
        </member>
        <member name="M:AVS.Log.LogWriter.Error(System.String,System.Exception)">
            <summary>
            Logs an error message.
            </summary>
        </member>
        <member name="M:AVS.Log.LogWriter.Prefixed(System.String)">
            <summary>
            Creates a new log writer with an additional prefix appended to end of the current prefix.
            If the current prefix is null, the new prefix will be used as the only prefix.
            Otherwise, the new prefix will be appended to the current prefix with a dot separator.
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:AVS.Log.LogWriter.Tag(System.String)">
            <summary>
            Returns a new <see cref="T:AVS.Log.LogWriter"/> instance with the specified tag added to the existing tags.
            </summary>
            <param name="tag">The tag to add to the <see cref="T:AVS.Log.LogWriter"/>. Cannot be null.</param>
            <returns>A <see cref="T:AVS.Log.LogWriter"/> instance with the specified tag included.  If the tag already exists, returns the
            current instance.</returns>
        </member>
        <member name="T:AVS.Log.MaterialLog">
            <summary>
            Material adaptation logging configuration.
            </summary>
        </member>
        <member name="M:AVS.Log.MaterialLog.#ctor(System.Boolean,System.Boolean,System.String,System.String[],System.Boolean,System.Boolean)">
            <summary>
            Constructs a new material adaptation logging configuration.
            </summary>
            <param name="prefix">Optional logging prefix, used to identify the source of the log message.</param>
            <param name="tags">Optional logging tags, used to identify the source of the log message.</param>
            <param name="includeTimestamp">If true, log messages will include a timestamp.</param>
            <param name="logMaterialVariables">If true, input material variables will be logged.</param>
            <param name="logMaterialChanges">If true material property changes will be logged.</param>
            <param name="logExtraSteps">If true, extra steps of the material adaptation process will be logged.</param>
        </member>
        <member name="P:AVS.Log.MaterialLog.Writer">
            <summary>
            Internal log writer used for material adaptation logging.
            </summary>
        </member>
        <member name="P:AVS.Log.MaterialLog.LogMaterialChanges">
            <summary>
            If true material property changes will be logged.
            </summary>
        </member>
        <member name="P:AVS.Log.MaterialLog.LogMaterialVariables">
            <summary>
            If true, input material variables will be logged.
            </summary>
        </member>
        <member name="P:AVS.Log.MaterialLog.LogExtraSteps">
            <summary>
            If true, extra steps of the material adaptation process will be logged.
            </summary>
        </member>
        <member name="F:AVS.Log.MaterialLog.MaterialAdaptationTag">
            <summary>
            Default logging prefix used when fixing materials.
            </summary>
        </member>
        <member name="P:AVS.Log.MaterialLog.Default">
            <summary>
            Default logging configuration for material adaptation.
            </summary>
        </member>
        <member name="P:AVS.Log.MaterialLog.Silent">
            <summary>
            Muted logging configuration for material adaptation.
            </summary>
        </member>
        <member name="P:AVS.Log.MaterialLog.Verbose">
            <summary>
            Verbose logging configuration for material adaptation.
            </summary>
        </member>
        <member name="M:AVS.Log.MaterialLog.LogExtraStep(System.String)">
            <summary>
            Logs an extra step in the material adaptation process.
            If <see cref="P:AVS.Log.MaterialLog.LogExtraSteps"/> is false, this method does nothing.
            </summary>
        </member>
        <member name="M:AVS.Log.MaterialLog.LogMaterialChange(System.String)">
            <summary>
            Logs a material change message.
            If <see cref="P:AVS.Log.MaterialLog.LogMaterialChanges"/> is false, this method does nothing.
            </summary>
        </member>
        <member name="M:AVS.Log.MaterialLog.LogMaterialChange(System.Func{System.String})">
            <summary>
            Logs a material change message using a function to generate the message.
            If <see cref="P:AVS.Log.MaterialLog.LogMaterialChanges"/> is false, this method does nothing.
            </summary>
        </member>
        <member name="M:AVS.Log.MaterialLog.LogMaterialVariableSet``1(UnityEngine.Rendering.ShaderPropertyType,System.String,``0,``0,UnityEngine.Material,System.String)">
            <summary>
            Logs a material property set operation.
            </summary>
            <typeparam name="T">C# type being updated</typeparam>
            <param name="type">Unity type being updated</param>
            <param name="name">Field name being updated</param>
            <param name="old">Old value</param>
            <param name="value">New value</param>
            <param name="m">Material affected</param>
            <param name="materialName">Optional custom material name to use instead of the nice name of the material itself</param>
        </member>
        <member name="M:AVS.Log.MaterialLog.LogMaterialVariableData(System.Nullable{UnityEngine.Rendering.ShaderPropertyType},System.String,System.String,UnityEngine.Material,System.String)">
            <summary>
            Logs a material property value.
            </summary>
            <param name="type">Unity type being updated</param>
            <param name="name">Field name being updated</param>
            <param name="dataAsString">The current value as string</param>
            <param name="m">Material affected</param>
            <param name="materialName">Optional custom material name to use instead of the nice name of the material itself</param>
        </member>
        <member name="M:AVS.Log.MaterialLog.LogMaterialVariableData``1(System.String,``0,UnityEngine.Material,System.String)">
            <summary>
            Logs a material property set operation.
            </summary>
            <typeparam name="T">C# type being logged</typeparam>
            <param name="name">Field name being updated</param>
            <param name="data">Recognized data</param>
            <param name="m">Material being logged</param>
            <param name="materialName">Optional custom material name to use instead of the nice name of the material itself</param>
        </member>
        <member name="M:AVS.Log.MaterialLog.Warn(System.String)">
            <summary>
            Logs a warning message.
            </summary>
        </member>
        <member name="M:AVS.Log.MaterialLog.Error(System.String)">
            <summary>
            Logs an error message.
            </summary>
        </member>
        <member name="T:AVS.MainPatcher">
            <summary>
            AVS main patcher class. Must be inherited by the main mod class.
            </summary>
        </member>
        <member name="P:AVS.MainPatcher.Images">
            <summary>
            Loaded patcher images. Available after <see cref="M:AVS.MainPatcher.LoadImages"/> is called in <see cref="M:AVS.MainPatcher.Awake"/>.
            </summary>
        </member>
        <member name="P:AVS.MainPatcher.DepthModule1Icon">
            <summary>
            The icon for the Depth Module 1 upgrade.
            </summary>
        </member>
        <member name="P:AVS.MainPatcher.DepthModule2Icon">
            <summary>
            The icon for the Depth Module 2 upgrade.
            </summary>
        </member>
        <member name="P:AVS.MainPatcher.DepthModule3Icon">
            <summary>
            The icon for the Depth Module 3 upgrade.
            </summary>
        </member>
        <member name="P:AVS.MainPatcher.DepthModuleNodeIcon">
            <summary>
            The icon to use for the parent node of all depth modules in the crafting tree.
            </summary>
        </member>
        <member name="P:AVS.MainPatcher.Instance">
            <summary>
            Queries the main singleton instance of <see cref="T:AVS.MainPatcher"/>.
            </summary>
        </member>
        <member name="M:AVS.MainPatcher.LoadImages">
            <summary>
            Loads the images used by AVS.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AVS.MainPatcher.Awake">
            <summary>
            Begins plugin patching and initialization.
            Also initializes the logger. Before this method is called, the logger will not work.
            </summary>
        </member>
        <member name="M:AVS.MainPatcher.Start">
            <inheritdoc/>
        </member>
        <member name="M:AVS.MainPatcher.PrePatch">
            <summary>
             PrePatch is called before any patches are applied.
            </summary>
        </member>
        <member name="M:AVS.MainPatcher.Patch">
            <summary>
            Applies various patches and event registrations necessary for mod compatibility and game state management.
            </summary>
            <remarks>This method registers save data events, patches external mods for compatibility, and
            manages game state transitions. It uses the Harmony library to apply patches to methods in other mods,
            ensuring that they work correctly with this mod. Additionally, it sets up event handlers to manage game
            state changes during loading and unloading of scenes.</remarks>
        </member>
        <member name="M:AVS.MainPatcher.PostPatch">
            <summary>
            Executes post-patch operations for vehicle data management.
            </summary>
            <remarks>This method is intended to be called after patching operations to ensure that vehicle
            data is correctly updated. It may involve operations such as scattering data boxes for craftable
            items.</remarks>
        </member>
        <member name="T:AVS.MaterialAdapt.DefaultMaterialAdaptConfig">
            <summary>
            The default material adaptation configuration.
            Can be instantiated or inherited by the client mod.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.KeepTag">
            <summary>
            Default tag used to mark materials that should not be adapted.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.GlassTag">
            <summary>
            Default tag used to mark materials that are consider glass and should not be adapted in the default process.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.IgnoreShaderNames">
            <summary>
            True if shader names should be ignored during material adaptation.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.IgnoreGlassShaderNames">
            <summary>
            True if glass shader names should be ignored during material adaptation.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.LogConfig">
            <inheritdoc/>
        </member>
        <member name="M:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.#ctor(System.Nullable{AVS.Log.MaterialLog})">
            <summary>
            Constructs a new default material adaptation configuration.
            </summary>
            <param name="logConfig">Optional logging configuration to use.
            If null, <see cref="P:AVS.Log.MaterialLog.Default" /> is used</param>
        </member>
        <member name="M:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.IsExcludedFromMaterialFixing(UnityEngine.GameObject,AVS.Composition.VehicleComposition)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.IsExcludedFromMaterialFixingByName(System.String)">
            <summary>
            If this method returns true, the specific material with the given lower-case name will be excluded
            from material fixing.
            If you exclusion logic is based on material names only, you only need to override this method.
            </summary>
            <remarks>This default implementation excludes all materials 
            that have <see cref="P:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.KeepTag"/> in their name</remarks>
            <param name="lowerCaseMaterialName">Lower-case name of the material</param>
            <returns>True if this material should not be fixed</returns>
        </member>
        <member name="M:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.ConvertUnityMaterial(AVS.MaterialAdapt.UnityMaterialData)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.ClassifyMaterial(UnityEngine.Renderer,System.Int32,UnityEngine.Material)">
            <inheritdoc/>
        </member>
        <member name="T:AVS.MaterialAdapt.IMaterialAdaptConfig">
            <summary>
            Controls how materials are adapted to Subnautica's material system.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.IMaterialAdaptConfig.LogConfig">
            <summary>
            Logging configuration for material adaptation.
            </summary>
        </member>
        <member name="M:AVS.MaterialAdapt.IMaterialAdaptConfig.IsExcludedFromMaterialFixing(UnityEngine.GameObject,AVS.Composition.VehicleComposition)">
            <summary>
            If this method returns true,
            all materials of the given game object will be excluded
            from material fixing.
            </summary>
            <remarks>Child objects will still be processed</remarks>
            <param name="go">Game object to test</param>
            <param name="comp">Vehicle composition of the target vehicle</param>
            <returns>True if this object should not be fixed</returns>
        </member>
        <member name="M:AVS.MaterialAdapt.IMaterialAdaptConfig.ClassifyMaterial(UnityEngine.Renderer,System.Int32,UnityEngine.Material)">
            <summary>
            Classifies the material of the given renderer.
            </summary>
            <param name="renderer">Owning renderer</param>
            <param name="materialIndex">Index of the material being processed with 0 being the first material</param>
            <param name="material">Material being processed</param>
            <returns>The material type this material represents or null if it should be omitted</returns>
        </member>
        <member name="M:AVS.MaterialAdapt.IMaterialAdaptConfig.ConvertUnityMaterial(AVS.MaterialAdapt.UnityMaterialData)">
            <summary>
            Passes the loaded material data to the config for custom conversion.
            </summary>
            <param name="materialData">Loaded material data</param>
            <returns>Converted material</returns>
        </member>
        <member name="T:AVS.MaterialAdapt.IMaterialResolver">
            <summary>
            Resolver to find materials for adaptation.
            </summary>
        </member>
        <member name="M:AVS.MaterialAdapt.IMaterialResolver.ResolveMaterials">
            <summary>
            Identifies all materials that should be adapted.
            </summary>
        </member>
        <member name="T:AVS.MaterialAdapt.MaterialAddress">
            <summary>
            A renderer material target description, identifying a material by its slot index,
            not reference.
            </summary>
            <author>https://github.com/IronFox</author>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialAddress.Renderer">
            <summary>
            The targeted renderer. Can become null if the source is destroyed
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialAddress.RendererInstanceId">
            <summary>
            The recorded instance id of the renderer. Preserved for performance and also
            to prevent null reference exceptions if the renderer is destroyed
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialAddress.MaterialIndex">
            <summary>
            The 0-based index of this material on the targeted renderer
            </summary>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialAddress.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialAddress.#ctor(UnityEngine.Renderer,System.Int32)">
            <summary>
            Constructs a new material address descriptor
            </summary>
            <param name="renderer">Targeted renderer</param>
            <param name="materialIndex">Index of the material</param>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialAddress.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialAddress.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialAddress.Equals(AVS.MaterialAdapt.MaterialAddress)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialAddress.GetMaterial">
            <summary>
            Gets the addressed material
            </summary>
            <returns>Addressed material or null if the address is/has become invalid</returns>
        </member>
        <member name="T:AVS.MaterialAdapt.MaterialAdaptation">
            <summary>
            A full material translation migrated+prototype -> final
            </summary>
            <author>https://github.com/IronFox</author>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialAdaptation.Target">
            <summary>
            The targeted material
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialAdaptation.Prototype">
            <summary>
            The (shared) prototype used to modify the final material
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialAdaptation.UnityMaterial">
            <summary>
            The data migrated from the original material as present in the mesh
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialAdaptation.Shader">
            <summary>
            The shader that is to be applied to the material
            </summary>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialAdaptation.#ctor(AVS.MaterialAdapt.SubnauticaMaterialPrototype,AVS.MaterialAdapt.UnityMaterialData,UnityEngine.Shader)">
            <summary>
            Constructs a new material adaptation descriptor
            </summary>
            <param name="prototype">The Subnautica material prototype descriptor</param>
            <param name="unityMaterial">The material data extracted from the Unity material</param>
            <param name="shader">The shader to use (Marmoset UBER)</param>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialAdaptation.PostDockFixOnTarget(AVS.Log.MaterialLog)">
            <summary>
            Resets only variables known to be corrupted during moonpool undock
            </summary>
            <param name="logConfig">Log Configuration</param>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialAdaptation.ApplyToTarget(AVS.Log.MaterialLog,System.Nullable{System.Single})">
            <summary>
            Reapplies all material properties to the target
            </summary>
            <param name="logConfig">Log Configuration</param>
            <param name="uniformShininess">The uniform shininess to apply everywhere. If not null,
            the unity material's smoothness value is disregarded</param>
        </member>
        <member name="T:AVS.MaterialAdapt.MaterialClassification">
            <summary>
            The classification of a material for adaptation purposes.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialClassification.Type">
            <summary>
            The type of material to apply.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialClassification.IgnoreShaderNames">
            <summary>
            Gets a value indicating whether shader names should be ignored during processing.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialClassification.Include">
            <summary>
            True if the source material should be included in the adaptation process.
            </summary>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialClassification.#ctor(AVS.MaterialAdapt.MaterialType,System.Boolean)">
            <summary>
            Constructs an included material classification with the specified type and shader name handling.
            </summary>
            <param name="type">The type of material to apply.</param>
            <param name="ignoreShaderNames">Whether shader names should be ignored during processing</param>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialClassification.Excluded">
            <summary>
            Global excluded material classification.
            </summary>
        </member>
        <member name="T:AVS.MaterialAdapt.MaterialFixer">
            <summary>
            Helper class to fix materials automatically. Should be instantiated on the vehicle
            you wish to fix materials of
            </summary>
            <author>https://github.com/IronFox</author>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialFixer.MaterialsAreFixed">
            <summary>
            True if materials have been fixed at least once.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialFixer.Vehicle">
            <summary>
            The owning vehicle.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialFixer.Logging">
            <summary>
            Controls how debug logging should be performed
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialFixer.MaterialResolver">
            <summary>
            The used material resolver.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialFixer.UniformShininess">
            <summary>
            Null or in [0,1].<br/>
            If non-null, enforces the same uniform shininess level on all materials
            </summary>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialFixer.#ctor(AVS.BaseVehicle.AvsVehicle,AVS.MaterialAdapt.IMaterialResolver,System.Nullable{AVS.Log.MaterialLog})">
            <summary>
            Constructs the instance
            </summary>
            <param name="owner">Owning vehicle</param>
            <param name="materialResolver">The solver to fetch all materials to translate.</param>
            <param name="logConfig">Log Configuration. If null, defaults to <see cref="P:AVS.Log.MaterialLog.Default" /></param>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialFixer.OnVehicleUndocked">
            <summary>
            Notifies that the vehicle has just undocked from a docking bay (moonpool, etc).
            </summary>
            <remarks>Should be called from your vehicle OnVehicleUndocked() method</remarks>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialFixer.OnVehicleDocked">
            <summary>
            Notifies that the vehicle has just docked to a docking bay (moonpool, etc).
            </summary>
            <remarks>Should be called from your vehicle OnVehicleDocked() method</remarks>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialFixer.ReApply">
            <summary>
            Forcefully reapplies all material adaptations.
            Normally not necessary
            </summary>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialFixer.OnUpdate">
            <summary>
            Fixes materials if necessary/possible.
            Also fixes undock material changes if <see cref="M:AVS.MaterialAdapt.MaterialFixer.OnVehicleUndocked"/> was called before
            </summary>
            <remarks>Should be called from your vehicle Update() method</remarks>
            <param name="subTransform">Root transform of your sub</param>
        </member>
        <member name="M:AVS.MaterialAdapt.IShaderVariable.SetTo(UnityEngine.Material,AVS.Log.MaterialLog,System.String)">
            <summary>
            Updates a material according to the preserved values present in the local variable
            </summary>
            <param name="m">Material to update</param>
            <param name="logConfig">Log Configuration</param>
            <param name="materialName">Optional custom material name to use instead of the nice name of the material itself</param>
        </member>
        <member name="M:AVS.MaterialAdapt.ColorVariable.Set(UnityEngine.Material,System.String,UnityEngine.Color,AVS.Log.MaterialLog,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:AVS.MaterialAdapt.SubnauticaMaterialPrototype">
            <summary>
            Read-only material definition as retrieved from some existing material
            </summary>
            <author>https://github.com/IronFox</author>
        </member>
        <member name="P:AVS.MaterialAdapt.SubnauticaMaterialPrototype.IsEmpty">
            <summary>
            True if this instance was created without a source material.
            All local values are empty/default if true
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.SubnauticaMaterialPrototype.MaterialGlobalIlluminationFlags">
            <summary>
            Global illumination flags retrieved from the source material
            </summary>
        </member>
        <member name="M:AVS.MaterialAdapt.SubnauticaMaterialPrototype.ApplyTo(UnityEngine.Material,AVS.Log.MaterialLog,System.Func{System.String,System.Boolean},System.String)">
            <summary>
            Updates all recorded shader variables in the specified material
            </summary>
            <param name="m">Target material</param>
            <param name="logConfig">Log Configuration</param>
            <param name="materialName">Optional custom material name to use instead of the nice name of the material itself</param>
            <param name="variableNamePredicate">
            Optional predicate to only check/update certain shader variables by name.
            If non-null updates only variables for which this function returns true</param>
        </member>
        <member name="M:AVS.MaterialAdapt.SubnauticaMaterialPrototype.#ctor(UnityEngine.Material,System.Boolean)">
            <summary>
            Constructs the prototype from a given material
            </summary>
            <param name="source">Material to read. Can be null, causing <see cref="P:AVS.MaterialAdapt.SubnauticaMaterialPrototype.IsEmpty"/> to be set true</param>
            <param name="loadTextures">If true also load texture property values</param>
        </member>
        <member name="M:AVS.MaterialAdapt.SubnauticaMaterialPrototype.GlassFromSeamoth(AVS.Log.MaterialLog)">
            <summary>
            Creates a material prototype for the glass material of the Seamoth.
            </summary>
            <param name="logConfig">Logging configuration</param>
            <returns>Null if the seamoth is not (yet) available. Keep trying if null.
            Non-null if the seamoth is loaded, but can then be empty (IsEmpty is true)
            if the respective material is not found</returns>
        </member>
        <member name="M:AVS.MaterialAdapt.SubnauticaMaterialPrototype.GlassFromAquarium(AVS.Log.MaterialLog)">
            <summary>
            Creates a material prototype for the glass material of the Seamoth.
            </summary>
            <param name="logConfig">Logging configuration</param>
            <returns>Null if the seamoth is not (yet) available. Keep trying if null.
            Non-null if the seamoth is loaded, but can then be empty (IsEmpty is true)
            if the respective material is not found</returns>
        </member>
        <member name="M:AVS.MaterialAdapt.SubnauticaMaterialPrototype.FromSeamoth(AVS.Log.MaterialLog)">
            <summary>
            Creates a material prototype for the main material of the Seamoth body.
            While the Seamoth is not yet available, the method returns null.
            If the Seamoth is loaded but the material could not be found, the return
            value is an empty material prototype (IsEmpty=true)
            </summary>
            <param name="logConfig">Logging configuration</param>
            <returns>Null if the seamoth is not (yet) available. Keep trying if null.
            Non-null if the seamoth is loaded, but can then be empty (IsEmpty is true)
            if the respective material is not found</returns>
        </member>
        <member name="T:AVS.MaterialAdapt.MaterialType">
            <summary>
            Material classification.
            </summary>
        </member>
        <member name="F:AVS.MaterialAdapt.MaterialType.Opaque">
            <summary>
            Standard opaque material
            </summary>
        </member>
        <member name="F:AVS.MaterialAdapt.MaterialType.Glass">
            <summary>
            Glass material
            </summary>
        </member>
        <member name="T:AVS.MaterialAdapt.UnityMaterialData">
            <summary>
            Surface shader data extracted from a material imported from Unity.
            Only values relevant to the translation process are read.
            Read-only
            </summary>
            <author>https://github.com/IronFox</author>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.MaterialName">
            <summary>
            The name of the source material
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.Color">
            <summary>
            Main color of the material. Black if none
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.SpecularColor">
            <summary>
            The specular color of the material. Tints specular reflection.
            Default is white.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.EmissionColor">
            <summary>
            Emission texture of this material. Black if not emissive
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.MainTex">
            <summary>
            Main texture of the material. Null if none.
            In order to be applicable as
            specular reflectivity map, its alpha value must be filled such.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.Smoothness">
            <summary>
            Smoothness value (typically 0-1)
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.MetallicTexture">
            <summary>
            Metallic texture. In order to be applicable as
            specular reflectivity map, its alpha value must be filled such.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.BumpMap">
            <summary>
            Normal map. Null if none
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.EmissionTexture">
            <summary>
            Emission texture. Null if none
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.SmoothnessTextureChannel">
            <summary>
            Texture channel to derive the smoothness (specular) appearance from
            0 = Metallic
            1 = MainTex
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.SpecularTexture">
            <summary>
            The specular reflectivity texture to use for this material.
            Only the alpha channel is used.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.Source">
            <summary>
            The source material
            </summary>
        </member>
        <member name="M:AVS.MaterialAdapt.UnityMaterialData.#ctor(AVS.MaterialAdapt.MaterialType,System.String,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,UnityEngine.Texture,System.Single,System.Int32,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture,AVS.MaterialAdapt.MaterialAddress)">
            <summary>
            Constructs a new instance of <see cref="T:AVS.MaterialAdapt.UnityMaterialData"/>
            </summary>
        </member>
        <member name="M:AVS.MaterialAdapt.UnityMaterialData.From(AVS.MaterialAdapt.MaterialAddress,AVS.Log.MaterialLog,AVS.MaterialAdapt.MaterialType,System.Boolean)">
            <summary>
            Reads all local values from the given material address (if available).
            Unless <paramref name="ignoreShaderName"/> is set,
            the method returns null if the material's shader's name does not
            currently match "Standard"
            </summary>
            <param name="source">The source material</param>
            <param name="logConfig">Log Configuration</param>
            <param name="ignoreShaderName">
            If true, will always read the material, regardless of shader name.
            If false, will only read the material if its shader name equals "Standard",
            return null otherwise</param>
            <returns>Read surface shader data or null if the shader name did not match
            or the target is (no longer) valid</returns>
        </member>
        <member name="M:AVS.MaterialAdapt.UnityMaterialData.From(UnityEngine.Renderer,System.Int32,AVS.MaterialAdapt.MaterialType,AVS.Log.MaterialLog,System.Boolean)">
            <summary>
            Reads all local values from the given renderer material (if available).
            Unless <paramref name="ignoreShaderName"/> is set,
            the method returns null if the material's shader's name does not
            currently match "Standard"
            </summary>
            <param name="renderer">The source renderer</param>
            <param name="materialIndex">The source material index on that renderer</param>
            <param name="logConfig">Log Configuration</param>
            <param name="ignoreShaderName">
            If true, will always read the material, regardless of shader name.
            If false, will only read the material if its shader name equals "Standard",
            return null otherwise</param>
            <returns>Read surface shader data or null if the shader name did not match
            or the target is (no longer) valid</returns>
        </member>
        <member name="M:AVS.MaterialAdapt.UnityMaterialData.ApplyTo(UnityEngine.Material,System.Nullable{System.Single},AVS.Log.MaterialLog,System.String)">
            <summary>
            Applies the loaded configuration to the given material
            </summary>
            <param name="m">Target material</param>
            <param name="uniformShininess">If non-null, applies this level of shininess to all materials</param>
            <param name="logConfig">Log Configuration</param>
            <param name="materialName">Optional custom material name to use instead of the nice name of the material itself</param>
        </member>
        <member name="M:AVS.MaterialAdapt.UnityMaterialData.RedefineSource(AVS.MaterialAdapt.MaterialAddress)">
            <summary>
            Creates a clone with a new source material address
            </summary>
            <param name="source">New source address</param>
            <returns>Clone with updated source</returns>
        </member>
        <member name="M:AVS.MaterialAdapt.UnityMaterialData.ToString">
            <inheritdoc />
        </member>
        <member name="T:AVS.Patches.MainMenuLoadPanelPatcher">
            <summary>
            Harmony patch for <see cref="T:MainMenuLoadPanel"/> to support custom save file sprites.
            See also: <see cref="T:AVS.Patches.SaveLoadManagerPatcher"/>
            </summary>
        </member>
        <member name="F:AVS.Patches.MainMenuLoadPanelPatcher.HasTechTypes">
            <summary>
            List of tech types that have associated save file sprites.
            </summary>
        </member>
        <member name="M:AVS.Patches.MainMenuLoadPanelPatcher.AddLoadButtonSprites(MainMenuLoadButton)">
            <summary>
            Adds custom save file sprites as child images to the given <see cref="T:MainMenuLoadButton"/>.
            </summary>
            <param name="lb">The load button to add sprites to.</param>
        </member>
        <member name="M:AVS.Patches.MainMenuLoadPanelPatcher.MainMenuLoadPanelUpdateLoadButtonStatePostfix(MainMenuLoadButton)">
            <summary>
            Harmony postfix for <see cref="M:MainMenuLoadPanel.UpdateLoadButtonState(MainMenuLoadButton)"/>.
            Ensures custom save file sprites are displayed and sized correctly.
            </summary>
            <param name="lb">The load button whose state is being updated.</param>
        </member>
        <member name="M:AVS.Patches.VFXConstructingPatch.ManageColor(VFXConstructing,AVS.BaseVehicle.AvsVehicle)">
            <summary>
            Manages the visual effects (VFX) colors for a construction process, including ghost and wireframe colors.
            </summary>
            <remarks>This method updates the ghost material and wireframe colors of the provided <paramref
            name="vfx"/> instance based on the configuration settings in the <paramref name="mv"/> instance. If the
            ghost or wireframe colors in the configuration are set to <see cref="P:UnityEngine.Color.black"/>, the corresponding
            visual effect will not be updated. The method waits until the ghost material of the <paramref name="vfx"/>
            instance is initialized before applying any updates.</remarks>
            <param name="vfx">The <see cref="T:VFXConstructing"/> instance representing the visual effects to be updated. Must not be null.</param>
            <param name="mv">The <see cref="T:AVS.BaseVehicle.AvsVehicle"/> instance containing configuration settings for the construction process. Must
            not be null.</param>
            <returns>An enumerator that can be used to control the execution of the color management process.</returns>
        </member>
        <member name="M:AVS.Patches.VFXConstructingPatch.StartConstructionPostfix(VFXConstructing)">
            <summary>
            Modifies the construction process of a vehicle to account for custom build times and triggers related
            events.
            </summary>
            <remarks>This method adjusts the construction time based on the configuration of the
            associated <see cref="T:AVS.BaseVehicle.AvsVehicle"/> component, if present. It also broadcasts and sends messages to notify
            other components of the construction process and starts a coroutine to manage additional visual effects or
            behaviors.</remarks>
            <param name="__instance">The instance of <see cref="T:VFXConstructing"/> being patched, representing the vehicle under construction.</param>
        </member>
        <member name="T:AVS.SaveLoad.Data">
            <summary>
            Captures and restores data produced by an entity.
            </summary>
        </member>
        <member name="M:AVS.SaveLoad.Data.#ctor(System.String,AVS.SaveLoad.DataBlock[])">
            <summary>
            Creates a new file with the given name and blocks.
            </summary>
            <param name="name">File name for debugging and logging purposes.
            Not persisted to JSON.</param>
            <param name="blocks">File blocks, each containing a collection of properties.</param>
        </member>
        <member name="P:AVS.SaveLoad.Data.Name">
            <summary>
            File name for debugging and logging purposes.
            Not persisted to JSON.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.Data.Blocks">
            <summary>
            File blocks, each containing a collection of properties.
            </summary>
        </member>
        <member name="T:AVS.SaveLoad.DataBlock">
            <summary>
            Data associated with a specific save context (e.g. a vehicle type specific data).
            Each instance should be handled by one class only.
            </summary>
        </member>
        <member name="M:AVS.SaveLoad.DataBlock.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the collection of properties.
            </summary>
            <returns>An enumerator for the collection of properties.</returns>
        </member>
        <member name="M:AVS.SaveLoad.DataBlock.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates through a collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:AVS.SaveLoad.DataBlock.#ctor(System.String,AVS.SaveLoad.IPersistable[])">
            <summary>
            Creates a new file block with the given name and properties.
            </summary>
            <param name="name">File block name</param>
            <param name="properties">Contained properties</param>
        </member>
        <member name="M:AVS.SaveLoad.DataBlock.#ctor(System.String,System.Collections.Generic.IEnumerable{AVS.SaveLoad.IPersistable})">
            <summary>
            Creates a new file block with the given name and properties.
            </summary>
            <param name="name">File block name</param>
            <param name="properties">Contained properties</param>
        </member>
        <member name="M:AVS.SaveLoad.DataBlock.Add(AVS.SaveLoad.IPersistable)">
            <summary>
            Appends a new property to the block.
            </summary>
            <param name="property">New property</param>
        </member>
        <member name="P:AVS.SaveLoad.DataBlock.Name">
            <summary>
            File block name, used to identify the block in the JSON file.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.DataBlock.Properties">
            <summary>
            Gets the collection of properties associated with the current object.
            </summary>
        </member>
        <member name="T:AVS.SaveLoad.IPersistable">
            <summary>
            Data entry that can be persisted to a JSON file.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.IPersistable.Name">
            <summary>
            Name of the property as written to JSON.
            </summary>
        </member>
        <member name="M:AVS.SaveLoad.IPersistable.ExportValue">
            <summary>
            Exports the value of the property as a value that can be written to JSON.
            </summary>
            <returns>Value to be saved.</returns>
        </member>
        <member name="M:AVS.SaveLoad.IPersistable.RestoreValue(Newtonsoft.Json.Linq.JToken,AVS.Log.LogWriter)">
            <summary>
            Restores the value of the property.
            </summary>
            <param name="value">Value to restore.</param>
            <param name="writer">Log writer to use for logging.</param>
        </member>
        <member name="T:AVS.SaveLoad.Persistable">
            <summary>
            Helper class to create persistent properties.
            </summary>
        </member>
        <member name="M:AVS.SaveLoad.Persistable.Property``1(System.String,System.Func{``0},System.Action{``0})">
            <summary>
            Creates a persistent property with the given name, getter and setter.
            </summary>
            <typeparam name="T">Type preserved in JSON. Should be a simple type (bool, int, string, ...)</typeparam>
            <param name="name">Name of the property.</param>
            <param name="get">Function to get the value.</param>
            <param name="set">Action to set the value.</param>
            <returns>New persistent property.</returns>
        </member>
        <member name="T:AVS.SaveLoad.PersistentProperty`1">
            <summary>
            Property written to and restored from a JSON file.
            </summary>
            <typeparam name="T">Type preserved in JSON. Should be a simple type (bool, int, string, ...)
            </typeparam>
        </member>
        <member name="P:AVS.SaveLoad.PersistentProperty`1.Name">
            <summary>
            The name of the property as written to JSON.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.PersistentProperty`1.ExportValue">
            <summary>
            The function to export the value of the property.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.PersistentProperty`1.ApplyImportedValue">
            <summary>
            Gets the action that reapply the value to its owner.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.FilePath.FullName">
            <summary>
            Full file path, including directory and file name.
            </summary>
        </member>
        <member name="M:AVS.SaveLoad.FilePath.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.SaveLoad.FilePath"/> class with the specified file path.
            </summary>
        </member>
        <member name="M:AVS.SaveLoad.FilePath.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.SaveLoad.FilePath"/> class by combining multiple parts into a single file path.
            </summary>
            <param name="parts"></param>
        </member>
        <member name="P:AVS.SaveLoad.FilePath.IsValid">
            <summary>
            Checks whether <see cref="P:AVS.SaveLoad.FilePath.FullName"/> is valid.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.FilePath.IsFile">
            <summary>
            Checks whether <see cref="P:AVS.SaveLoad.FilePath.FullName" /> points to a valid file.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.FilePath.IsDirectory">
            <summary>
            Checks whether <see cref="P:AVS.SaveLoad.FilePath.FullName" /> points to a valid directory.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.FilePath.FileSize">
            <summary>
            Gets the size of the file in bytes.
            </summary>
        </member>
        <member name="M:AVS.SaveLoad.FilePath.ReadAllText">
            <summary>
            Reads all text from the file specified by the current path.
            </summary>
            <remarks>This method reads the entire content of the file into memory. Ensure that the file
            size is manageable to avoid memory issues.</remarks>
            <returns>The entire content of the file as a string.</returns>
        </member>
        <member name="M:AVS.SaveLoad.FilePath.WriteAllText(System.String)">
            <summary>
            Writes the specified text to the file, overwriting any existing content.
            </summary>
            <remarks>This method writes the entire content to the file specified by the <see
            cref="P:AVS.SaveLoad.FilePath.FullName"/> property. If the file does not exist, it will be created. If the file already contains
            data, it will be replaced with the new content.</remarks>
            <param name="fileContent">The text to write to the file. Cannot be null.</param>
        </member>
        <member name="T:AVS.SaveLoad.SavedColor">
            <summary>
            Color representation used for saving and loading vehicle colors.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.SavedColor.HSB">
            <summary>
            Hue, Saturation, Brightness (HSB) representation of the color.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.SavedColor.RGB">
            <summary>
            RGB representation of the color in hex format (e.g., #FF5733).
            </summary>
        </member>
        <member name="M:AVS.SaveLoad.SavedColor.From(AVS.VehicleComponents.VehicleColor)">
            <summary>
            Resets the local color representation from the given color.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:AVS.SaveLoad.SavedColor.ToColor">
            <summary>
            Converts the local color representation to a <see cref="T:AVS.VehicleComponents.VehicleColor"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AVS.SaveLoad.SaveFiles">
            <summary>
            Files of one save slot.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.SaveFiles.Current">
            <summary>
            Accesses the current save slot files.
            </summary>
        </member>
        <member name="M:AVS.SaveLoad.SaveFiles.OfSlot(System.String)">
            <summary>
            Accesses the save files of a specific slot.
            </summary>
            <param name="slot">Slot to access</param>
        </member>
        <member name="M:AVS.SaveLoad.SaveFiles.WritePrefabReflected``1(PrefabIdentifier,System.String,``0,AVS.Log.LogWriter)">
            <summary>
            Writes data associated with a prefab identifier to a JSON file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="prefabID"></param>
            <param name="prefix">File prefix</param>
            <param name="data"></param>
            <param name="writer">Log writer for logging errors and debug information</param>
        </member>
        <member name="M:AVS.SaveLoad.SaveFiles.WritePrefabData(PrefabIdentifier,System.String,AVS.SaveLoad.Data,AVS.Log.LogWriter)">
            <summary>
            Writes data associated with a prefab identifier to a JSON file.
            </summary>
            <param name="prefabID"></param>
            <param name="prefix">File prefix</param>
            <param name="data"></param>
            <param name="writer">Log writer for logging errors and debug information</param>
        </member>
        <member name="M:AVS.SaveLoad.SaveFiles.ReadPrefabReflected``1(PrefabIdentifier,System.String,``0@,AVS.Log.LogWriter)">
            <summary>
            Deserializes JSON data for a specified prefab identifier.
            </summary>
            <typeparam name="T">Type to deserialize from JSON</typeparam>
            <param name="prefabID">The identifier of the prefab to read. Cannot be <see langword="null"/>.</param>
            <param name="prefix">A string prefix used to construct the JSON file name.</param>
            <param name="outData">Deserialized data</param>
            <param name="writer">Log writer</param>
            <returns>True on success</returns>
        </member>
        <member name="M:AVS.SaveLoad.SaveFiles.ReadPrefabData(PrefabIdentifier,System.String,AVS.SaveLoad.Data,AVS.Log.LogWriter)">
            <summary>
            Reads and processes JSON data for a specified prefab identifier.
            </summary>
            <remarks>This method attempts to read JSON data associated with the given <paramref
            name="prefabID"/> and populate the provided <paramref name="data"/> object. If <paramref name="prefabID"/>
            is <see langword="null"/>, or if the JSON data cannot be read, an error is logged.</remarks>
            <param name="prefabID">The identifier of the prefab to read. Cannot be <see langword="null"/>.</param>
            <param name="prefix">A string prefix used to construct the JSON file name.</param>
            <param name="data">The data object to populate with the JSON content.</param>
            <param name="writer">The log writer used to record operation details and errors.</param>
        </member>
        <member name="T:AVS.SaveLoad.SubmarineSaveData">
            <summary>
            Save data for submarines.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.SubmarineSaveData.DefaultColorName">
            <summary>
            True if the default coloring should be used for the name display
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.SubmarineSaveData.CurrentHelmIndex">
            <summary>
            The seat currently used by the player to pilot this submarine.
            </summary>
        </member>
        <member name="T:AVS.SaveLoad.VehicleSaveData">
            <summary>
            Basic save data written for all vehicles
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.VehicleSaveData.IsControlling">
            <summary>
            The player is currently at the helm of this vehicle.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.VehicleSaveData.EnteredThroughHatch">
            <summary>
            The hatch through which the player entered this vehicle.
            -1 if the player is not inside this vehicle.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.VehicleSaveData.VehicleName">
            <summary>
            The given name of this vehicle.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.VehicleSaveData.BaseColor">
            <summary>
            The set base color of this vehicle
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.VehicleSaveData.InteriorColor">
            <summary>
            The set interior color of this vehicle
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.VehicleSaveData.StripeColor">
            <summary>
            The set stripe color of this vehicle
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.VehicleSaveData.NameColor">
            <summary>
            The set name color of this vehicle
            </summary>
        </member>
        <member name="T:AVS.InnateStorageContainer">
            <summary>
            Innate storage container for vehicles.
            Component attached to gameobjects declared as innate storage containers in the vehicle's composition.
            </summary>
        </member>
        <member name="P:AVS.InnateStorageContainer.Container">
            <summary>
            Accessor for the storage container.
            Throws an exception if called before Awake() or OnCraftEnd() were called.
            </summary>
        </member>
        <member name="P:AVS.InnateStorageContainer.DisplayName">
            <summary>
            The display name of the storage container.
            Must be reapplied on vehicle awake or it will reset to the default value.
            </summary>
        </member>
        <member name="F:AVS.InnateStorageContainer.width">
            <summary>
            Storage container width.
            </summary>
        </member>
        <member name="F:AVS.InnateStorageContainer.height">
            <summary>
            Storage container height.
            </summary>
        </member>
        <member name="F:AVS.InnateStorageContainer.allowedTech">
            <summary>
            Tech that may be stored in this container.
            If empty, all tech is allowed.
            </summary>
        </member>
        <member name="T:AVS.UpgradeModules.AvsVehicleUpgrade">
            <summary>
            Base class for all mod vehicle upgrades. Provides core properties, recipe handling, and extension points for custom upgrades.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleUpgrade.LogDebug">
            <summary>
            If true, enables debug logging for this upgrade.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleUpgrade.TechTypes">
            <summary>
            Holds TechTypes for this upgrade for each supported vehicle type.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleUpgrade.Node">
            <summary>
            The node this upgrade is registered to.
            Set during registration.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleUpgrade.IsVehicleSpecific">
            <summary>
            Gets a value indicating whether the item is specific to a vehicle.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleUpgrade.UnlockTechType">
            <summary>
            The TechType used to unlock this upgrade. Can only be set once if the default is <see cref="F:TechType.Fragment"/>.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleUpgrade.ClassId">
            <summary>
            The unique class ID for this upgrade.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleUpgrade.DisplayName">
            <summary>
            The display name for this upgrade.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleUpgrade.Description">
            <summary>
            The description for this upgrade.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleUpgrade.QuickSlotType">
            <summary>
            The quick slot type for this upgrade.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleUpgrade.UnlockAtStart">
            <summary>
            If true, this upgrade is unlocked at the start of a new game.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleUpgrade.Color">
            <summary>
            The color associated with this upgrade.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleUpgrade.CraftingTime">
            <summary>
            The time required to craft this upgrade.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleUpgrade.Icon">
            <summary>
            The icon for this upgrade.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleUpgrade.UnlockWith">
            <summary>
            The TechType that this module unlocks together with.
            If this tech type is unlocked, this upgrade is also unlocked.
            </summary>
        </member>
        <member name="F:AVS.UpgradeModules.AvsVehicleUpgrade.DefaultUnlockMessage">
            <summary>
            The default unlock message for this upgrade.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleUpgrade.UnlockedMessage">
            <summary>
            The message shown when this upgrade is unlocked.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleUpgrade.UnlockedSprite">
            <summary>
            The sprite shown when this upgrade is unlocked.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleUpgrade.Recipe">
            <summary>
            The base recipe for this upgrade.
            </summary>
        </member>
        <member name="M:AVS.UpgradeModules.AvsVehicleUpgrade.OnAdded(AVS.UpgradeModules.AddActionParams)">
            <summary>
            Called when this upgrade is added to a vehicle.
            </summary>
            <param name="param">Parameters for the add action.</param>
        </member>
        <member name="M:AVS.UpgradeModules.AvsVehicleUpgrade.OnRemoved(AVS.UpgradeModules.AddActionParams)">
            <summary>
            Called when this upgrade is removed from a vehicle.
            </summary>
            <param name="param">Parameters for the remove action.</param>
        </member>
        <member name="M:AVS.UpgradeModules.AvsVehicleUpgrade.OnCyclops(AVS.UpgradeModules.AddActionParams)">
            <summary>
            Called when this upgrade is cycled in a Cyclops vehicle.
            </summary>
            <param name="param">Parameters for the Cyclops action.</param>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleUpgrade.RecipeExtensions">
            <summary>
            Holds additional TechTypes to extend the recipe for different vehicle types.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleUpgrade.SimpleRecipeExtensions">
            <summary>
            Holds additional simple ingredients to extend the recipe.
            </summary>
        </member>
        <member name="M:AVS.UpgradeModules.AvsVehicleUpgrade.GetRecipe(AVS.Crafting.VehicleType)">
            <summary>
            Gets the full recipe for this upgrade for a specific vehicle type.
            </summary>
            <param name="type">The vehicle type.</param>
            <returns>A list of ingredients for crafting.</returns>
        </member>
        <member name="M:AVS.UpgradeModules.AvsVehicleUpgrade.ExtendRecipe(AVS.Crafting.UpgradeTechTypes)">
            <summary>
            Adds an <see cref="T:AVS.Crafting.UpgradeTechTypes"/> to the recipe extensions.
            </summary>
            <param name="techTypes">The tech types to add.</param>
        </member>
        <member name="M:AVS.UpgradeModules.AvsVehicleUpgrade.ExtendRecipeSimple(AVS.Configuration.RecipeIngredient)">
            <summary>
            Adds a simple ingredient to the recipe extensions.
            </summary>
            <param name="ingredient">The ingredient to add.</param>
        </member>
        <member name="M:AVS.UpgradeModules.AvsVehicleUpgrade.HasTechType(TechType)">
            <summary>
            Checks if this upgrade has the specified <see cref="T:TechType"/>.
            </summary>
            <param name="tt">The tech type to check.</param>
            <returns>True if the tech type is present; otherwise, false.</returns>
        </member>
        <member name="M:AVS.UpgradeModules.AvsVehicleUpgrade.GetNumberInstalled(Vehicle)">
            <summary>
            Gets the number of this upgrade currently installed in the specified vehicle.
            </summary>
            <param name="vehicle">The vehicle to check.</param>
            <returns>The number of upgrades installed.</returns>
        </member>
        <member name="T:AVS.UpgradeModules.DepthModule1">
            <summary>
            Represents the first depth module upgrade for vehicles, enhancing their maximum depth capability.
            </summary>
            <remarks>This module can be crafted using specific ingredients and installed on compatible vehicles to
            increase their maximum operational depth.  It is part of the modular vehicle upgrade system and is categorized
            under the "Depth Modules" tab in the crafting interface.</remarks>
        </member>
        <member name="P:AVS.UpgradeModules.DepthModule1.ClassId">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.DepthModule1.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.DepthModule1.Description">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.DepthModule1.Recipe">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.DepthModule1.Icon">
            <inheritdoc/>
        </member>
        <member name="M:AVS.UpgradeModules.DepthModule1.OnAdded(AVS.UpgradeModules.AddActionParams)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.UpgradeModules.DepthModule1.OnRemoved(AVS.UpgradeModules.AddActionParams)">
            <inheritdoc/>
        </member>
        <member name="T:AVS.UpgradeModules.DepthModule2">
            <summary>
            Represents the second-tier depth module upgrade for vehicles, enhancing their maximum depth capacity.
            </summary>
            <remarks>This module is part of the vehicle upgrade system and provides an increased depth limit for
            supported vehicles. It can be crafted using specific materials and installed in the vehicle's upgrade
            console.</remarks>
        </member>
        <member name="P:AVS.UpgradeModules.DepthModule2.ClassId">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.DepthModule2.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.DepthModule2.Description">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.DepthModule2.Recipe">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.DepthModule2.Icon">
            <inheritdoc/>
        </member>
        <member name="M:AVS.UpgradeModules.DepthModule2.OnAdded(AVS.UpgradeModules.AddActionParams)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.UpgradeModules.DepthModule2.OnRemoved(AVS.UpgradeModules.AddActionParams)">
            <inheritdoc/>
        </member>
        <member name="T:AVS.UpgradeModules.DepthModule3">
            <summary>
            Level 3 depth module for vehicles, allowing deeper dives.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.DepthModule3.ClassId">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.DepthModule3.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.DepthModule3.Description">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.DepthModule3.Recipe">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.DepthModule3.Icon">
            <inheritdoc/>
        </member>
        <member name="M:AVS.UpgradeModules.DepthModule3.OnAdded(AVS.UpgradeModules.AddActionParams)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.UpgradeModules.DepthModule3.OnRemoved(AVS.UpgradeModules.AddActionParams)">
            <inheritdoc/>
        </member>
        <member name="T:AVS.UpgradeModules.Node">
            <summary>
            Folder in the crafting tree.
            Can only contain either folders or upgrade modules, not both.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Node.Parent">
            <summary>
            The parent folder of this folder, if any.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Node.Identifier">
            <summary>
            The name of the folder, used for identification.
            Must not be empty, must not contain slashes, and must be unique within the parent folder.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Node.DisplayName">
            <summary>
            Gets the display name of the folder.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Node.Icon">
            <summary>
            Gets the icon associated with this folder.
            Should not be null but loading may have failed, so it is nullable.
            </summary>
        </member>
        <member name="M:AVS.UpgradeModules.Node.Create(System.String,System.String,Atlas.Sprite,AVS.UpgradeModules.Node)">
            <summary>
            Creates a new folder with the specified name, display name, and ideally icon, and adds it to the specified
            parent folder if provided.
            </summary>
            <remarks>If a folder with the same path already exists, the existing folder is returned
            instead of creating a new one.</remarks>
            <param name="name">The unique name of the folder to be created. This name is used as an identifier within the folder path.</param>
            <param name="displayName">The display name of the folder, which is shown in the user interface.</param>
            <param name="icon">An icon representing the folder. If not provided, the folder will have no icon.</param>
            <param name="parent">The parent folder to which the new folder will be added. If <see langword="null"/>, the folder is created at
            the root level.</param>
            <returns>The newly created <see cref="T:AVS.UpgradeModules.Node"/> instance.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the specified parent folder already contains modules, preventing the addition of a new folder.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the provided name is null, empty, or contains slashes.</exception>
        </member>
        <member name="M:AVS.UpgradeModules.Node.RegisterUpgrade(AVS.UpgradeModules.AvsVehicleUpgrade,AVS.Crafting.UpgradeCompat)">
            <summary>
            Registers an upgrade to the local node node with the given compatibility settings.
            </summary>
            <param name="upgrade">The upgrade the register.</param>
            <param name="compat">The compatibility settings for the upgrade. Defaults to the standard compatibility if not specified.</param>
            <returns>The type of upgrade technology registered for the node.</returns>
        </member>
        <member name="M:AVS.UpgradeModules.Node.GetPath">
            <summary>
            Retrieves the name path of this folder in the crafting tree, starting from the root.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.SelectableChargeableActionParams.TechType">
            <summary>
            The tech type of the upgrade being acted upon.
            </summary>
        </member>
        <member name="T:AVS.UpgradeModules.SelectableChargeableUpgrade">
            <summary>
            Represents an upgrade module that can be selected and charged within a vehicle's quick slot.
            </summary>
            <remarks>This abstract class provides a base for creating upgrade modules that require selection and
            charging in a vehicle's quick slot. It defines properties for description, quick slot type, maximum charge, and
            energy cost, as well as a method to handle selection actions.</remarks>
        </member>
        <member name="P:AVS.UpgradeModules.SelectableChargeableUpgrade.Description">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.SelectableChargeableUpgrade.QuickSlotType">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.SelectableChargeableUpgrade.MaxCharge">
            <summary>
            Gets the maximum charge level.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.SelectableChargeableUpgrade.EnergyCost">
            <summary>
            Gets the energy cost associated with the operation.
            </summary>
        </member>
        <member name="M:AVS.UpgradeModules.SelectableChargeableUpgrade.OnSelected(AVS.UpgradeModules.SelectableChargeableActionParams)">
            <summary>
            Handles the event when a chargeable action is selected.
            </summary>
            <remarks>This method logs the selection of a chargeable action for a specific vehicle and
            slot. Override this method to implement custom behavior when an action is selected.</remarks>
            <param name="param">The parameters associated with the selected chargeable action, including the vehicle and slot information.</param>
        </member>
        <member name="P:AVS.UpgradeModules.SelectableActionParams.Vehicle">
            <summary>
            The vehicle to which the upgrade belongs. May be null if <see cref="P:AVS.UpgradeModules.SelectableActionParams.Cyclops"/> is not null.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.SelectableActionParams.Cyclops">
            <summary>
            Reference to the owning Cyclops vehicle, if any. May be null.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.SelectableActionParams.SlotID">
            <summary>
            The index of the slot in which the upgrade is located.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.SelectableActionParams.TechType">
            <summary>
            The tech type of the upgrade being acted upon.
            </summary>
        </member>
        <member name="T:AVS.UpgradeProxy">
            <summary>
            Manages the initialization and setup of upgrade slots for AVS vehicles.
            </summary>
            <remarks>The <see cref="T:AVS.UpgradeProxy"/> class is responsible for creating and managing upgrade slots
            and assigning them to specified proxy transforms. It initializes
            the slots during the <see cref="M:AVS.UpgradeProxy.Awake"/> method by starting a coroutine to ensure the Seamoth is ready and then
            setting up the upgrade slots.</remarks>
        </member>
        <member name="F:AVS.UpgradeProxy.proxies">
            <summary>
            Proxies for individual upgrade slots.
            Specifies where the upgrade modules will be instantiated.
            </summary>
        </member>
        <member name="F:AVS.UpgradeProxy.slots">
            <summary>
            Slot list passed on to the VehicleUpgradeConsoleInput.
            </summary>
        </member>
        <member name="M:AVS.UpgradeProxy.Awake">
            <inheritdoc />
        </member>
        <member name="M:AVS.UpgradeProxy.GetSeamothBitsASAP">
            <summary>
            Initializes and configures the upgrade slots as soon as possible.
            </summary>
            <remarks>This method ensures that the Seamoth is available and then sets up the upgrade slots
            by instantiating the necessary models. It clears any existing proxies and assigns new models to each slot
            based on the current configuration.</remarks>
            <returns>An enumerator that can be used to iterate through the coroutine execution process.</returns>
        </member>
        <member name="T:AVS.Util.Character">
            <summary>
            Helper for the player character.
            </summary>
        </member>
        <member name="P:AVS.Util.Character.PDA">
            <summary>
            Gets the current PDA status
            </summary>
        </member>
        <member name="P:AVS.Util.Character.IsBuildMenuOpen">
            <summary>
            Checks if the build menu is currently open.
            </summary>
        </member>
        <member name="P:AVS.Util.Character.IsMainMenuOpen">
            <summary>
            Checks if the main menu is currently open.
            </summary>
        </member>
        <member name="P:AVS.Util.Character.IsAnyMenuOpen">
            <summary>
            Checks if any menu is currently open.
            </summary>
        </member>
        <member name="M:AVS.Util.Character.TeleportTo(UnityEngine.Vector3)">
            <summary>
            Teleports the player to a specified destination.
            </summary>
            <remarks>
            Takes the player's current vehicle into account, if any.
            </remarks>
            <param name="destination">Target location</param>
        </member>
        <member name="M:AVS.Util.Character.GrantInvincibility(System.Single)">
            <summary>
            Grants the player invincibility for a specified duration.
            </summary>
            <param name="time">Time in seconds to become invincible</param>
        </member>
        <member name="M:AVS.Util.Character.SitDown">
            <summary>
            Asynchronously animates the character to sit down in a chair.
            </summary>
        </member>
        <member name="M:AVS.Util.Character.SetArmsIKTargets(UnityEngine.Transform,UnityEngine.Transform,System.Single)">
            <summary>
            Sets the player inverse kinematics (IK) targets for the hands.
            </summary>
            <param name="leftHandTarget">Left hand target</param>
            <param name="rightHandTarget">Right hand target</param>
            <param name="ikArmToggleTime">Time to toggle IK arms</param>
        </member>
        <member name="M:AVS.Util.CommonExtensions.ToStr(System.Single)">
            <summary>
            Converts a float into a string using the universal decimal sign (.)
            </summary>
            <param name="f">Float to convert</param>
            <returns>Converted float</returns>
        </member>
        <member name="M:AVS.Util.CommonExtensions.ToFloat(System.String,System.Single@)">
            <summary>
            Parses a string into a float using the universal decimal sign (.)
            </summary>
            <param name="s">String to try parse</param>
            <param name="f">Resulting float</param>
            <returns>True on success</returns>
        </member>
        <member name="T:AVS.Util.GameObjectHelper">
            <summary>
            Various utility extensions and methods for querying or manipulating GameObjects and Components.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.TryCopyComponentWithFieldsTo``1(``0,UnityEngine.GameObject)">
            <summary>
            Duplicates a source component onto another object, copying all its fields in the process.
            </summary>
            <typeparam name="T">Type being copied</typeparam>
            <param name="original">Original component. May be null</param>
            <param name="destination">Destination owner</param>
            <returns>Duplicated component</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.CopyComponentWithFieldsTo``1(``0,UnityEngine.GameObject)">
            <summary>
            Duplicates a source component onto another object, copying all its fields in the process.
            </summary>
            <typeparam name="T">Type being copied</typeparam>
            <param name="original">Original component</param>
            <param name="destination">Destination owner</param>
            <returns>Duplicated component</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.Or``1(``0,``0)">
            <summary>
            Returns the first non-null object from the two provided.
            </summary>
            <typeparam name="T">Type being compared</typeparam>
            <param name="a">First object to return if not null</param>
            <param name="b">Second objec to return if <paramref name="a"/> is null</param>
            <returns><paramref name="a"/> if not null, <paramref name="b"/> if <paramref name="a"/> is null,
            null if both are null</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.Or``1(``0,System.Func{``0})">
            <summary>
            Returns the first non-null object from the two provided.
            </summary>
            <typeparam name="T">Type being compared</typeparam>
            <param name="a">First object to return if not null</param>
            <param name="bFactory">Factory for the second object to return if <paramref name="a"/> is null</param>
            <returns><paramref name="a"/> if not null, otherwise the result of <paramref name="bFactory"/>.</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.OrRequired``1(``0,``0)">
            <summary>
            Returns the first non-null object from the two provided.
            Either <paramref name="a"/> or <paramref name="b"/> must not be null.
            </summary>
            <typeparam name="T">Type being compared</typeparam>
            <param name="a">First object to return if not null</param>
            <param name="b">Second object to return if <paramref name="a"/> is null</param>. Must not be null
            <returns><paramref name="a"/> if not null, <paramref name="b"/> if <paramref name="a"/> is null</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.OrRequired``1(``0,System.Func{``0})">
            <summary>
            Returns the first non-null object from the two provided.
            Either <paramref name="a"/> or the result of <paramref name="bFactory"/> must not be null.
            </summary>
            <typeparam name="T">Type being compared</typeparam>
            <param name="a">First object to return if not null</param>
            <param name="bFactory">Factory for the second object to return if <paramref name="a"/> is null</param>. Must not produce null
            <returns><paramref name="a"/> if not null, <paramref name="bFactory"/>() if <paramref name="a"/> is null</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.OrThrow``1(``0,System.Func{System.Exception})">
            <summary>
            Returns a non-null object or throws an exception if the object is null.
            </summary>
            <typeparam name="T">Unity object type to check</typeparam>
            <param name="item">Unity object to check</param>
            <param name="exceptionFactory">Factory that produces the exception to throw. Can throw itself</param>
            <returns>Non-null <paramref name="item"/></returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.LoggedSetActive(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Changes the active state of a GameObject and logs the action, including any exceptions that occur.
            </summary>
            <remarks>
            Does nothing if the object already matches the new state
            </remarks>
            <param name="gameObject">Game object being manipulated</param>
            <param name="toEnabled">New enabled state</param>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetTransform(UnityEngine.GameObject)">
            <summary>
            Selectively returns the transform of a GameObject.
            Returns null if the GameObject is null.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.GetTransform(UnityEngine.Component)">
            <summary>
            Selectively returns the transform of a Component.
            Returns null if the Component is null.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetGameObject(UnityEngine.Component)">
            <summary>
            Selectively returns the GameObject of a Component.
            Returns null if the Component is null.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetTexture2D(UnityEngine.Sprite)">
            <summary>
            Selectively returns the Texture2D of a Sprite.
            Returns null if the Sprite is null.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.NiceName(UnityEngine.Object)">
            <summary>
            Queries a nicer representation of an Object for logging purposes.
            Includes the object's name, type, and instance ID.
            Returns "&lt;null&gt;" if the object is null.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.PathToString(UnityEngine.Transform)">
            <summary>
            Produces the full hierarchy path of a Transform as a single string using / as separator.
            Returns "&lt;null&gt;" if the Transform is null.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetChildren(UnityEngine.Transform)">
            <summary>
            Queries all children of a Transform as an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of Transforms.
            Returns an empty enumerable if the Transform is null or has no children.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetGameObjectOf(UnityEngine.Collider)">
            <summary>
            Gets the GameObject associated with a Collider.
            Favors the attached Rigidbody if available, otherwise uses the Collider's GameObject.
            Returns null if the Collider is null.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.RequireActive(UnityEngine.MonoBehaviour,UnityEngine.Transform)">
            <summary>
            Changes the active state of a MonoBehaviour and its parent hierarchy if necessary,
            such that the MonoBehaviour ends up active and enabled.
            Logs changes and errors as errors.
            </summary>
            <param name="c">Behavior to change the state of</param>
            <param name="rootTransform">Hierarchy root which will not be altered. If encountered, the loop stops</param>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetComponentsInChildren``1(UnityEngine.Component,System.Boolean)">
            <summary>
            Retrieves all components of type <typeparamref name="T"/> from the current component and its children.
            </summary>
            <typeparam name="T">The type of component to retrieve.</typeparam>
            <param name="c">The component from which to begin the search. If <see langword="null"/>, an empty array is returned.</param>
            <returns>An array of components of type <typeparamref name="T"/> found in the current component and its children.
            Returns an empty array if <paramref name="c"/> is <see langword="null"/> or no components of the specified
            type are found.</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetComponentsInChildren``1(UnityEngine.GameObject)">
            <summary>
            Retrieves all components of type <typeparamref name="T"/> from the specified <see cref="T:UnityEngine.GameObject"/>  and
            its child objects. Returns an empty array if the <see cref="T:UnityEngine.GameObject"/> is null.
            </summary>
            <typeparam name="T">The type of component to retrieve. Must derive from <see cref="T:UnityEngine.Component"/>.</typeparam>
            <param name="o">The <see cref="T:UnityEngine.GameObject"/> from which to retrieve the components. Can be null.</param>
            <returns>An array of components of type <typeparamref name="T"/> found in the <see cref="T:UnityEngine.GameObject"/> and its
            children.  Returns an empty array if the <paramref name="o"/> is null.</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetComponentInChildren``1(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Retrieves the first component of type <typeparamref name="T"/> in the specified <see cref="T:UnityEngine.GameObject"/> or
            its children.
            </summary>
            <typeparam name="T">The type of component to retrieve.</typeparam>
            <param name="o">The <see cref="T:UnityEngine.GameObject"/> to search. Can be <see langword="null"/>.</param>
            <param name="includeInactive">A value indicating whether to include inactive GameObjects in the search.  <see langword="true"/> to include
            inactive GameObjects; otherwise, <see langword="false"/>.</param>
            <returns>The first component of type <typeparamref name="T"/> found in the <paramref name="o"/> or its children,  or
            <see langword="null"/> if no such component is found or if <paramref name="o"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetComponentInChildren``1(UnityEngine.Component,System.Boolean)">
            <summary>
            Retrieves the first component of type <typeparamref name="T"/> from the specified component or its children.
            Returns <see langword="null"/> if the transform is <see langword="null"/> or if no such component is found.
            </summary>
            <typeparam name="T">The type of component to retrieve.</typeparam>
            <param name="c">The Component from which to search for the sibling or contained component.</param>
            <param name="includeInactive">Whether to include inactive child GameObjects in the search.</param>
            <returns>The first component of type <typeparamref name="T"/> found, or <see langword="null"/> if none is found.</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetComponent``1(UnityEngine.Component)">
            <summary>
            Selectively gets a component of type <typeparamref name="T"/> from a sibling component.
            If the component is null, returns null.
            </summary>
            <typeparam name="T">Requested component type</typeparam>
            <param name="c">Component to get the sibling component of</param>
            <returns>Requested component or null</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetComponent``1(UnityEngine.GameObject)">
            <summary>
            Retrieves a component of the specified type from the given <see cref="T:UnityEngine.GameObject"/>
            only if the game object is not null.
            Otherwise, returns null.
            </summary>
            <typeparam name="T">The type of the component to retrieve. Must derive from <see cref="T:UnityEngine.Component"/>.</typeparam>
            <param name="go">The <see cref="T:UnityEngine.GameObject"/> from which to retrieve the component. Can be <see langword="null"/>.</param>
            <returns>The component of type <typeparamref name="T"/> if found; otherwise, <see langword="null"/>.  Returns <see
            langword="null"/> if <paramref name="go"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetParent(UnityEngine.Transform)">
            <summary>
            Returns the parent <see cref="T:UnityEngine.Transform"/> of the given <paramref name="t"/>,
            or <see langword="null"/> if <paramref name="t"/> is <see langword="null"/>.
            </summary>
            <param name="t">The <see cref="T:UnityEngine.Transform"/> whose parent is to be retrieved. Can be <see langword="null"/>.</param>
            <returns>The parent <see cref="T:UnityEngine.Transform"/>, or <see langword="null"/> if <paramref name="t"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetVehicle``1(Player)">
            <summary>
            Attempts to retrieve the player's current vehicle as a specific type.
            </summary>
            <typeparam name="T">The type of vehicle to retrieve. Must derive from <see cref="T:Vehicle"/>.</typeparam>
            <param name="player">The player whose vehicle is being queried. Can be <see langword="null"/>.</param>
            <returns>
            The player's current vehicle cast to type <typeparamref name="T"/>, or <see langword="null"/> if the player is <see langword="null"/>,
            the player is not in a vehicle, or the vehicle is not of type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeSetActive(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Sets the active state of the specified <see cref="T:UnityEngine.GameObject"/> if it is not null.
            Does nothing if the <paramref name="gameObject"/> is null.
            </summary>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/> to set active or inactive. Can be null.</param>
            <param name="value">The active state to set.</param>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeDo``1(``0,System.Action{``0})">
            <summary>
            Executes the specified action if the object is not null.
            </summary>
            <remarks>This method provides a safe way to perform an action on a nullable object derived
            from <see cref="T:UnityEngine.Object"/>. If <paramref name="item"/> is null, the method does
            nothing.</remarks>
            <typeparam name="T">The type of the object, which must derive from <see cref="T:UnityEngine.Object"/>.</typeparam>
            <param name="item">The object to check for null before executing the action.</param>
            <param name="action">The action to execute if <paramref name="item"/> is not null.</param>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.PrefabId(UnityEngine.Component)">
            <summary>
            Retrieves the <see cref="T:PrefabIdentifier"/> component attached to the specified component.
            </summary>
            <param name="c">The component from which to retrieve the <see cref="T:PrefabIdentifier"/>. Can be <see langword="null"/>.</param>
            <returns>The <see cref="T:PrefabIdentifier"/> component if found; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.PrefabId(UnityEngine.GameObject)">
            <summary>
            Retrieves the <see cref="T:PrefabIdentifier"/> component attached to the specified game object.
            </summary>
            <returns>The <see cref="T:PrefabIdentifier"/> component if found; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.WriteReflected``1(PrefabIdentifier,System.String,``0,AVS.Log.LogWriter)">
            <summary>
            Extension method to write reflected data associated with a prefab identifier to a JSON file of the current save game slot.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.WriteData(PrefabIdentifier,System.String,AVS.SaveLoad.Data,AVS.Log.LogWriter)">
            <summary>
            Extension method to write data associated with a prefab identifier to a JSON file of the current save game slot.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.ReadReflected``1(PrefabIdentifier,System.String,``0@,AVS.Log.LogWriter)">
            <summary>
            Extension method to read data via reflection from a JSON file in the current save game slot.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.ReadData(PrefabIdentifier,System.String,AVS.SaveLoad.Data,AVS.Log.LogWriter)">
            <summary>
            Extension method to read data associated with a prefab identifier from a JSON file in the current save game slot.
            </summary>
        </member>
        <member name="T:AVS.Util.Shaders">
            <summary>
            Constants and helper methods related to shaders.
            </summary>
        </member>
        <member name="P:AVS.Util.Shaders.MainShader">
            <summary>
            Name of the (only) shader used for all vehicles.
            </summary>
        </member>
        <member name="P:AVS.Util.Shaders.EmissionKeyword">
            <summary>
            Shader keyword used if the material emits light
            </summary>
        </member>
        <member name="P:AVS.Util.Shaders.SpecmapKeyword">
            <summary>
            Shader keyword used if the material has a specular map and accesses the environment map.
            </summary>
        </member>
        <member name="P:AVS.Util.Shaders.GlowField">
            <summary>
            Shader property that controls glow strength.
            </summary>
        </member>
        <member name="P:AVS.Util.Shaders.GlowNightField">
            <summary>
            Shader property that controls glow strength at night.
            </summary>
        </member>
        <member name="P:AVS.Util.Shaders.EmissionField">
            <summary>
            Shader property that controls emission strength.
            </summary>
        </member>
        <member name="P:AVS.Util.Shaders.EmissionNightField">
            <summary>
            Shader property that controls emission strength as night.
            </summary>
        </member>
        <member name="P:AVS.Util.Shaders.SpecIntField">
            <summary>
            Shader property that controls the specular intensity.
            </summary>
        </member>
        <member name="P:AVS.Util.Shaders.ColorField">
            <summary>
            Shader property that controls color.
            </summary>
        </member>
        <member name="P:AVS.Util.Shaders.GlowColorField">
            <summary>
            Shader property that controls the glow color.
            </summary>
        </member>
        <member name="M:AVS.Util.Shaders.FindMainShader">
            <summary>
            Finds and returns the main shader used for vehicles.
            </summary>
            <remarks>If the shader cannot be located, an error message is logged to the console.</remarks>
            <returns>The <see cref="T:UnityEngine.Shader"/> instance representing the main vehicle shader,  or <see langword="null"/> if the
            shader cannot be found.</returns>
        </member>
        <member name="M:AVS.Util.Shaders.LogMainShaderPropertiesToDebug">
            <summary>
            Logs the properties of the main shader to the debug console.
            </summary>
            <remarks>This method retrieves the main shader, iterates through its properties, and logs each
            property's name and type to the debug console. It is intended for debugging purposes to inspect the shader's
            properties.</remarks>
        </member>
        <member name="M:AVS.Util.Shaders.LogAllShadersInUseAnywhere">
            <summary>
            Logs the names of all unique shaders currently in use across all loaded materials in the application.
            </summary>
            <remarks>This method scans all materials currently loaded in memory and identifies the shaders
            they reference. It then logs the names of these shaders to the Unity console. This can be useful for
            debugging or analyzing which shaders are actively being used in the application.</remarks>
        </member>
        <member name="M:AVS.Util.Shaders.ApplyMainShaderRecursively(UnityEngine.GameObject)">
            <summary>
            Applies the main shader to all materials of <see cref="T:UnityEngine.MeshRenderer"/> components  in the specified <see
            cref="T:UnityEngine.GameObject"/> and its children.
            </summary>
            <remarks>This method recursively traverses the hierarchy of the specified <see
            cref="T:UnityEngine.GameObject"/>  and applies the main shader to all materials of any <see cref="T:UnityEngine.MeshRenderer"/>
            components found. Hidden or inactive objects are also included in the traversal.</remarks>
            <param name="go">The root <see cref="T:UnityEngine.GameObject"/> whose child <see cref="T:UnityEngine.MeshRenderer"/> components will have their
            materials updated.</param>
        </member>
        <member name="M:AVS.Util.Shaders.EnableSimpleEmission(UnityEngine.Material,System.Single,System.Single)">
            <summary>
            Enables emission for the specified material using predefined day and night emission values.
            </summary>
            <remarks>This method configures the material to use emission under the "marmosetuber" shader. 
            It sets the emission intensity for both day and night modes and enables the necessary shader keywords. Note
            that not all materials may behave as expected with this configuration, particularly if they do not  require
            a specular map, which could result in unintended visual effects such as increased brightness or
            shininess.</remarks>
            <param name="mat">The material for which emission will be enabled. Cannot be <see langword="null"/>.</param>
            <param name="dayAmount">The emission intensity to apply during the day. The default value is 1.0.</param>
            <param name="nightAmount">The emission intensity to apply during the night. The default value is 1.0.</param>
        </member>
        <member name="P:AVS.VehicleParts.Helm.IsSeated">
            <summary>
            True if the player is expected to be seated at this helm.
            </summary>
        </member>
        <member name="P:AVS.VehicleParts.Helm.Root">
            <summary>
            The helm root object
            </summary>
        </member>
        <member name="P:AVS.VehicleParts.Helm.PlayerControlLocation">
            <summary>
            The location at which the player is inserted when entering helm control
            </summary>
        </member>
        <member name="P:AVS.VehicleParts.Helm.ExitLocation">
            <summary>
            The exit location when the player exits the helm. Can be null
            </summary>
        </member>
        <member name="P:AVS.VehicleParts.Helm.LeftHandTarget">
            <summary>
            This is what the player's left hand will 'grab' while you pilot.
            Can be null if the vehicle does not have a steering wheel.
            </summary>
        </member>
        <member name="P:AVS.VehicleParts.Helm.RightHandTarget">
            <summary>
            This is what the player's right hand will 'grab' while you pilot.
            Can be null if the vehicle does not have a steering wheel.
            </summary>
        </member>
        <member name="M:AVS.VehicleParts.Helm.#ctor(UnityEngine.GameObject,UnityEngine.GameObject,UnityEngine.Transform,System.Boolean,UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Constructs a new instance of <see cref="T:AVS.VehicleParts.Helm"/>.
            </summary>
            <param name="root">The helm root object</param>
            <param name="playerControlLocation">The location at which the player is inserted when entering helm control</param>
            <param name="exitLocation"></param>
            <param name="isSeated"></param>
            <param name="steeringWheelLeftHandTarget"></param>
            <param name="steeringWheelRightHandTarget"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:AVS.VehicleParts.Helm.CalculatedExitLocation">
            <summary>
            Walking position, just behind the chair.
            Todo: Should the configured exit location be used instead?
            </summary>
        </member>
        <member name="P:AVS.VehicleParts.Helm.AnyExitLocation">
            <summary>
            Gets the exit location for the player when exiting the vehicle
            or calculates one.
            </summary>
        </member>
        <member name="P:AVS.VehicleParts.VehicleHatchDefinition.ExitLocation">
            <summary>
            The exit transform when exiting the vehicle through this hatch.
            Currently, the rotation is ignored.
            </summary>
        </member>
        <member name="P:AVS.VehicleParts.VehicleHatchDefinition.SurfaceExitLocation">
            <summary>
            The exit transform to use instead of <see cref="P:AVS.VehicleParts.VehicleHatchDefinition.ExitLocation"/> when the submarine
            is close to the water surface while exiting.
            </summary>
        </member>
        <member name="T:AVS.VehicleParts.VehicleStorage">
            <summary>
            Represents a storage unit within a vehicle, defined by its container and grid dimensions.
            </summary>
            <remarks>The <see cref="T:AVS.VehicleParts.VehicleStorage"/> struct encapsulates the storage characteristics of a
            vehicle, including its physical container, dimensions, and display properties. It is immutable and ensures that
            the storage dimensions are valid upon initialization.</remarks>
        </member>
        <member name="P:AVS.VehicleParts.VehicleStorage.Container">
            <summary>
            The game object that represents the storage.
            </summary>
        </member>
        <member name="P:AVS.VehicleParts.VehicleStorage.Height">
            <summary>
            The grid height of the total storage capacity.
            </summary>
        </member>
        <member name="P:AVS.VehicleParts.VehicleStorage.Width">
            <summary>
            The grid width of the total storage capacity.
            </summary>
        </member>
        <member name="P:AVS.VehicleParts.VehicleStorage.DisplayName">
            <summary>
            The display text for the vehicle storage, which can be localized.
            </summary>
        </member>
        <member name="M:AVS.VehicleParts.VehicleStorage.#ctor(UnityEngine.GameObject,System.Nullable{AVS.Localization.MaybeTranslate},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.VehicleParts.VehicleStorage"/> class with the specified container, display
            name, and dimensions.
            </summary>
            <param name="container">The <see cref="T:UnityEngine.GameObject"/> that represents the storage container. This parameter cannot be <see
            langword="null"/>.</param>
            <param name="displayName">The display name for the vehicle storage. This can be <see langword="null"/> if no display name is required.</param>
            <param name="height">The height of the vehicle storage. Must be greater than zero.</param>
            <param name="width">The width of the vehicle storage. Must be greater than zero.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="container"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="height"/> or <paramref name="width"/> is less than or equal to zero.</exception>
        </member>
        <member name="P:AVS.VehicleParts.VehicleBattery.BatterySlot">
            <summary>
            Primary access point for the battery slot.
            </summary>
        </member>
        <member name="P:AVS.VehicleParts.VehicleBattery.BatteryProxy">
            <summary>
            Model for the battery. Can be null
            </summary>
        </member>
        <member name="T:AVS.PositiveValueThresholdTracker">
            <summary>
            Tracker for statuses where high values indicate worse status.
            </summary>
        </member>
        <member name="T:AVS.NegativeValueThresholdTracker">
            <summary>
            Tracker for statuses where lower values indicate worse status.
            </summary>
        </member>
        <member name="T:AVS.VehicleComponents.MaterialReactorConversionDeclaration">
            <summary>
            Represents a declaration of input parameters for a material reactor, including the input and output types and
            energy specifications.
            </summary>
            <remarks>This structure is used to define the characteristics of a material reactor's input,
            specifying the type of material used, the total energy it provides, the rate of energy release, and the
            resulting output type.</remarks>
        </member>
        <member name="P:AVS.VehicleComponents.MaterialReactorConversionDeclaration.InputTechType">
            <summary>
            The tech type of the material being consumed by the reactor.
            Each input tech type must be unique within the reactor's configuration.
            </summary>
        </member>
        <member name="P:AVS.VehicleComponents.MaterialReactorConversionDeclaration.TotalEnergy">
            <summary>
            The total amount of energy that can be generated from the input material.
            </summary>
        </member>
        <member name="P:AVS.VehicleComponents.MaterialReactorConversionDeclaration.EnergyPerSecond">
            <summary>
            Gets the amount of energy produced per second when consuming the input material.
            All materials in the reactor can be processed simultaneously,
            so the effective energy production rate is at most the sum of all materials'
            energy per second.
            </summary>
        </member>
        <member name="P:AVS.VehicleComponents.MaterialReactorConversionDeclaration.OutputTechType">
            <summary>
            Waste material produced by the reactor after processing the input material.
            <see cref="F:TechType.None" /> if no waste is produced.
            </summary>
        </member>
        <member name="M:AVS.VehicleComponents.MaterialReactorConversionDeclaration.#ctor(TechType,System.Single,System.Single,TechType)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.VehicleComponents.MaterialReactorConversionDeclaration"/> struct with the specified parameters.
            </summary>
        </member>
        <member name="T:AVS.VehicleComponents.MaterialReactor">
            <summary>
            Represents a reactor that processes materials to generate energy within a vehicle.
            </summary>
            <remarks>The <see cref="T:AVS.VehicleComponents.MaterialReactor"/> is designed to be attached to a vehicle and is responsible
            for converting materials into energy. It manages an internal container for materials, processes them according
            to specified energy values, and interacts with the vehicle's energy system. The reactor can display a whitelist
            of processable materials and their energy potentials, and it supports localization for interaction
            text.</remarks>
        </member>
        <member name="F:AVS.VehicleComponents.MaterialReactor.isGeneratingEnergy">
            <summary>
            Set to true if the reactor is currently processing materials and generating energy.
            If the local batteries are full, this will be false even if the reactor has materials
            to process.
            </summary>
        </member>
        <member name="F:AVS.VehicleComponents.MaterialReactor.localizeInteractText">
            <summary>
            If true, the <see cref="!:interactText"/> will be localized.
            </summary>
        </member>
        <member name="F:AVS.VehicleComponents.MaterialReactor.canViewWhitelist">
            <summary>
            True if the PDA should show the whitelist of materials that can be processed by this reactor
            when the user right-clicks on it.
            </summary>
        </member>
        <member name="F:AVS.VehicleComponents.MaterialReactor.listPotentials">
            <summary>
            If true, the reactor will list the potential energy of each material in the whitelist.
            Not effective if <see cref="F:AVS.VehicleComponents.MaterialReactor.canViewWhitelist"/> is false.
            </summary>
        </member>
        <member name="F:AVS.VehicleComponents.MaterialReactor.onClosePDAAction">
            <summary>
            Action to execute when the PDA is closed after being opened from this reactor.
            </summary>
        </member>
        <member name="F:AVS.VehicleComponents.MaterialReactor.onItemsAdded">
            <summary>
            Action to execute when items were added to the local reactor.
            The first argument is the item that was added,
            the second argument is the total number of items in the reactor after the addition.
            </summary>
        </member>
        <member name="M:AVS.VehicleComponents.MaterialReactor.Initialize(AVS.BaseVehicle.AvsVehicle,System.Int32,System.Int32,AVS.Localization.MaybeTranslate,System.Single,System.Collections.Generic.List{AVS.VehicleComponents.MaterialReactorConversionDeclaration})">
            <summary>
            Initializes the MaterialReactor with the specified vehicle, container size, label, total energy capacity, and material data.
            </summary>
            <param name="avsVehicle">The vehicle to which this reactor is attached. Must not be null.</param>
            <param name="height">The height of the reactor's internal container grid. Must be positive.</param>
            <param name="width">The width of the reactor's internal container grid. Must be positive.</param>
            <param name="label">The label for the reactor's container UI.</param>
            <param name="totalCapacity">The total energy capacity of the reactor. Must be non-negative.</param>
            <param name="iMaterialData">A list of material data specifying which materials can be processed, their energy values, and output types. Must not be empty and all entries must have positive energy values.</param>
            <remarks>
            This method sets up the internal ItemsContainer, configures allowed materials, and initializes the energy mixin and battery.
            It also ensures that only one MaterialReactor is attached to a given vehicle at a time.
            An unintialized MaterialReactor will log an error and destroy itself on the first update cycle.
            </remarks>
        </member>
        <member name="M:AVS.VehicleComponents.MaterialReactor.GetFuelPotential">
            <summary>
            Computes the total energy potential of all materials in the reactor.
            </summary>
        </member>
        <member name="M:AVS.VehicleComponents.MaterialReactor.GetBioReactorData(System.Single)">
            <summary>
            Gets consumption data for bio reactors.
            </summary>
            <param name="energyPerSecond">The energy produced per second by each added material.</param>
        </member>
        <member name="M:AVS.VehicleComponents.MaterialReactor.GetNuclearReactorData(System.Single)">
            <summary>
            Gets consumption data for nuclear reactors.
            The returned list contains a single entry for the reactor rod.
            </summary>
            <param name="energyPerSecond">The energy produced per second by each added reactor rod.</param>
        </member>
        <member name="T:AVS.VehicleComponents.VehicleColor">
            <summary>
            A full color definition, including HSB (Hue, Saturation, Brightness) values and the corresponding RGB color.
            </summary>
        </member>
        <member name="P:AVS.VehicleComponents.VehicleColor.RGB">
            <summary>
            The applied RGB color.
            </summary>
        </member>
        <member name="P:AVS.VehicleComponents.VehicleColor.HSB">
            <summary>
            The HSB (Hue, Saturation, Brightness) representation of the color.
            Zero if not supplied. ASV does nothing with this value.
            </summary>
        </member>
        <member name="P:AVS.VehicleComponents.VehicleColor.Default">
            <summary>
            Default vehicle color.
            </summary>
        </member>
        <member name="M:AVS.VehicleComponents.VehicleColor.#ctor(UnityEngine.Color,UnityEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.VehicleComponents.VehicleColor"/> class with the specified HSB values and
            corresponding color.
            </summary>
            <param name="hsb">A <see cref="T:UnityEngine.Vector3"/> representing the hue, saturation, and brightness (HSB) values of the color. Optional.</param>
            <param name="rgb">A <see cref="P:AVS.VehicleComponents.VehicleColor.RGB"/> representing the corresponding color in the RGB color space.</param>
        </member>
        <member name="M:AVS.VehicleComponents.VehicleColor.Equals(AVS.VehicleComponents.VehicleColor)">
            <summary>
            Determines whether the specified <see cref="T:AVS.VehicleComponents.VehicleColor"/> is equal to the current <see cref="T:AVS.VehicleComponents.VehicleColor"/>.
            </summary>
            <param name="other">The <see cref="T:AVS.VehicleComponents.VehicleColor"/> to compare with the current <see cref="T:AVS.VehicleComponents.VehicleColor"/>.</param>
            <returns>true if the specified <see cref="T:AVS.VehicleComponents.VehicleColor"/> is equal to the current <see cref="T:AVS.VehicleComponents.VehicleColor"/>; otherwise, false.</returns>
        </member>
        <member name="M:AVS.VehicleComponents.VehicleColor.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current <see cref="T:AVS.VehicleComponents.VehicleColor"/>.
            </summary>
            <param name="obj">The object to compare with the current <see cref="T:AVS.VehicleComponents.VehicleColor"/>.</param>
            <returns>true if the specified object is equal to the current <see cref="T:AVS.VehicleComponents.VehicleColor"/>; otherwise, false.</returns>
        </member>
        <member name="M:AVS.VehicleComponents.VehicleColor.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:AVS.VehicleComponents.VehicleColor"/> type.
            </summary>
            <returns>A hash code for the current <see cref="T:AVS.VehicleComponents.VehicleColor"/>.</returns>
        </member>
        <member name="M:AVS.VehicleComponents.VehicleColor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleComponents.VehicleColor.op_Equality(AVS.VehicleComponents.VehicleColor,AVS.VehicleComponents.VehicleColor)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleComponents.VehicleColor.op_Inequality(AVS.VehicleComponents.VehicleColor,AVS.VehicleComponents.VehicleColor)">
            <inheritdoc/>
        </member>
        <member name="T:AVS.PilotingTrigger">
            <summary>
            Hand target added to the pilot seat
            </summary>
        </member>
        <member name="F:AVS.PilotingTrigger.mv">
            <summary>
            The owning vehicle. Assigned during instantiation
            </summary>
        </member>
        <member name="F:AVS.PilotingTrigger.helmIndex">
            <summary>
            The index of the seat this trigger was attached to
            </summary>
        </member>
        <member name="T:AVS.VoiceLine">
            <summary>
            Represents a voice line consisting of one or more audio clips, along with a text translation key and priority
            level.
            </summary>
            <remarks>A <see cref="T:AVS.VoiceLine"/> can either contain a single audio clip or a collection of audio
            clips to be played in sequence (unless interrupted).
            It is typically used to represent a line of dialogue or sound effect in an application, with an
            associated translation key for localization and an optional priority to determine playback order or
            importance.</remarks>
        </member>
        <member name="P:AVS.VoiceLine.Clip">
            <summary>
            The single audio clip of this voice line.
            If multiple clips are provided, this will be null.
            </summary>
        </member>
        <member name="P:AVS.VoiceLine.Clips">
            <summary>
            Multiple audio clips of this voice line.
            If a single clip is provided, this will be null.
            </summary>
        </member>
        <member name="P:AVS.VoiceLine.Gaps">
            <summary>
            Time in seconds between each two clips in <see cref="P:AVS.VoiceLine.Clips"/>.
            If null or with less elements than <see cref="P:AVS.VoiceLine.Clips"/>(-1), trailing gaps will be 0.
            </summary>
        </member>
        <member name="P:AVS.VoiceLine.TextTranslationKey">
            <summary>
            The translation key for the text associated with this voice line.
            Null if no subtitle should be displayed (even if configured).
            Effective only if <see cref="!:VehicleConfiguration.ShowVoiceSubtitles"/> is true.
            </summary>
        </member>
        <member name="P:AVS.VoiceLine.Priority">
            <summary>
            The queue priority of this voice line.
            Voice lines of higher priority will interrupt queued clips of lower priority.
            </summary>
        </member>
        <member name="P:AVS.VoiceLine.Volume">
            <summary>
            Individual volume of this voice line, further modified by <see cref="!:VehicleConfiguration.VoiceSoundVolume"/>,
            </summary>
        </member>
        <member name="M:AVS.VoiceLine.#ctor(UnityEngine.AudioClip,System.String,System.Int32)">
            <summary>
            Constructs a new <see cref="T:AVS.VoiceLine"/> with a single audio clip, a text translation key, and an optional priority.
            </summary>
            <param name="clip">Clip to play</param>
            <param name="textTranslationKey">Text translation key of this line. Null if no subtitle of this line should ever be shown</param>
            <param name="priority">Interruption priority</param>
        </member>
        <member name="M:AVS.VoiceLine.#ctor(System.Collections.Generic.IReadOnlyList{UnityEngine.AudioClip},System.Collections.Generic.IReadOnlyList{System.Single},System.String,System.Int32)">
            <summary>
            Constructs a new <see cref="T:AVS.VoiceLine"/> with multiple audio clips, a text translation key, and an optional priority.
            </summary>
            <param name="clips">Clips to play in sequence. While a single playing clip cannot be interrupted, subsequent clips can</param>
            <param name="textTranslationKey">Text translation key of this line</param>
            <param name="priority">Interruption priority</param>
            <param name="gaps">Time in seconds between each two clips in <paramref name="clips"/>. Should have one less element than <paramref name="clips"/> or be null. </param>
        </member>
        <member name="T:AVS.VoiceQueue">
            <summary>
            Manages the playback of voice lines for a vehicle, including queuing, speaker setup, and audio playback control.
            </summary>
            <remarks>The <see cref="T:AVS.VoiceQueue"/> class is responsible for handling voice line playback for
            vehicles, such as submarines or submersibles. It manages a one-element-queue of voice lines, controls audio sources attached
            to the vehicle, and ensures proper playback behavior based on the vehicle's state (e.g., whether it is under
            command or has sufficient energy). This class also integrates with the game's subtitle system to display
            subtitles for voice lines when enabled.</remarks>
        </member>
        <member name="M:AVS.VoiceQueue.PauseSpeakers(System.Boolean)">
            <summary>
            Pauses or unpauses all speakers in this voice queue.
            </summary>
            <param name="pause">If true, pause all speakers, otherwise unpause them</param>
        </member>
        <member name="M:AVS.VoiceQueue.Awake">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VoiceQueue.Start">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VoiceQueue.Update">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VoiceQueue.Play(AVS.VoiceLine)">
            <summary>
            Schedules the given voice line to be player if none is currently playing or if the queued line has a higher priority than the current one.
            Otherwise, the line is not played and discarded.
            </summary>
            <param name="line">Line to play</param>
        </member>
        <member name="T:AVS.VehicleTypes.Skimmer">
            <summary>
            Incomplete surface boat class.
            </summary>
        </member>
        <member name="M:AVS.VehicleTypes.Skimmer.#ctor(AVS.Configuration.VehicleConfiguration)">
            <summary>
            Constructs the vehicle with the given configuration.
            </summary>
            <param name="config">Vehicle configuration. Must not be null</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:AVS.VehicleTypes.Skimmer.GetSkimmerComposition">
            <summary>
            Retrieves the composition of the skimmer.
            Executed once either during <see cref="M:AVS.BaseVehicle.AvsVehicle.Awake"/> or vehicle registration, whichever comes first.
            </summary>
        </member>
        <member name="M:AVS.VehicleTypes.Skimmer.GetVehicleComposition">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleTypes.Skimmer.DoExitRoutines">
            <inheritdoc/>
        </member>
        <member name="P:AVS.VehicleTypes.Submarine.ThetherChecksSuspended">
            <summary>
            Tether checks are suspended until the next time the player enters or exits helm/the vehicle.
            </summary>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.#ctor(AVS.Configuration.VehicleConfiguration)">
            <summary>
            Constructor for Submarine.
            </summary>
            <param name="config">Configuration to use</param>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.GetSubmarineComposition">
            <summary>
            Retrieves the composition for this submarine.
            Executed once during Awake.
            </summary>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.GetVehicleComposition">
            <inheritdoc />
        </member>
        <member name="P:AVS.VehicleTypes.Submarine.Com">
            <summary>
            The composition of this submarine.
            </summary>
        </member>
        <member name="P:AVS.VehicleTypes.Submarine.Floodlights">
            <summary>
            Flood light controller created during Awake.
            </summary>
        </member>
        <member name="P:AVS.VehicleTypes.Submarine.Interiorlights">
            <summary>
            Interior light controller created during Awake.
            </summary>
        </member>
        <member name="P:AVS.VehicleTypes.Submarine.Navlights">
            <summary>
            Nav light controller created during Awake.
            </summary>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.CreateDataBlocks(System.Action{AVS.SaveLoad.DataBlock})">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.OnDataLoaded">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.GetLoadedHelm">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.Awake">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.Start">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.IsPlayerInside">
            <summary>
            True if the player is inside the submarine, false otherwise.
            </summary>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.IsPlayerPiloting">
            <summary>
            Gets a value indicating whether the player is currently piloting the vehicle.
            </summary>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.GetMainHelm">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.OnBeginHelmControl(AVS.VehicleParts.Helm)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.OnEndHelmControl">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.OnPlayerEntry">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.OnPlayerExit">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.SubConstructionBeginning">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.SubConstructionComplete">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.OnKill">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.DoExitRoutines">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.RegisterTetherEntry(AVS.TetherSource)">
            <summary>
            Registers that the player was close enough to a tether source to be considered inside the sub.
            </summary>
            <param name="tetherSource">Tether source that triggered the event</param>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.SuspendTetherChecks">
            <summary>
            Suspends tether checks until the character next enters or exits helm/the vehicle
            </summary>
        </member>
        <member name="T:AVS.VehicleTypes.Submersible">
            <summary>
            Non-walkable vehicle type that can be piloted underwater.
            </summary>
        </member>
        <member name="M:AVS.VehicleTypes.Submersible.#ctor(AVS.Configuration.VehicleConfiguration)">
            <summary>
            Constructs the vehicle with the given configuration.
            </summary>
            <param name="config">Vehicle configuration. Must not be null</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:AVS.VehicleTypes.Submersible.GetSubmersibleComposition">
            <summary>
            Retrieves the composition of the submarine.
            Executed once either during <see cref="M:AVS.BaseVehicle.AvsVehicle.Awake"/> or vehicle registration, whichever comes first.
            </summary>
        </member>
        <member name="M:AVS.VehicleTypes.Submersible.GetVehicleComposition">
            <inheritdoc/>
        </member>
        <member name="P:AVS.VehicleTypes.Submersible.Com">
            <summary>
            Resolved vehicle composition.
            If accessed before <see cref="M:AVS.BaseVehicle.AvsVehicle.Awake"/> (or vehicle registration), InvalidOperationException will be thrown.
            </summary>
        </member>
        <member name="M:AVS.VehicleTypes.Submersible.DoExitRoutines">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleTypes.Submersible.GetMainHelm">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleTypes.Submersible.EnterHelmControl">
            <summary>
            Begins piloting the submersible from the given seat.
            </summary>
        </member>
        <member name="M:AVS.VehicleTypes.Submersible.OnEndHelmControl">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleTypes.Submersible.OnPlayerEntry">
            <inheritdoc/>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Indicates that a method or property may return a null value (elements without this annotation never return null)
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute"/> class.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the annotated parameter will be null depending on the return value.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
    </members>
</doc>
