<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AVS</name>
    </assembly>
    <members>
        <member name="T:AvsUtils">
            <summary>
            Various utility methods for AVS.
            </summary>
        </member>
        <member name="M:AvsUtils.FindVehicleInParents(UnityEngine.Transform,Vehicle@,System.Collections.Generic.List{UnityEngine.Transform})">
            <summary>
            Determines whether the specified transform or any of its ancestors is the currently mounted vehicle.
            </summary>
            <remarks>This method recursively traverses the transform hierarchy to determine if any
            ancestor is the player's currently mounted vehicle. If the specified transform is <see langword="null"/>,
            the method returns <see langword="false"/>.</remarks>
            <param name="current">The transform to check, typically representing a game object in the hierarchy.</param>
            <param name="vehicle">When this method returns, contains the <see cref="T:Vehicle"/> component if found. Null if the method returns false</param>
            <param name="checkedAncestry">A list of all transforms visited by the recursion.</param>
            <returns><see langword="true"/> if the specified transform or one of its ancestors is the vehicle currently mounted
            by the player; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:AvsUtils.EvaluateDepthModules(AVS.UpgradeModules.AddActionParams)">
            <summary>
            Evaluates the depth upgrade modules installed on the specified vehicle and adjusts its crush depth
            accordingly.
            </summary>
            <remarks>This method checks the installed depth upgrade modules on the provided vehicle and
            determines the highest level of depth module present. Based on the detected module level, it calculates the
            additional crush depth and applies it to the vehicle. If the vehicle is not compatible with depth upgrades,
            a message is displayed to the user.</remarks>
            <param name="param">The parameters containing the vehicle to evaluate and its associated data.</param>
        </member>
        <member name="M:AvsUtils.AddEncyclopediaEntry(AVS.RootModController,PDAEncyclopedia.EntryData)">
            <summary>
            Adds a new entry to the PDA Encyclopedia or updates an existing one if the key already exists.
            </summary>
            <remarks>This method ensures that the entry is added or updated only after the PDA
            Encyclopedia mapping is initialized.  If an entry with the same key already exists, it will be replaced with
            the provided data.</remarks>
            <param name="rmc">The <see cref="T:AVS.RootModController"/> instance owning the process.</param>
            <param name="data">The encyclopedia entry data to add or update. The <see cref="F:PDAEncyclopedia.EntryData.key"/> property must
            be unique and non-null.</param>
        </member>
        <member name="T:AVS.AvsVehicleManager">
            <summary>
            Provides management functions for AVS vehicles, including registration, enrollment, and loading.
            </summary>
        </member>
        <member name="P:AVS.AvsVehicleManager.VehiclesInPlay">
            <summary>
            List of all AVS vehicles currently in play.
            </summary>
        </member>
        <member name="P:AVS.AvsVehicleManager.MvPings">
            <summary>
            List of all registered ping instances for vehicles.
            </summary>
        </member>
        <member name="P:AVS.AvsVehicleManager.VehicleTypes">
            <summary>
            List of all registered vehicle types.
            </summary>
        </member>
        <member name="M:AVS.AvsVehicleManager.RegisterPingType(AVS.BaseVehicle.AvsVehicle,PingType,System.Boolean)">
            <summary>
            Registers a new <see cref="T:PingType"/> for a vehicle, ensuring it is unique and above the minimum value.
            Optionally logs the registration process.
            </summary>
            <param name="v">The vehicle for which the ping type is being registered</param>
            <param name="pt">The initial ping type to register.</param>
            <param name="verbose">If true, logs detailed registration steps.</param>
            <returns>The registered, unique ping type.</returns>
        </member>
        <member name="M:AVS.AvsVehicleManager.EnrollVehicle(AVS.RootModController,AVS.BaseVehicle.AvsVehicle)">
            <summary>
            Enrolls a vehicle into the <see cref="P:AVS.AvsVehicleManager.VehiclesInPlay"/> list and starts loading it if constructed.
            </summary>
            <param name="av">The vehicle to enroll.</param>
            <param name="rmc">The root mod controller instance used to start coroutines.</param>
        </member>
        <member name="M:AVS.AvsVehicleManager.DeregisterVehicle(AVS.BaseVehicle.AvsVehicle)">
            <summary>
            Removes a vehicle from the <see cref="P:AVS.AvsVehicleManager.VehiclesInPlay"/> list.
            </summary>
            <param name="av">The vehicle to deregister.</param>
        </member>
        <member name="M:AVS.AvsVehicleManager.LoadVehicle(AVS.Log.SmartLog,AVS.BaseVehicle.AvsVehicle)">
            <summary>
            Coroutine that waits for the world to be ready, then calls <see cref="M:AVS.BaseVehicle.AvsVehicle.OnFinishedLoading"/> on the vehicle.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="av">The vehicle to load.</param>
            <returns>Coroutine enumerator.</returns>
        </member>
        <member name="T:AVS.Admin.ExternalVehicleConfig`1">
            <summary>
            Represents a manager for additional external configurations to be applied to vehicles.
            </summary>
            <typeparam name="T">The type of the configuration values managed by this instance.</typeparam>
        </member>
        <member name="M:AVS.Admin.ExternalVehicleConfig`1.GetValue(System.String)">
            <summary>
            Retrieves the value of the external configuration entry with the specified name.
            </summary>
            <param name="name">The name of the configuration entry to retrieve.</param>
            <returns>The value of the configuration entry associated with the specified name.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the specified <paramref name="name"/> does not exist in the external configuration.</exception>
        </member>
        <member name="M:AVS.Admin.ExternalVehicleConfig`1.GetAvsVehicleConfig(System.String)">
            <summary>
            Retrieves the external vehicle configuration for a specified mod vehicle by its name.
            </summary>
            <remarks>This method searches for a mod vehicle by name within the available vehicle types. If
            no match is found, or if multiple matches are found, an exception is thrown. If the configuration for the
            specified mod vehicle does not already exist, it is created and added to the internal collection.</remarks>
            <param name="vehicleName">The name of the mod vehicle to retrieve the configuration for. The comparison is case-insensitive.</param>
            <returns>An <see cref="T:AVS.Admin.ExternalVehicleConfig`1"/> object representing the configuration of the specified mod
            vehicle.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="vehicleName"/> does not match any mod vehicle, or if it matches multiple mod
            vehicles.</exception>
        </member>
        <member name="M:AVS.Admin.ExternalVehicleConfig`1.GetSeamothConfig">
            <summary>
            Retrieves the configuration for the Seamoth vehicle.
            </summary>
            <remarks>This method ensures that the Seamoth configuration is initialized before returning
            it.  Subsequent calls will return the same configuration instance.</remarks>
            <returns>An instance of <see cref="T:AVS.Admin.ExternalVehicleConfig`1"/> representing the Seamoth's configuration.  If the
            configuration has not been initialized, it will be created and returned.</returns>
        </member>
        <member name="M:AVS.Admin.ExternalVehicleConfig`1.GetPrawnConfig">
            <summary>
            Retrieves the configuration for the Prawn.
            </summary>
            <remarks>If the configuration has not been initialized, this method creates a new instance of 
            <see cref="T:AVS.Admin.ExternalVehicleConfig`1"/> with the name set to the value of  <see
            cref="F:AVS.Admin.ConfigRegistrar.PrawnName"/>.</remarks>
            <returns>An instance of <see cref="T:AVS.Admin.ExternalVehicleConfig`1"/> representing the Prawn configuration.</returns>
        </member>
        <member name="M:AVS.Admin.ExternalVehicleConfig`1.GetCyclopsConfig">
            <summary>
            Retrieves the Cyclops configuration for the specified config type.
            </summary>
            <remarks>This method ensures that the Cyclops configuration is initialized before returning
            it. Subsequent calls will return the same configuration instance.</remarks>
            <returns>An instance of <see cref="T:AVS.Admin.ExternalVehicleConfig`1"/> representing the Cyclops configuration.  If the
            configuration has not been initialized, it will be created and returned.</returns>
        </member>
        <member name="T:AVS.Admin.ConfigRegistrar">
            <summary>
            Provides methods for registering configuration options for various vehicles in the game.
            </summary>
            <remarks>This class includes functionality to register configuration options for all modded vehicles
            or specific vehicles, such as the Seamoth, Prawn Suit, and Cyclops. It supports configuration types of <see
            langword="bool"/>, <see langword="float"/>,  and <see cref="T:BepInEx.Configuration.KeyboardShortcut"/>. Configuration changes can
            trigger optional callbacks for custom handling.</remarks>
        </member>
        <member name="M:AVS.Admin.ConfigRegistrar.LogAllVehicleNames(AVS.RootModController)">
            <summary>
            Logs the names of all vehicles currently present in the game.
            </summary>
            <remarks>This method initiates an asynchronous operation to retrieve and log vehicle names. 
            It does not block the calling thread and relies on the game's coroutine system to execute.</remarks>
        </member>
        <member name="M:AVS.Admin.ConfigRegistrar.RegisterForAllAvsVehicles``1(AVS.RootModController,System.String,BepInEx.Configuration.ConfigDescription,``0,System.Action{TechType,``0},BepInEx.Configuration.ConfigFile)">
            <summary>
            Registers a configuration option for all modded vehicles in the game.
            </summary>
            <typeparam name="T">The type of the configuration value.</typeparam>
            <param name="rmc">The owning root mod controller.</param>
            <param name="name">The name of the configuration option.</param>
            <param name="description">A description of the configuration option, including its purpose and usage.</param>
            <param name="defaultValue">The default value for the configuration option.</param>
            <param name="OnChange">An optional callback invoked when the configuration value changes. The callback receives the <see
            cref="T:TechType"/> of the vehicle and the new value.</param>
            <param name="configFile">An optional configuration file to store the setting. If not provided, a default configuration file is used.</param>
        </member>
        <member name="M:AVS.Admin.ConfigRegistrar.RegisterForAvsVehicle``1(AVS.RootModController,System.String,System.String,BepInEx.Configuration.ConfigDescription,``0,System.Action{TechType,``0},BepInEx.Configuration.ConfigFile)">
            <summary>
            Registers a configuration option for a specific modded vehicle.
            </summary>
            <remarks>This method initiates the registration process asynchronously. The configuration
            option will be associated with the specified modded vehicle and can be accessed or modified through the
            configuration system.</remarks>
            <typeparam name="T">The type of the configuration value. Must be a type supported by the configuration system.</typeparam>
            <param name="rmc">The owning root mod controller.</param>
            <param name="vehicleName">The name of the modded vehicle for which the configuration option is being registered.</param>
            <param name="name">The name of the configuration option.</param>
            <param name="description">A description of the configuration option, including details such as its purpose or valid range.</param>
            <param name="defaultValue">The default value for the configuration option.</param>
            <param name="OnChange">An optional callback that is invoked when the configuration value changes. The callback receives the <see
            cref="T:TechType"/> of the vehicle and the new value of the configuration option.</param>
            <param name="configFile">An optional <see cref="T:BepInEx.Configuration.ConfigFile"/> instance to store the configuration option. If not provided, the
            default configuration file is used.</param>
        </member>
        <member name="M:AVS.Admin.ConfigRegistrar.RegisterForSeamoth``1(AVS.RootModController,System.String,BepInEx.Configuration.ConfigDescription,``0,System.Action{``0},BepInEx.Configuration.ConfigFile)">
            <summary>
            Registers a configuration option for the Seamoth vehicle.
            </summary>
            <remarks>This method initiates the registration process asynchronously. The configuration
            option will be associated with the Seamoth vehicle and can be used to customize its behavior or
            settings.</remarks>
            <typeparam name="T">The type of the configuration value.</typeparam>
            <param name="rmc">The root mod controller instance used to start the coroutine for registration.</param>
            <param name="name">The unique name of the configuration option.</param>
            <param name="description">A description of the configuration option, including its purpose and constraints.</param>
            <param name="defaultValue">The default value for the configuration option.</param>
            <param name="onChange">An optional callback that is invoked when the configuration value changes. The new value is passed as a
            parameter.</param>
            <param name="configFile">An optional configuration file to store the setting. If not provided, a default configuration file is used.</param>
        </member>
        <member name="M:AVS.Admin.ConfigRegistrar.RegisterForPrawn``1(AVS.RootModController,System.String,BepInEx.Configuration.ConfigDescription,``0,System.Action{``0},BepInEx.Configuration.ConfigFile)">
            <summary>
            Registers a configuration option for the Prawn with the specified name, description, and default
            value.
            </summary>
            <remarks>This method starts a coroutine to handle the registration process asynchronously. The
            registration ensures that the configuration option is properly integrated with the Prawn and its
            associated systems.</remarks>
            <typeparam name="T">The type of the configuration value. Must be a type supported by the configuration system.</typeparam>
            <param name="rmc">The owning root mod controller.</param>
            <param name="name">The unique name of the configuration option. This name is used to identify the option.</param>
            <param name="description">A description of the configuration option, including details such as its purpose or valid range of values.</param>
            <param name="defaultValue">The default value for the configuration option. This value is used if no other value is provided.</param>
            <param name="onChange">An optional callback that is invoked whenever the configuration value changes. The new value is passed as a
            parameter to the callback.</param>
            <param name="configFile">An optional configuration file object where the configuration option will be stored. If not provided, a
            default configuration file is used.</param>
        </member>
        <member name="M:AVS.Admin.ConfigRegistrar.RegisterForCyclops``1(AVS.RootModController,System.String,BepInEx.Configuration.ConfigDescription,``0,System.Action{``0},BepInEx.Configuration.ConfigFile)">
            <summary>
            Registers a configuration option for the Cyclops submarine with the specified name, description, and default
            value.
            </summary>
            <remarks>This method starts a coroutine to handle the registration process asynchronously. The
            configuration option will be available for use after the coroutine completes.</remarks>
            <typeparam name="T">The type of the configuration value.</typeparam>
            <param name="rmc">The owning root mod controller.</param>
            <param name="name">The unique name of the configuration option. This name is used to identify the option.</param>
            <param name="description">A description of the configuration option, including details such as its purpose or valid range.</param>
            <param name="defaultValue">The default value for the configuration option.</param>
            <param name="OnChange">An optional callback that is invoked whenever the configuration value changes. The new value is passed as a
            parameter to the callback.</param>
            <param name="configFile">An optional configuration file where the option will be stored. If not provided, a default configuration
            file is used.</param>
        </member>
        <member name="T:AVS.Admin.GameObjectManager`1">
            <summary>
            Manages a collection of game objects of a specified type, providing functionality for registration,
            deregistration, filtering, and proximity-based queries.
            </summary>
            <remarks>This class is designed to manage game objects of a specific type, allowing for operations 
            such as finding the nearest object to a given position, filtering objects based on a predicate,  and maintaining
            a registry of active objects. It is particularly useful in scenarios where  game objects of a specific type need
            to be tracked and queried efficiently.</remarks>
            <typeparam name="T">The type of game object managed by this class. Must derive from <see cref="T:UnityEngine.Component"/>.</typeparam>
        </member>
        <member name="M:AVS.Admin.GameObjectManager`1.FindNearestSuch(UnityEngine.Vector3,System.Func{`0,System.Boolean})">
            <summary>
            Finds the nearest object of type <typeparamref name="T"/> to the specified target position, optionally
            filtered by a provided predicate.
            </summary>
            <remarks>If an object does not have a valid <c>transform</c> or its position cannot be
            determined, it is excluded from the distance calculation.</remarks>
            <param name="target">The target position to measure distances from.</param>
            <param name="filter">An optional predicate to filter the objects. Only objects for which the predicate returns <see
            langword="true"/> will be considered. If <see langword="null"/>, no filtering is applied.</param>
            <returns>The nearest object of type <typeparamref name="T"/> to the <paramref name="target"/> position that satisfies
            the filter, or <see langword="null"/> if no such object is found.</returns>
        </member>
        <member name="M:AVS.Admin.GameObjectManager`1.Where(System.Func{`0,System.Boolean})">
            <summary>
            Filters the collection of objects based on a specified predicate.
            </summary>
            <remarks>
            Removes registered objects from the local manager that no longer exist.
            </remarks>
            <param name="pred">A function that defines the condition each object must satisfy to be included in the result.</param>
            <returns>A list of objects that satisfy the specified predicate.</returns>
        </member>
        <member name="M:AVS.Admin.GameObjectManager`1.Register(`0)">
            <summary>
            Registers the specified object in the collection of tracked objects.
            </summary>
            <remarks>The registered object is added to a shared collection, which is used to track all
            such objects. Ensure that the object being registered is valid and not already present in the collection to
            avoid duplication.</remarks>
            <param name="cont">The object to register. This object must not be null.</param>
        </member>
        <member name="M:AVS.Admin.GameObjectManager`1.Deregister(`0)">
            <summary>
            Removes the specified object from the collection of registered objects.
            </summary>
            <param name="cont">The object to deregister. Must not be null.</param>
        </member>
        <member name="M:AVS.Admin.GameObjectManager`1.ClearList">
            <summary>
            Clears all items from the list of objects.
            </summary>
            <remarks>After calling this method, the list will be empty. This operation does not raise any
            events or perform additional actions beyond clearing the list.</remarks>
        </member>
        <member name="T:AVS.Admin.GameStateWatcher">
            <summary>
            Provides utilities for monitoring and managing the state of the game, including player and world state.
            </summary>
            <remarks>This class contains static members to track key game state flags, such as whether the player
            has awakened or started, and whether the world is loaded or settled. It also provides mechanisms for resetting
            the game state and invoking cleanup actions when a scene is reset.</remarks>
        </member>
        <member name="P:AVS.Admin.GameStateWatcher.IsPlayerAwakened">
            <summary>
            Gets or sets a value indicating whether the player has been awakened.
            </summary>
        </member>
        <member name="P:AVS.Admin.GameStateWatcher.IsPlayerStarted">
            <summary>
            Gets or sets a value indicating whether the player has started.
            </summary>
        </member>
        <member name="P:AVS.Admin.GameStateWatcher.IsWorldLoaded">
            <summary>
            Gets or sets a value indicating whether the world is currently loaded.
            </summary>
        </member>
        <member name="P:AVS.Admin.GameStateWatcher.IsWorldSettled">
            <summary>
            Gets a value indicating whether the world is fully loaded and the player's immediate surroundings are active
            and built.
            </summary>
        </member>
        <member name="P:AVS.Admin.GameStateWatcher.OnSceneUnloaded">
            <summary>
            Actions called when <see cref="M:AVS.Admin.GameStateWatcher.SignalSceneUnloaded(UnityEngine.SceneManagement.Scene)"/> is invoked.
            </summary>
        </member>
        <member name="M:AVS.Admin.GameStateWatcher.SignalSceneUnloaded(UnityEngine.SceneManagement.Scene)">
            <summary>
            Signals that the scene has been unloaded, clearing the vehicle manager and invoking all registered actions.
            </summary>
            <param name="scene">Scene that has been unloaded</param>
        </member>
        <member name="T:AVS.Admin.Utils">
            <summary>
            Global utility methods for the AVS mod.
            </summary>
        </member>
        <member name="M:AVS.Admin.Utils.FindVehicleInParents(UnityEngine.Transform,Vehicle@,System.Collections.Generic.List{UnityEngine.Transform})">
            <summary>
            Determines whether the specified transform or any of its ancestors is the currently mounted vehicle.
            </summary>
            <remarks>This method recursively traverses the transform hierarchy to determine if any
            ancestor is the player's currently mounted vehicle. If the specified transform is <see langword="null"/>,
            the method returns <see langword="false"/>.</remarks>
            <param name="current">The transform to check, typically representing a game object in the hierarchy.</param>
            <param name="vehicle">When this method returns, contains the <see cref="T:Vehicle"/> component if found. Null if the method returns false</param>
            <param name="checkedAncestry">A list of all transforms visited by the recursion.</param>
            <returns><see langword="true"/> if the specified transform or one of its ancestors is the vehicle currently mounted
            by the player; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:AVS.Admin.Utils.RegisterDepthModules(AVS.RootModController)">
            <summary>
            Registers the common depth modules for vehicles.
            </summary>
        </member>
        <member name="M:AVS.Admin.Utils.AddEncyclopediaEntry(AVS.RootModController,PDAEncyclopedia.EntryData)">
            <summary>
            Adds a new entry to the PDA Encyclopedia or updates an existing one if the key already exists.
            </summary>
            <remarks>This method ensures that the entry is added or updated only after the PDA
            Encyclopedia mapping is initialized.  If an entry with the same key already exists, it will be replaced with
            the provided data.</remarks>
            <param name="rmc">The <see cref="T:AVS.RootModController"/> instance owning the process.</param>
            <param name="data">The encyclopedia entry data to add or update. The <see cref="F:PDAEncyclopedia.EntryData.key"/> property must
            be unique and non-null.</param>
        </member>
        <member name="T:AVS.ExtensionMethods">
            <summary>
            Various extension methods for AVS functionality.
            </summary>
        </member>
        <member name="M:AVS.ExtensionMethods.GetAvsVehicle(Player)">
            <summary>
            Queries the vehicle associated with the player.
            </summary>
            <param name="player">The player instance.</param>
            <returns>The <see cref="T:AVS.BaseVehicle.AvsVehicle"/> associated with the player, or null if not found.</returns>
        </member>
        <member name="M:AVS.ExtensionMethods.GetCurrentUpgradeNames(Vehicle)">
            <summary>
            Gets the list of current upgrade module names installed in the vehicle.
            </summary>
            <param name="vehicle">The vehicle instance.</param>
            <returns>A list of upgrade module names.</returns>
        </member>
        <member name="M:AVS.ExtensionMethods.GetCurrentUpgrades(Vehicle)">
            <summary>
            Gets the list of current upgrade modules installed in the vehicle.
            </summary>
            <param name="vehicle">The vehicle instance.</param>
            <returns>A list of upgrade module names.</returns>
        </member>
        <member name="M:AVS.ExtensionMethods.GetCurrentUpgrades(SubRoot)">
            <summary>
            Gets the list of current upgrade module names installed in all upgrade consoles of the subroot.
            </summary>
            <param name="subroot">The subroot instance.</param>
            <returns>A list of upgrade module names.</returns>
        </member>
        <member name="M:AVS.ExtensionMethods.Register(UnityEngine.AudioSource)">
            <summary>
            Registers the audio source with the FreezeTimePatcher.
            </summary>
            <param name="source">The audio source to register.</param>
            <returns>The registered <see cref="T:UnityEngine.AudioSource"/>.</returns>
        </member>
        <member name="M:AVS.ExtensionMethods.Undock(Vehicle,System.Boolean)">
            <summary>
            Undocks the vehicle from its docking bay, if docked.
            </summary>
            <param name="vehicle">The vehicle to undock.</param>
            <param name="boardPlayer">Whether to integrate the player into the undocked vehicle (if AVS vehicle).</param>
        </member>
        <member name="M:AVS.ExtensionMethods.MaybeToggleCyclopsCollision(VehicleDockingBay)">
            <summary>
            Coroutine to temporarily disable and re-enable Cyclops collision when undocking.
            </summary>
            <param name="bay">The docking bay instance.</param>
            <returns>An enumerator for the coroutine.</returns>
        </member>
        <member name="M:AVS.ExtensionMethods.IsPilotingCyclops(Player)">
            <summary>
            Determines if the player is currently piloting a Cyclops.
            </summary>
            <param name="player">The player instance.</param>
            <returns>True if piloting a Cyclops, otherwise false.</returns>
        </member>
        <member name="M:AVS.ExtensionMethods.IsInCyclops(Player)">
            <summary>
            Determines if the player is currently inside a Cyclops.
            </summary>
            <param name="player">The player instance.</param>
            <returns>True if inside a Cyclops, otherwise false.</returns>
        </member>
        <member name="M:AVS.ExtensionMethods.IsGameObjectAncestor(UnityEngine.Transform,UnityEngine.GameObject)">
            <summary>
            Checks if the specified GameObject is an ancestor of the current transform.
            </summary>
            <param name="current">The current transform.</param>
            <param name="ancestor">The GameObject to check as ancestor.</param>
            <returns>True if ancestor is found, otherwise false.</returns>
        </member>
        <member name="M:AVS.ExtensionMethods.GetTechType(Vehicle)">
            <summary>
            Gets the <see cref="T:TechType"/> of the vehicle.
            </summary>
            <param name="vehicle">The vehicle instance.</param>
            <returns>The <see cref="T:TechType"/> of the vehicle, or <see cref="F:TechType.None"/> if not found.</returns>
        </member>
        <member name="T:AVS.VehicleRegistrar">
            <summary>
            Handles registration, validation, and queuing of mod vehicles for the AVS system.
            Provides methods for registering vehicles, validating their configuration, and logging registration events.
            </summary>
        </member>
        <member name="P:AVS.VehicleRegistrar.VehiclesRegistered">
            <summary>
            The number of vehicles successfully registered.
            </summary>
        </member>
        <member name="P:AVS.VehicleRegistrar.VehiclesPrefabricated">
            <summary>
            The number of vehicles prefabricated.
            </summary>
        </member>
        <member name="T:AVS.VehicleRegistrar.LogType">
            <summary>
            Specifies the type of log message for verbose logging.
            </summary>
        </member>
        <member name="F:AVS.VehicleRegistrar.LogType.Log">
            <summary>
            Standard log message.
            </summary>
        </member>
        <member name="F:AVS.VehicleRegistrar.LogType.Warn">
            <summary>
            Warning log message.
            </summary>
        </member>
        <member name="M:AVS.VehicleRegistrar.VerboseLog(AVS.Log.SmartLog,AVS.VehicleRegistrar.LogType,System.Boolean,System.String)">
            <summary>
            Logs a message if verbose logging is enabled, using the specified log type.
            </summary>
            <param name="type">The type of the log message.</param>
            <param name="verbose">Whether verbose logging is enabled.</param>
            <param name="message">The message to log.</param>
            <param name="log">Out logger</param>
        </member>
        <member name="M:AVS.VehicleRegistrar.RegisterVehicleLater(AVS.RootModController,AVS.BaseVehicle.AvsVehicle,System.Boolean)">
            <summary>
            Registers a vehicle asynchronously by starting a coroutine.
            </summary>
            <remarks>Calls <see cref="M:AVS.VehicleRegistrar.RegisterVehicle(AVS.Log.SmartLog,AVS.RootModController,AVS.BaseVehicle.AvsVehicle,System.Boolean)"/> as a new coroutine</remarks>
            <param name="rmc">The owning root mod controller instance.</param>
            <param name="av">The mod vehicle to register.</param>
            <param name="verbose">Whether to enable verbose logging.</param>
        </member>
        <member name="M:AVS.VehicleRegistrar.RegisterVehicle(AVS.Log.SmartLog,AVS.RootModController,AVS.BaseVehicle.AvsVehicle,System.Boolean)">
            <summary>
            Coroutine for registering a mod vehicle, including validation and queuing if necessary.
            </summary>
            <param name="rmc">The owning root mod controller instance.</param>
            <param name="av">The mod vehicle to register.</param>
            <param name="verbose">Whether to enable verbose logging.</param>
            <param name="log">Out logger</param>
            <returns>IEnumerator for coroutine execution.</returns>
        </member>
        <member name="M:AVS.VehicleRegistrar.InternalRegisterVehicle(AVS.Log.SmartLog,AVS.RootModController,AVS.BaseVehicle.AvsVehicle,System.Boolean)">
            <summary>
            Internal coroutine for registering a mod vehicle, including prefab creation and queue management.
            </summary>
            <param name="log">Out logger</param>
            <param name="rmc">The owning root mod controller instance.</param>
            <param name="av">The mod vehicle to register.</param>
            <param name="verbose">Whether to enable verbose logging.</param>
            <returns>IEnumerator for coroutine execution.</returns>
        </member>
        <member name="M:AVS.VehicleRegistrar.ValidateAll(AVS.RootModController,AVS.BaseVehicle.AvsVehicle,System.Boolean)">
            <summary>
            Validates a mod vehicle and its specific type (Submarine, Submersible, Skimmer).
            </summary>
            <param name="av">The mod vehicle to validate.</param>
            <param name="verbose">Whether to enable verbose logging.</param>
            <param name="rmc">The root mod controller instance used for logging.</param>
            <returns>True if the vehicle is valid; otherwise, false.</returns>
        </member>
        <member name="M:AVS.VehicleRegistrar.ValidateRegistration(AVS.RootModController,AVS.BaseVehicle.AvsVehicle,System.Boolean)">
            <summary>
            Validates the registration of a mod vehicle, checking required fields and configuration.
            </summary>
            <param name="av">The mod vehicle to validate.</param>
            <param name="rmc">The root mod controller instance used for logging.</param>
            <param name="verbose">Whether to enable verbose logging.</param>
            <returns>True if the vehicle is valid; otherwise, false.</returns>
        </member>
        <member name="M:AVS.VehicleRegistrar.ValidateRegistration(AVS.RootModController,AVS.VehicleTypes.Submarine,System.Boolean)">
            <summary>
            Validates the registration of a Submarine, including submarine-specific requirements.
            </summary>
            <param name="av">The submarine to validate.</param>
            <param name="rmc">The root mod controller instance used for logging.</param>
            <param name="verbose">Whether to enable verbose logging.</param>
            <returns>True if the submarine is valid; otherwise, false.</returns>
        </member>
        <member name="M:AVS.VehicleRegistrar.ValidateRegistration(AVS.RootModController,AVS.VehicleTypes.Submersible,System.Boolean)">
            <summary>
            Validates the registration of a Submersible, including submersible-specific requirements.
            </summary>
            <param name="av">The submersible to validate.</param>
            <param name="verbose">Whether to enable verbose logging.</param>
            <param name="rmc">The root mod controller instance used for logging.</param>
            <returns>True if the submersible is valid; otherwise, false.</returns>
        </member>
        <member name="T:AVS.Assets.AbstractBiomeType">
            <summary>
            Biome types used in Subnautica.
            </summary>
        </member>
        <member name="T:AVS.Assets.BiomeTypes">
            <summary>
            Provides methods and mappings for working with biome types and their associated data.
            </summary>
            <remarks>The <see cref="T:AVS.Assets.BiomeTypes"/> class offers functionality to retrieve biome types associated
            with  specific abstract biome categories, as well as methods to generate biome data based on input parameters. 
            This class is designed to facilitate operations involving biomes, such as retrieving biome lists or  creating
            biome-specific data structures.</remarks>
        </member>
        <member name="M:AVS.Assets.BiomeTypes.Get(AVS.Assets.AbstractBiomeType)">
            <summary>
            Retrieves a read-only list of biome types associated with the specified abstract biome type.
            </summary>
            <param name="type">The abstract biome type for which to retrieve the associated biome types.</param>
            <returns>A read-only list of <see cref="T:BiomeType"/> objects associated with the specified  <paramref name="type"/>.
            The list will contain all biome types mapped to the given abstract biome type.</returns>
        </member>
        <member name="M:AVS.Assets.BiomeTypes.GetBiomeData(AVS.Assets.BiomeStruct)">
            <summary>
            Retrieves a list of biome data based on the specified biome structure.
            </summary>
            <remarks>The method uses the type specified in <paramref name="biomeStruct"/> to determine the
            biome types and generates corresponding biome data entries based on the count and probability
            values.</remarks>
            <param name="biomeStruct">A structure containing the type, count, and probability information used to generate the biome data.</param>
            <returns>A read-only list of <see cref="T:LootDistributionData.BiomeData"/> objects representing the generated biome data.</returns>
        </member>
        <member name="T:AVS.Assets.BiomeStruct">
            <summary>
            Represents a biome with its type, count, and probability of loot occurrence in this biome.
            </summary>
            <remarks>This structure is immutable and is used to encapsulate information about a specific biome,
            including its type, the number of occurrences, and the likelihood of loot in it.</remarks>
        </member>
        <member name="P:AVS.Assets.BiomeStruct.Type">
            <summary>
            Gets the type of the biome represented by this instance.
            </summary>
        </member>
        <member name="P:AVS.Assets.BiomeStruct.Count">
            <summary>
            Probably the number of loot items spawned at once if this biome is selected by random based on Probability.
            </summary>
        </member>
        <member name="P:AVS.Assets.BiomeStruct.Probability">
            <summary>
            Gets the probability value as a floating-point number.
            </summary>
        </member>
        <member name="M:AVS.Assets.BiomeStruct.#ctor(AVS.Assets.AbstractBiomeType,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.Assets.BiomeStruct"/> class with the specified biome type, count, and
            probability.
            </summary>
            <param name="type">The type of the biome represented by this structure. This value cannot be null.</param>
            <param name="count">The number of occurrences or instances of the biome. Must be a non-negative integer.</param>
            <param name="probability">The probability associated with the biome, represented as a floating-point value between 0.0 and 1.0.</param>
        </member>
        <member name="T:AVS.Assets.AbstractBiomeData">
            <summary>
            Represents a collection of abstract biome data, allowing conversion to concrete biome data.
            </summary>
        </member>
        <member name="P:AVS.Assets.AbstractBiomeData.Biomes">
            <summary>
            Gets the list of <see cref="T:AVS.Assets.BiomeStruct"/> instances representing the abstract biomes.
            </summary>
        </member>
        <member name="M:AVS.Assets.AbstractBiomeData.ConvertStruct(AVS.Assets.BiomeStruct)">
            <summary>
            Converts a <see cref="T:AVS.Assets.BiomeStruct"/> to a read-only list of <see cref="T:LootDistributionData.BiomeData"/> objects.
            </summary>
            <param name="biome">The <see cref="T:AVS.Assets.BiomeStruct"/> to convert.</param>
            <returns>A read-only list of <see cref="T:LootDistributionData.BiomeData"/> objects corresponding to the given biome structure.</returns>
        </member>
        <member name="M:AVS.Assets.AbstractBiomeData.Get">
            <summary>
            Retrieves all <see cref="T:LootDistributionData.BiomeData"/> objects for the biomes contained in this instance.
            </summary>
            <returns>A read-only list of <see cref="T:LootDistributionData.BiomeData"/> objects representing all biomes in this collection.</returns>
        </member>
        <member name="T:AVS.Assets.AbstractBiomeDataExtensions">
            <summary>
            Extension methods for <see cref="T:AVS.Assets.AbstractBiomeData"/> to simplify adding biomes.
            </summary>
        </member>
        <member name="M:AVS.Assets.AbstractBiomeDataExtensions.WithBiome(AVS.Assets.AbstractBiomeData,AVS.Assets.AbstractBiomeType,System.Int32,System.Single)">
            <summary>
            Adds a new <see cref="T:AVS.Assets.BiomeStruct"/> to the <see cref="T:AVS.Assets.AbstractBiomeData"/> instance with the specified parameters.
            </summary>
            <param name="data">The <see cref="T:AVS.Assets.AbstractBiomeData"/> instance to add the biome to.</param>
            <param name="type">The abstract biome type to add.</param>
            <param name="count">The number of occurrences for the biome. Defaults to 1.</param>
            <param name="probability">The probability of loot occurrence in the biome. Defaults to 0.1.</param>
            <returns>The <see cref="T:AVS.Assets.AbstractBiomeData"/> instance with the new biome added.</returns>
        </member>
        <member name="T:AVS.Assets.FragmentSpawnLocation">
            <summary>
            Possible spawn location for fragments.
            </summary>
        </member>
        <member name="P:AVS.Assets.FragmentSpawnLocation.Position">
            <summary>
            Spawn position.
            </summary>
        </member>
        <member name="P:AVS.Assets.FragmentSpawnLocation.EulerAngles">
            <summary>
            Spawn euler angles.
            </summary>
        </member>
        <member name="M:AVS.Assets.FragmentSpawnLocation.#ctor(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Creates a new spawn location for fragments.
            </summary>
        </member>
        <member name="T:AVS.Assets.FragmentData">
            <summary>
            FragmentData is a struct that contains all the information needed to register a fragment in the game.
            </summary>
        </member>
        <member name="P:AVS.Assets.FragmentData.Fragments">
            <summary>
            Fragment variations to use. The first one will be used as the main fragment, the rest will be used as variations.
            </summary>
        </member>
        <member name="P:AVS.Assets.FragmentData.Unlocks">
            <summary>
            The tech type that will be unlocked when the fragment is scanned.
            </summary>
        </member>
        <member name="P:AVS.Assets.FragmentData.FragmentsToScan">
            <summary>
            Number of fragments that need to be scanned to unlock the tech type.
            </summary>
        </member>
        <member name="P:AVS.Assets.FragmentData.ScanTime">
            <summary>
            The scan time in seconds for each fragment.
            </summary>
        </member>
        <member name="P:AVS.Assets.FragmentData.ClassID">
            <summary>
            The unique class ID of the fragment.
            </summary>
        </member>
        <member name="P:AVS.Assets.FragmentData.DisplayName">
            <summary>
            The display text for the fragment.
            </summary>
        </member>
        <member name="P:AVS.Assets.FragmentData.Description">
            <summary>
            The description text for the fragment, shown in the PDA.
            </summary>
        </member>
        <member name="P:AVS.Assets.FragmentData.SpawnLocations">
            <summary>
            Spawn locations for the fragment. If there are multiple fragments, they will be spawned in a round-robin fashion.
            </summary>
        </member>
        <member name="P:AVS.Assets.FragmentData.EncyclopediaKey">
            <summary>
            The encyclopedia key for the fragment, used to link it to the encyclopedia entry.
            </summary>
        </member>
        <member name="M:AVS.Assets.FragmentData.#ctor(System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},TechType,System.Int32,System.Single,System.String,System.String,System.String,System.Collections.Generic.IReadOnlyList{AVS.Assets.FragmentSpawnLocation},System.String)">
            <summary>
            Creates a new FragmentData instance.
            </summary>
            <param name="fragments">Fragment variations to use. The first one will be used as the main fragment, the rest will be used as variations</param>
            <param name="unlocks">The tech type that will be unlocked when the fragment is scanned</param>
            <param name="fragmentsToScan">Number of fragments that need to be scanned to unlock the tech type</param>
            <param name="scanTime">The scan time in seconds for each fragment</param>
            <param name="classID">The unique class ID of the fragment</param>
            <param name="displayName">The display text for the fragment</param>
            <param name="description">The description text for the fragment, shown in the PDA</param>
            <param name="spawnLocations">Spawn locations for the fragment. If there are multiple fragments, they will be spawned in a round-robin fashion</param>
            <param name="encyKey">The encyclopedia key for the fragment, used to link it to the encyclopedia entry</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:AVS.Assets.FragmentManager">
            <summary>
            Management class for fragments, scattered across the map.
            Use this to register fragments and their properties.
            </summary>
        </member>
        <member name="M:AVS.Assets.FragmentManager.RegisterFragment(AVS.Assets.FragmentData)">
            <summary>
            Registers a fragment using a FragmentData struct as input. For an AvsVehicle, you can access its techtype AFTER registration like this:
            vehicle.GetComponent&lt;TechTag&gt;().type
            </summary>
            <returns>The TechType of the new fragment.</returns>
        </member>
        <member name="M:AVS.Assets.FragmentManager.Start">
            <inheritdoc />
        </member>
        <member name="T:AVS.Assets.Image">
            <summary>
            Helper structure for sprites
            </summary>
        </member>
        <member name="P:AVS.Assets.Image.Sprite">
            <summary>
            The image loaded as a sprite
            </summary>
        </member>
        <member name="M:AVS.Assets.Image.#ctor(UnityEngine.Sprite)">
            <summary>
            Constructs a new <see cref="T:AVS.Assets.Image"/> from a <see cref="P:AVS.Assets.Image.Sprite"/>.
            </summary>
            <param name="sprite"></param>
        </member>
        <member name="T:AVS.Assets.PatcherImages">
            <summary>
            Represents a collection of images used by AVS.
            </summary>
            <param name="DepthModule1Icon">The icon for the Depth Module 1 upgrade.</param>
            <param name="DepthModule2Icon">The icon for the Depth Module 2 upgrade.</param>
            <param name="DepthModule3Icon">The icon for the Depth Module 3 upgrade.</param>
            <param name="DepthModuleNodeIcon">The icon to use for the parent node of all depth modules in the crafting tree.</param>
            <param name="FabricatorIcon">Icon used by the AVS fabricator.</param>
            <param name="ModulesBackground">Background image for the updates module panel.</param>
        </member>
        <member name="M:AVS.Assets.PatcherImages.#ctor(UnityEngine.Sprite,UnityEngine.Sprite,UnityEngine.Sprite,UnityEngine.Sprite,UnityEngine.Sprite,UnityEngine.Sprite)">
            <summary>
            Represents a collection of images used by AVS.
            </summary>
            <param name="DepthModule1Icon">The icon for the Depth Module 1 upgrade.</param>
            <param name="DepthModule2Icon">The icon for the Depth Module 2 upgrade.</param>
            <param name="DepthModule3Icon">The icon for the Depth Module 3 upgrade.</param>
            <param name="DepthModuleNodeIcon">The icon to use for the parent node of all depth modules in the crafting tree.</param>
            <param name="FabricatorIcon">Icon used by the AVS fabricator.</param>
            <param name="ModulesBackground">Background image for the updates module panel.</param>
        </member>
        <member name="P:AVS.Assets.PatcherImages.DepthModule1Icon">
            <summary>The icon for the Depth Module 1 upgrade.</summary>
        </member>
        <member name="P:AVS.Assets.PatcherImages.DepthModule2Icon">
            <summary>The icon for the Depth Module 2 upgrade.</summary>
        </member>
        <member name="P:AVS.Assets.PatcherImages.DepthModule3Icon">
            <summary>The icon for the Depth Module 3 upgrade.</summary>
        </member>
        <member name="P:AVS.Assets.PatcherImages.DepthModuleNodeIcon">
            <summary>The icon to use for the parent node of all depth modules in the crafting tree.</summary>
        </member>
        <member name="P:AVS.Assets.PatcherImages.FabricatorIcon">
            <summary>Icon used by the AVS fabricator.</summary>
        </member>
        <member name="P:AVS.Assets.PatcherImages.ModulesBackground">
            <summary>Background image for the updates module panel.</summary>
        </member>
        <member name="T:AVS.Assets.PrefabLoader">
            <summary>
            Helper class for loading prefabs asynchronously.
            </summary>
        </member>
        <member name="P:AVS.Assets.PrefabLoader.IfNotFoundLeaveEmpty">
            <summary>
            Specifies what to do if the tech type could not be found. <ul>
            <li>If true, <see cref="P:AVS.Assets.PrefabLoader.Prefab"/> will be left empty (null). Loading the prefab will terminate after 1 minute of
            repeated retrying and set <see cref="P:AVS.Assets.PrefabLoader.TerminalFailure"/> to true.
            <see cref="M:AVS.Assets.PrefabLoader.WaitUntilLoaded"/> will return.</li>
            <li>If false, <see cref="P:AVS.Assets.PrefabLoader.Prefab"/> will be filled with a new generic loot item that has the requested tech type attached
            but no other components. Loading will retry forever until an instance is returned.</li>
            </ul>
            </summary>
        </member>
        <member name="M:AVS.Assets.PrefabLoader.SignalCanLoad">
            <summary>
            Signals that prefabs can now be loaded. Until this call is done, no prefabs can be loaded
            </summary>
        </member>
        <member name="P:AVS.Assets.PrefabLoader.TechType">
            <summary>
            The tech type of the prefab being loaded.
            </summary>
        </member>
        <member name="M:AVS.Assets.PrefabLoader.WaitUntilLoaded">
            <summary>
            Returns an awaitable object that completes once the local prefab has successfully loaded or
            <see cref="P:AVS.Assets.PrefabLoader.IfNotFoundLeaveEmpty"/> is true and loading has failed persistently for one minute
            </summary>
        </member>
        <member name="M:AVS.Assets.PrefabLoader.Request(TechType,System.Boolean)">
            <summary>
            Requests a <see cref="T:AVS.Assets.PrefabLoader"/> instance for the specified <see cref="P:AVS.Assets.PrefabLoader.TechType"/>.
            </summary>
            <remarks>
            Concurrent requests will receive the same instance. Loading will be done only once
            </remarks>
            <param name="techType">The <see cref="P:AVS.Assets.PrefabLoader.TechType"/> for which to request a <see cref="T:AVS.Assets.PrefabLoader"/>.</param>
            <param name="ifNotFoundLeaveEmpty">Specifies what to do if the tech type could not be found.
            If true, <see cref="P:AVS.Assets.PrefabLoader.Prefab"/> will be left empty (null).
            If false, <see cref="P:AVS.Assets.PrefabLoader.Prefab"/> is filled with a new generic loot item that has the requested tech type attached
            but no other components.</param>
            <returns>A <see cref="T:AVS.Assets.PrefabLoader"/> instance associated with the specified <paramref name="techType"/>. If an
            instance already exists, it returns the existing instance; otherwise, it creates a new one and starts the loading process.</returns>
        </member>
        <member name="P:AVS.Assets.PrefabLoader.Prefab">
            <summary>
            Loaded prefab or null if loading is not yet done, or <see cref="P:AVS.Assets.PrefabLoader.IfNotFoundLeaveEmpty"/> is true
            and loading has persistently failed.
            </summary>
            <remarks>
            Singleton instance set to never expire. Do <b>NOT</b> destroy this object
            </remarks>
        </member>
        <member name="M:AVS.Assets.PrefabLoader.Instantiate">
            <summary>
            Instantiates a new game object from the prefab instance
            Null if the prefab has not (yet) been loaded
            </summary>
        </member>
        <member name="P:AVS.Assets.PrefabLoader.CanLoad">
            <summary>
            True if the prefab can be loaded, false if any ongoing loading operation should be delayed.
            </summary>
        </member>
        <member name="P:AVS.Assets.PrefabLoader.TerminalFailure">
            <summary>
            Loading of the requested prefab has persistently failed and <see cref="P:AVS.Assets.PrefabLoader.IfNotFoundLeaveEmpty"/> is true.
            </summary>
        </member>
        <member name="T:AVS.Assets.SeamothHelper">
            <summary>
            Global helper for loading the Seamoth prefab.
            </summary>
        </member>
        <member name="M:AVS.Assets.SeamothHelper.Request">
            <summary>
            Access to the coroutine that loads the Seamoth prefab.
            Allocated on first access, so it is safe to call this property multiple times.
            </summary>
        </member>
        <member name="M:AVS.Assets.SeamothHelper.WaitUntilLoaded">
            <summary>
            Returns an awaitable object that completes once the Seamoth has successfully been loaded or
            loading has failed persistently for one minute
            </summary>
        </member>
        <member name="P:AVS.Assets.SeamothHelper.Seamoth">
            <summary>
            Tries to access the Seamoth prefab.
            May return null if the prefab is not yet loaded.
            </summary>
        </member>
        <member name="P:AVS.Assets.SeamothHelper.RequireSeamoth">
            <summary>
            Access to the Seamoth prefab, guaranteed to be non-null.
            Throws an <see cref="T:System.InvalidOperationException"/> if the prefab is not yet loaded.
            </summary>
        </member>
        <member name="T:AVS.Assets.SpriteHelper">
            <summary>
            Provides helper methods for loading and managing sprites from disk and registering ping sprites.
            </summary>
        </member>
        <member name="M:AVS.Assets.SpriteHelper.GetSpriteRaw(AVS.RootModController,System.String)">
            <summary>
            Loads a raw <see cref="T:UnityEngine.Sprite"/> from a relative path based on the calling assembly's location.
            </summary>
            <param name="relativePath">The relative path to the sprite file.</param>
            <param name="rmc">The <see cref="T:AVS.RootModController"/> instance for logging purposes.</param>
            <returns>The loaded <see cref="T:UnityEngine.Sprite"/>, or null if not found.</returns>
        </member>
        <member name="M:AVS.Assets.SpriteHelper.RequireImage(AVS.RootModController,System.String)">
            <summary>
            Loads a required <see cref="T:AVS.Assets.Image"/> from a relative path based on the calling assembly's location.
            </summary>
            <param name="relativePath">Path relative to the executing assembly's path</param>
            <param name="rmc">The <see cref="T:AVS.RootModController"/> instance for logging purposes.</param>
            <returns>Loaded image</returns>
            <exception cref="T:System.IO.FileNotFoundException">The file does not exist</exception>
            <exception cref="T:System.IO.IOException">Sprite loading has failed</exception>
        </member>
        <member name="M:AVS.Assets.SpriteHelper.GetSpriteGenericRaw(AVS.RootModController,System.String)">
            <summary>
            Loads a <see cref="T:UnityEngine.Sprite"/> from a full file path.
            </summary>
            <param name="fullPath">The full path to the sprite file.</param>
            <param name="rmc">The <see cref="T:AVS.RootModController"/> instance for logging purposes.</param>
            <returns>The loaded <see cref="T:UnityEngine.Sprite"/>, or null if not found.</returns>
        </member>
        <member name="P:AVS.Assets.SpriteHelper.PingSprites">
            <summary>
            List of registered ping sprites, each with a name, ping type, and sprite.
            </summary>
        </member>
        <member name="M:AVS.Assets.SpriteHelper.RegisterPingSprite(System.String,PingType,UnityEngine.Sprite)">
            <summary>
            Registers a ping sprite with a name and ping type.
            </summary>
            <param name="name">The name of the ping sprite.</param>
            <param name="pt">The ping type.</param>
            <param name="pingSprite">The <see cref="T:UnityEngine.Sprite"/> to register.</param>
        </member>
        <member name="T:AVS.Audio.AsyncPromise`1">
            <summary>
            Represents an asynchronous operation that will eventually yield a value of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the result value.</typeparam>
        </member>
        <member name="P:AVS.Audio.AsyncPromise`1.Value">
            <summary>
            Gets the value of the promise if resolved.
            </summary>
        </member>
        <member name="P:AVS.Audio.AsyncPromise`1.IsDone">
            <summary>
            Gets a value indicating whether the promise has completed (either resolved or rejected).
            </summary>
        </member>
        <member name="P:AVS.Audio.AsyncPromise`1.IsError">
            <summary>
            Gets a value indicating whether the promise was rejected due to an error.
            </summary>
        </member>
        <member name="P:AVS.Audio.AsyncPromise`1.ErrorMessage">
            <summary>
            Error message if the promise was rejected.
            </summary>
        </member>
        <member name="M:AVS.Audio.AsyncPromise`1.Resolve(`0)">
            <summary>
            Resolves the promise with the specified value.
            </summary>
            <param name="value">The value to resolve the promise with.</param>
        </member>
        <member name="M:AVS.Audio.AsyncPromise`1.Reject(System.String)">
            <summary>
            Rejects the promise, indicating an error occurred.
            </summary>
        </member>
        <member name="T:AVS.Audio.DynamicClipLoader">
            <summary>
            Provides asynchronous loading and caching of <see cref="T:UnityEngine.AudioClip"/> assets.
            </summary>
        </member>
        <member name="P:AVS.Audio.DynamicClipLoader.AudioClipPromises">
            <summary>
            Caches promises for audio clips by file path.
            </summary>
        </member>
        <member name="M:AVS.Audio.DynamicClipLoader.GetAudioClipAsync(AVS.RootModController,System.String)">
            <summary>
            Asynchronously gets an <see cref="T:UnityEngine.AudioClip"/> from the specified file path.
            If the clip is already being loaded, returns the existing promise.
            </summary>
            <param name="rmc">The <see cref="T:AVS.RootModController"/> owning the process.</param>
            <param name="filePath">The file path to the audio clip.</param>
            <returns>An <see cref="T:AVS.Audio.AsyncPromise`1"/> representing the loading operation.</returns>
        </member>
        <member name="M:AVS.Audio.DynamicClipLoader.LoadAudioClip(AVS.Log.SmartLog,System.String,System.Action{UnityEngine.AudioClip},System.Action{System.String})">
            <summary>
            Coroutine that loads an <see cref="T:UnityEngine.AudioClip"/> from the specified file path.
            </summary>
            <param name="filePath">The file path to the audio clip.</param>
            <param name="onSuccess">Callback invoked with the loaded <see cref="T:UnityEngine.AudioClip"/> on success.</param>
            <param name="onError">Callback invoked if loading fails.</param>
            <param name="log">The <see cref="T:AVS.Log.SmartLog"/> instance for logging.</param>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for use with Unity coroutines.</returns>
        </member>
        <member name="T:AVS.Audio.FModException">
            <summary>
            Caught fatal FMOD result.
            </summary>
        </member>
        <member name="P:AVS.Audio.FModException.Result">
            <summary>
            The result that caused the exception.
            </summary>
        </member>
        <member name="M:AVS.Audio.FModException.#ctor(System.String,FMOD.RESULT)">
            <summary>
            Represents an exception that occurs when an FMOD operation fails.
            </summary>
            <param name="message">The error message that describes the exception.</param>
            <param name="result">The FMOD result code associated with the exception.</param>
        </member>
        <member name="T:AVS.Audio.FModSoundCreator">
            <summary>
            FMOD sound creator.
            </summary>
        </member>
        <member name="M:AVS.Audio.FModSoundCreator.Play(AVS.Audio.SoundSetup)">
            <summary>
            Attempts to instantiate a new FMOD sound source, based on the provided configuration.
            </summary>
            <param name="cfg">The sound configuration to instantiate</param>
            <returns>Created sound source. Null if creation failed</returns>
        </member>
        <member name="T:AVS.Audio.SoundSettings">
            <summary>
            Settings that can be changed during the lifetime of a sound source
            </summary>
            <param name="Volume">The volume value for the sound. Default is 1.0f.</param>
            <param name="Pitch">The pitch value for the sound. Default is 1.0f.</param>
        </member>
        <member name="M:AVS.Audio.SoundSettings.#ctor(System.Single,System.Single)">
            <summary>
            Settings that can be changed during the lifetime of a sound source
            </summary>
            <param name="Volume">The volume value for the sound. Default is 1.0f.</param>
            <param name="Pitch">The pitch value for the sound. Default is 1.0f.</param>
        </member>
        <member name="P:AVS.Audio.SoundSettings.Volume">
            <summary>The volume value for the sound. Default is 1.0f.</summary>
        </member>
        <member name="P:AVS.Audio.SoundSettings.Pitch">
            <summary>The pitch value for the sound. Default is 1.0f.</summary>
        </member>
        <member name="M:AVS.Audio.SoundSettings.IsSignificantlyDifferent(AVS.Audio.SoundSettings)">
            <summary>
            Determines whether the current settings are significantly different from another <see cref="T:AVS.Audio.SoundSettings"/> instance.
            </summary>
            <param name="other">The other <see cref="T:AVS.Audio.SoundSettings"/> to compare with.</param>
            <returns>True if the settings differ by more than a small threshold; otherwise, false.</returns>
        </member>
        <member name="M:AVS.Audio.SoundSettings.SigDif(System.Single,System.Single)">
            <summary>
            Determines if two float values are significantly different based on a fixed threshold.
            </summary>
            <param name="a">First value.</param>
            <param name="b">Second value.</param>
            <returns>True if the absolute difference is greater than 0.005f; otherwise, false.</returns>
        </member>
        <member name="T:AVS.Audio.SoundSetup">
            <summary>
            Represents the configuration for a sound source, including its audio clip, playback settings, and spatial properties.
            </summary>
            <remarks>
            This struct encapsulates the settings required to configure and play a sound, such as the
            associated audio clip, volume, pitch, spatial distances, and looping behavior. It is immutable and can be used
            to define sound properties for playback in both 2D and 3D contexts.
            </remarks>
            <summary>
            Represents the configuration for a sound source, including its audio clip, playback settings, and spatial properties.
            </summary>
            <param name="RMC">The root mod controller associated with this sound setup</param>
            <param name="Owner">The owning game object</param>
            <param name="AudioClip">The audio clip associated with this instance</param>
            <param name="Settings">The initial volume and pitch settings</param>
            <param name="MinDistance">The minimum distance for the listener. If the listener is closer than this distance, the sound will be played at full volume.</param>
            <param name="MaxDistance">The maximum distance for the listener. If the listener is farther than this distance, the sound will not be heard.</param>
            <param name="HalfDistance">The listener distance at which the sound volume is exactly half the maximum volume. Must be in the range (MinDistance*2, MaxDistance-MinDistance), otherwise clamped.</param>
            <param name="Loop">Whether the playback is set to loop</param>
            <param name="Is3D">Whether the object is represented in 3D</param>
            <exception cref="T:System.ArgumentNullException">Thrown if AudioClip is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if distance parameters are invalid.</exception>
        </member>
        <member name="M:AVS.Audio.SoundSetup.#ctor(AVS.RootModController,UnityEngine.GameObject,UnityEngine.AudioClip,AVS.Audio.SoundSettings,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Represents the configuration for a sound source, including its audio clip, playback settings, and spatial properties.
            </summary>
            <remarks>
            This struct encapsulates the settings required to configure and play a sound, such as the
            associated audio clip, volume, pitch, spatial distances, and looping behavior. It is immutable and can be used
            to define sound properties for playback in both 2D and 3D contexts.
            </remarks>
            <summary>
            Represents the configuration for a sound source, including its audio clip, playback settings, and spatial properties.
            </summary>
            <param name="RMC">The root mod controller associated with this sound setup</param>
            <param name="Owner">The owning game object</param>
            <param name="AudioClip">The audio clip associated with this instance</param>
            <param name="Settings">The initial volume and pitch settings</param>
            <param name="MinDistance">The minimum distance for the listener. If the listener is closer than this distance, the sound will be played at full volume.</param>
            <param name="MaxDistance">The maximum distance for the listener. If the listener is farther than this distance, the sound will not be heard.</param>
            <param name="HalfDistance">The listener distance at which the sound volume is exactly half the maximum volume. Must be in the range (MinDistance*2, MaxDistance-MinDistance), otherwise clamped.</param>
            <param name="Loop">Whether the playback is set to loop</param>
            <param name="Is3D">Whether the object is represented in 3D</param>
            <exception cref="T:System.ArgumentNullException">Thrown if AudioClip is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if distance parameters are invalid.</exception>
        </member>
        <member name="P:AVS.Audio.SoundSetup.RMC">
            <summary>The root mod controller associated with this sound setup</summary>
        </member>
        <member name="P:AVS.Audio.SoundSetup.Owner">
            <summary>The owning game object</summary>
        </member>
        <member name="P:AVS.Audio.SoundSetup.AudioClip">
            <summary>The audio clip associated with this instance</summary>
        </member>
        <member name="P:AVS.Audio.SoundSetup.Settings">
            <summary>The initial volume and pitch settings</summary>
        </member>
        <member name="P:AVS.Audio.SoundSetup.MinDistance">
            <summary>The minimum distance for the listener. If the listener is closer than this distance, the sound will be played at full volume.</summary>
        </member>
        <member name="P:AVS.Audio.SoundSetup.MaxDistance">
            <summary>The maximum distance for the listener. If the listener is farther than this distance, the sound will not be heard.</summary>
        </member>
        <member name="P:AVS.Audio.SoundSetup.HalfDistance">
            <summary>The listener distance at which the sound volume is exactly half the maximum volume. Must be in the range (MinDistance*2, MaxDistance-MinDistance), otherwise clamped.</summary>
        </member>
        <member name="P:AVS.Audio.SoundSetup.Loop">
            <summary>Whether the playback is set to loop</summary>
        </member>
        <member name="P:AVS.Audio.SoundSetup.Is3D">
            <summary>Whether the object is represented in 3D</summary>
        </member>
        <member name="M:AVS.Audio.SoundSetup.Validate">
            <summary>
            Validates the current <see cref="T:AVS.Audio.SoundSetup"/> instance to ensure that all required parameters are correctly set.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when either <see cref="P:AVS.Audio.SoundSetup.AudioClip"/> or <see cref="P:AVS.Audio.SoundSetup.Owner"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when parameter values do not meet the expected range in a 3D sound configuration.</exception>
        </member>
        <member name="M:AVS.Audio.SoundSetup.IsLiveCompatibleTo(AVS.Audio.SoundSetup)">
            <summary>
            Determines if this <see cref="T:AVS.Audio.SoundSetup"/> is compatible with another for live playback (e.g., can be swapped without stopping playback).
            </summary>
            <param name="other">The other <see cref="T:AVS.Audio.SoundSetup"/> to compare with.</param>
            <returns>True if both setups use the same AudioClip and looping setting; otherwise, false.</returns>
        </member>
        <member name="T:AVS.BaseVehicle.AvsVehicle">
            <summary>
            AvsVehicle is the primary abstract class provided by AVS. 
            All AVS vehicles inherit from this class.
            </summary>
        </member>
        <member name="T:AVS.BaseVehicle.AvsVehicle.PilotingStyle">
            <summary>
            The piloting style of the vehicle.
            </summary>
        </member>
        <member name="F:AVS.BaseVehicle.AvsVehicle.PilotingStyle.Cyclops">
            <summary>
            Arms expected to grab a wheel
            </summary>
        </member>
        <member name="F:AVS.BaseVehicle.AvsVehicle.PilotingStyle.Seamoth">
            <summary>
            Arms expected to grab joysticks
            </summary>
        </member>
        <member name="F:AVS.BaseVehicle.AvsVehicle.PilotingStyle.Prawn">
            <summary>
            Arms expected to grab joysticks
            </summary>
        </member>
        <member name="F:AVS.BaseVehicle.AvsVehicle.PilotingStyle.Other">
            <summary>
            Arm animations controled via <see cref="M:AVS.BaseVehicle.AvsVehicle.HandleOtherPilotingAnimations(System.Boolean)"/>
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.VehicleRoot">
            <summary>
            The root game object of this vehicle. Usually the same as the vehicle game object.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.Config">
            <summary>
            Invariant vehicle configuration. Initialized during construction.
            Never null.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetVehicleComposition">
            <summary>
            Retrieves the composition of the vehicle.
            Executed once either during <see cref="M:AVS.BaseVehicle.AvsVehicle.Awake"/> or vehicle registration, whichever comes first.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.Com">
            <summary>
            Resolved vehicle composition.
            If accessed before <see cref="M:AVS.BaseVehicle.AvsVehicle.Awake"/> (or vehicle registration), InvalidOperationException will be thrown.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.#ctor(AVS.Configuration.VehicleConfiguration)">
            <summary>
            Constructs the vehicle with the given configuration.
            </summary>
            <param name="config">Vehicle configuration. Must not be null</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.SpawnMiniWorld(UnityEngine.Transform,UnityEngine.Material,System.Int32,System.Boolean)">
            <summary>
            Constructs a map mini-world hologram on the given object.
            </summary>
            <param name="worldObject">The object that will hold the map. May be scaled and rotated by the minimap</param>
            <param name="material">Material to use for the hologram</param>
            <param name="mapWorldRadius">Effective map radius in meters</param>
            <param name="withShadows">True if the map material should cast and receive shadows,
            false to use the default behavior (off)</param>
            <returns>Created mini-world</returns>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.RequireComposition">
            <summary>
            Initialized <see cref="P:AVS.BaseVehicle.AvsVehicle.Com"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.Id">
            <summary>
            A unique ID for this vehicle instance.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.VoiceQueue">
            <summary>
            The voice queue for this vehicle.
            Set by <see cref="M:AVS.BaseVehicle.AvsVehicle.Awake"/>.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.Autopilot">
            <summary>
            Gets the Autopilot system associated with the current instance.
            Set by <see cref="M:AVS.BaseVehicle.AvsVehicle.Awake"/>.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.Awake">
            <inheritdoc />
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.Start">
            <inheritdoc />
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.AnticipatePlayerIssues">
            <summary>
            If set true, the vehicle assumes the player will be manipulated by external processes.
            Remains active until the PDA, main menu, or builder menu are opened, or the player
            exists the vehicle or enters helm control.
            </summary>
        </member>
        <member name="F:AVS.BaseVehicle.AvsVehicle.crushDamageEmitter">
            <summary>
            Reference to the custom emitter used for crush damage sounds.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.Update">
            <inheritdoc />
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.FixedUpdate">
            <inheritdoc />
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnKill">
            <summary>
            To be executed when the vehicle is killed.
            </summary>
            <remarks>Calls <see cref="M:AVS.BaseVehicle.AvsVehicle.DestroyVehicle"/> </remarks>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetDepth(System.Int32@,System.Int32@)">
            <summary>
            Gets the current vehicle depth and crush depth.
            </summary>
            <param name="depth">Vehicle depth</param>
            <param name="crushDepth">Crush depth</param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.ExitHelmControl">
            <summary>
            Deselects quick-slots and exits piloting
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.vehicleDefaultName">
            <summary>
            Vehicle default name
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnAIBatteryReload">
            <summary>
            Supposed to be called when the AI battery is reloaded.
            The way it's implement now, this appears to be called when any battery is reloaded.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetIsUnderwater">
            <summary>
            Detects if the vehicle is currently underwater.
            </summary>
            <returns>true if underwater</returns>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.HudPingInstance">
            <summary>
            Marker on the HUD.
            Can be used to enable or disable the marker.
            </summary>
            <remarks>Set during <see cref="M:AVS.BaseVehicle.AvsVehicle.Awake"/></remarks>
        </member>
        <member name="F:AVS.BaseVehicle.AvsVehicle.aiEnergyInterface">
            <summary>
            Energy interface used by the AI.
            At present, this is only used by the <see cref="P:AVS.BaseVehicle.AvsVehicle.Autopilot" /> to refill oxygen.
            </summary>
            <remarks> Prefabrication fields must remain open fields or
            Unity instantiation will not preserve them. We cannot fetch it during awake because
            the vehicle may have multiple energy interfaces.</remarks>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.IsPoweredOn">
            <summary>
            if the player toggles the power off, the vehicle is called "powered off,"
            because it is unusable yet the batteries are not empty
            </summary>
        </member>
        <member name="F:AVS.BaseVehicle.AvsVehicle.ambienceSound">
            <summary>
            Ambient sound emitter, copied from the seamoth prefab.
            </summary>
            <remarks>
            Copied during prefab setup.
            </remarks>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.PowerManager">
            <summary>
            The vehicle's power manager.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.TechType">
            <summary>
            Fetches the tech type of the vehicle by searching for its <see cref="T:TechTag" /> component.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.HandlePilotingAnimations">
            <summary>
            Executed when the player has started piloting a vehicle. The exact animations depend on <see cref="P:AVS.Configuration.VehicleConfiguration.PilotingStyle" />.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.NotifyStatus(AVS.PlayerStatus)">
            <summary>
            Broadcasts a new player status to all components that implement <see cref="T:AVS.IPlayerListener" />.
            </summary>
            <param name="newStatus">New status to broadcast</param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetHUDValues(System.Single@,System.Single@)">
            <summary>
            Retrieves the current health and power values of the vehicle.
            Returned values are in the range of 0 to 1, where 1 is full health/power.
            </summary>
            <param name="health">Relative out health</param>
            <param name="power">Relative out power</param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.SetName(System.String)">
            <summary>
            Updates the vehicle name.
            </summary>
            <param name="name">New vehicle name</param>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.VehicleName">
            <summary>
            Gets the applied local vehicle name
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.SubRoot">
            <summary>
            Retrieves and/or caches the SubRoot instance attached to this vehicle
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetPilotingMode">
            <summary>
            Checks if the vehicle is in locked piloting mode.
            That is, the player is in locked piloting mode and is currently
            located in this vehicle's helm location.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetEnergyMixinFromVehicle(Vehicle)">
            <summary>
            Retrieves the <see cref="T:EnergyMixin"/> from the given vehicle.
            </summary>
            <remarks>Called via reflection</remarks>
            <param name="veh">Vehicle to retrieve the energy mixin from</param>
            <returns>Energy mixin. Every vehicle should have one</returns>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.SetBaseColor(AVS.VehicleComponents.VehicleColor)">
            <summary>
            Updates the base color of the vehicle.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.SetInteriorColor(AVS.VehicleComponents.VehicleColor)">
            <summary>
            Updates the interior color of the vehicle.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.SetStripeColor(AVS.VehicleComponents.VehicleColor)">
            <summary>
            Updates the stripe color of the vehicle.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.SetNameColor(AVS.VehicleComponents.VehicleColor)">
            <summary>
            Updates the name color of the vehicle.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.BaseColor">
            <summary>
            The current base color.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.InteriorColor">
            <summary>
            The current interior color.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.StripeColor">
            <summary>
            The current stripe color.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.NameColor">
            <summary>
            The current name color.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.IsUndockingAnimating">
            <summary>
            Gets a value indicating whether the undocking animation is currently in progress.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.IsVehicleDocked">
            <summary>
            True if the vehicle is currently docked in a docking bay (e.g. a moonpool).
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.DockVehicle(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Handles docking procedures for the vehicle.
            Executed when the vehicle docks in a docking bay (e.g. a moonpool).
            Relocates the player if they are currently controlling the vehicle,
            </summary>
            <remarks>
            Updates <see cref="P:AVS.BaseVehicle.AvsVehicle.IsVehicleDocked"/> and <see cref="P:Vehicle.docked"/>.
            Calls <see cref="M:AVS.BaseVehicle.AvsVehicle.OnPreVehicleDocked"/>,
            <see cref="M:AVS.BaseVehicle.AvsVehicle.OnVehicleDocked"/>,
            and potentially <see cref="M:AVS.BaseVehicle.AvsVehicle.OnPreDockingPlayerExit"/>
            and <see cref="M:AVS.BaseVehicle.AvsVehicle.OnDockingPlayerExit"/>.
            </remarks>
            <param name="doNotRelocatePlayer">
            If set, the player will not be relocated to the exit hatch of the vehicle.
            Also <see cref="M:AVS.BaseVehicle.AvsVehicle.OnPreDockingPlayerExit"/> and <see cref="M:AVS.BaseVehicle.AvsVehicle.OnDockingPlayerExit"/> will not be called.
            This is a very crude option and requires that the caller ensures the player
            is properly relocated, and all states (e.g. swimming, sitting) are properly updated.
            </param>
            <param name="overridePlayerExitLocation">
            The location the player should exit to after docking.
            If <see cref="P:UnityEngine.Vector3.zero" /> / <see langword="default"/>,
            the player will only relocate to the exit location of the respective hatch</param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnPreVehicleDocked">
            <summary>
            Called before the vehicle is docked in a docking bay (e.g. a moonpool).
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnVehicleDocked">
            <summary>
            Called after the vehicle handled docking procedures
            and potentially relocated the player.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnPreDockingPlayerExit">
            <summary>
            Called before the player exits the vehicle in a docking bay (e.g. a moonpool).
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnDockingPlayerExit">
            <summary>
            Called after the player has exited the vehicle in a docking bay (e.g. a moonpool).
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.UndockVehicle(System.Boolean,System.Boolean)">
            <summary>
            Handles undocking procedures for the vehicle.
            Executed when the vehicle undocks from a docking bay (e.g. a moonpool).
            </summary>
            <remarks>
            Updates <see cref="P:AVS.BaseVehicle.AvsVehicle.IsVehicleDocked"/> and <see cref="P:Vehicle.docked"/>.
            Calls <see cref="M:AVS.BaseVehicle.AvsVehicle.OnPreVehicleUndocked"/>,
            <see cref="M:AVS.BaseVehicle.AvsVehicle.OnVehicleUndocked"/>, and potentially
            <see cref="M:AVS.BaseVehicle.AvsVehicle.OnPreUndockingPlayerEntry"/> and
            <see cref="M:AVS.BaseVehicle.AvsVehicle.OnUndockingPlayerEntry"/>.
            </remarks>
            <param name="boardPlayer">Whether to board the player into this vehicle</param>
            <param name="suspendCollisions">
            If false, the vehicle's rigidbody will immediately enable collisions after undocking.
            Otherwise, it will disable collisions, then wait 5 seconds before enabling collisions.
            </param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnPreVehicleUndocked">
            <summary>
            Executed before the vehicle is undocked from a docking bay (e.g. a moonpool).
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnVehicleUndocked">
            <summary>
            Executed when the vehicle has undocking from a docking bay (e.g. a moonpool).
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnPreUndockingPlayerEntry">
            <summary>
            Executed before the player reenters a newly undocked local vehicle.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnUndockingPlayerEntry">
            <summary>
            Executed when the player reentered a newly undocked local vehicle.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.AnimateMoonPoolArms(VehicleDockingBay)">
            <summary>
            Animation routine to execute when the vehicle is (un)docked in a moonpool.
            </summary>
            <param name="moonpool"></param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetDockingDifferenceFromCenter">
            <summary>
            Gets the difference between the vehicle's position and the center of its bounding box in world space,
            subject to its current orientation.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetDockingBoundsSize">
            <summary>
            Loosely computes the bounding dimensions of the vehicle.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.PlayerAtHelm">
            <summary>
            True if the player is currently piloting the vehicle.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.DoExitRoutines">
            <summary>
            Executed by <see cref="M:AVS.BaseVehicle.AvsVehicle.DeselectSlots" />, as part of the player exiting helm control
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.CanPilot">
            <summary>
            Checks if this vehicle can be piloted.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.IsBoarded">
            <summary>
            True if the vehicle is currently boarded by the player.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.IsPlayerControlling">
            <summary>
            Checks if the player is currently piloting this vehicle.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.HandleOtherPilotingAnimations(System.Boolean)">
            <summary>
            Executed has started being piloted by a player and <see cref="P:AVS.Configuration.VehicleConfiguration.PilotingStyle" /> is set to <see cref="F:AVS.BaseVehicle.AvsVehicle.PilotingStyle.Other" />.
            </summary>
            <param name="isPiloting">True if the player is actually piloting</param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.PlayerCanExitHelmControl(System.Single,System.Single,System.Single)">
            <summary>
            Checks if the player can exit helm control based on the current roll, pitch, and velocity.
            </summary>
            <param name="roll">Current roll delta angle from identity</param>
            <param name="pitch">Current pitch delta angle from identity</param>
            <param name="velocity">Current vehicle velocity</param>
            <returns>True if the player is permitted to exit helm control</returns>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnPreBeginHelmControl(AVS.VehicleBuilding.Helm)">
            <summary>
            Invoked when <see cref="M:AVS.BaseVehicle.AvsVehicle.BeginHelmControl(AVS.VehicleBuilding.Helm)" /> starts.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnBeginHelmControl(AVS.VehicleBuilding.Helm)">
            <summary>
            Invoked when <see cref="M:AVS.BaseVehicle.AvsVehicle.BeginHelmControl(AVS.VehicleBuilding.Helm)" /> ends.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnPreEndHelmControl">
            <summary>
            Invoked when <see cref="M:AVS.BaseVehicle.AvsVehicle.EndHelmControl(System.Single)" /> starts.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnEndHelmControl">
            <summary>
            Invoked when <see cref="M:AVS.BaseVehicle.AvsVehicle.EndHelmControl(System.Single)" /> ends.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnPrePlayerExit">
            <summary>
            Invoked when <see cref="M:AVS.BaseVehicle.AvsVehicle.PlayerExit(AVS.VehicleBuilding.VehicleHatchDefinition,System.Boolean)" /> starts.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnPlayerExit">
            <summary>
            Invoked when <see cref="M:AVS.BaseVehicle.AvsVehicle.PlayerExit(AVS.VehicleBuilding.VehicleHatchDefinition,System.Boolean)" /> ends.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnPrePlayerEntry">
            <summary>
            Invoked when <see cref="M:AVS.BaseVehicle.AvsVehicle.PlayerEntry(AVS.VehicleBuilding.VehicleHatchDefinition)" /> starts.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnPlayerEntry">
            <summary>
            Invoked when <see cref="M:AVS.BaseVehicle.AvsVehicle.PlayerEntry(AVS.VehicleBuilding.VehicleHatchDefinition)" /> ends.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetMainHelm">
            <summary>
            Queries the main helm of the vehicle.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.EnterVehicle(Player,System.Boolean,System.Boolean)">
            <summary>
            Invoked when the player enters helm control.
            <see cref="F:Vehicle.playerPosition" /> is referenced by the base class implementation, so
            we do not forward the call when that field is null.
            </summary>
            <remarks>
            <see cref="F:Vehicle.playerPosition" /> is intentionally kept null while the player is not in control of the vehicle.
            Otherwise, clicking anywhere on the inside hull immediately causes the player to be teleported to
            and locked in the helm.
            </remarks>
            <param name="player">Player entering</param>
            <param name="teleport">If true, the player is localized to (0,0,0) after being reparented to the sub</param>
            <param name="playEnterAnimation">If true, the character enter animation is played</param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.BeginMainHelmControl">
            <summary>
            Begins helm control at the main helm of the vehicle.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.BeginHelmControl(AVS.VehicleBuilding.Helm)">
            <summary>
            Enters the player into the sub, updates the quickbar and notifies the player of the piloting status.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.EndHelmControl(System.Single)">
            <summary>
            Stops the piloting of the current vehicle and resets the control state.
            </summary>
            <remarks>This method disengages the player from controlling a vehicle and resets any
            associated UI elements.  It also triggers a notification to update the player's status to reflect the end of
            piloting.
            This is not the primary entry point to exit helm control, but rather a utility method.
            Call <see cref="M:AVS.BaseVehicle.AvsVehicle.ExitHelmControl"/> /<see cref="M:AVS.BaseVehicle.AvsVehicle.DeselectSlots" /> to exit helm control and reset the quickbar.
            </remarks>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetClosestExitHatch">
            <summary>
            Finds the closest exit hatch to the player by comparing entry locations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetClosestEntryHatch">
            <summary>
            Finds the closest entry hatch to the player by comparing exit locations.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.ClosestPlayerEntry">
            <summary>
            Enters the vehicle through the hatch closest to the player's current location.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.RegisterPlayerEntry(System.Action)">
            <summary>
            Internal registration for when the player enters the vehicle
            or was detected as entering the vehicle.
            </summary>
            <param name="ifNotDockedAction">Code to execute if not docked </param>
            <remarks>Designed to handle edge-cases like the player entering
            the tether space of the vehicle via teleport</remarks>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.PlayerEntry(AVS.VehicleBuilding.VehicleHatchDefinition)">
            <summary>
            Enters the player through the given hatch.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.ClosestPlayerExit(System.Boolean)">
            <summary>
            Exits the vehicle through the hatch closest to the player's current location.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.PlayerExit(AVS.VehicleBuilding.VehicleHatchDefinition,System.Boolean)">
            <summary>
            Called when the player exits the vehicle.
            </summary>
        </member>
        <member name="F:AVS.BaseVehicle.AvsVehicle.lightsOffSound">
            <summary>
            Use <see cref="P:AVS.BaseVehicle.AvsVehicle.LightsOffSound"/> instead.
            </summary>
            <remarks> Prefabrication fields must remain open fields or
            Unity instantiation will not preserve them.
            Since the vehicle has multiple custom emitters, we cannot
            fetch it during Awake()</remarks>
        </member>
        <member name="F:AVS.BaseVehicle.AvsVehicle.lightsOnSound">
            <summary>
            Use <see cref="P:AVS.BaseVehicle.AvsVehicle.LightsOnSound"/> instead.
            </summary>
            <remarks> Prefabrication fields must remain open fields or
            Unity instantiation will not preserve them.
            Since the vehicle has multiple custom emitters, we cannot
            fetch it during Awake()</remarks>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.LightsOffSound">
            <summary>
            Sound to play when the vehicle lights are turned on.
            Set during prefabrication.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.LightsOnSound">
            <summary>
            Sound to play when the vehicle lights are turned off.
            Set during prefabrication.
            </summary>
        </member>
        <member name="F:AVS.BaseVehicle.AvsVehicle.volumetricLights">
            <summary>
            Populated during prefabrication.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.HeadlightsController">
            <summary>
            The headlights controller for this vehicle.
            Set during Awake().
            </summary>
            <remarks>
            Auto-destroyed/nulled if no headlights were declared.
            </remarks>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.CreateDataBlocks(System.Action{AVS.SaveLoad.DataBlock})">
            <summary>
            Creates the save data container for this vehicle.
            </summary>
            <remarks>
            For consistency, the base method should be called LAST
            by any inherited class
            </remarks>
            <param name="addBlock">Action to register new blocks with</param>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.Constructed">
            <summary>
            The construction date of this vehicle.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetLoadedHelm">
            <summary>
            Gets the helm restored from the save data.
            If the derived vehicle does not have multiple helms,
            the default helm is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnDataLoaded">
            <summary>
            Executed when the data for this vehicle has been loaded.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.PrefabID">
            <summary>
            Fetches the prefab identifier of this vehicle.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.VehicleIsReady">
            <summary>
            True if this vehicle has completed loading
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnGameSaved">
            <summary>
            Executed when the local vehicle has finished saving.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnFinishedLoading">
            <summary>
            Executed last when everything has been loaded successfully and the
            scene was completely initialized.
            Everything loaded by the savegame now exists at its final location and state.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.MaterialFixer">
            <summary>
            The material fixer instance used for this vehicle.
            Ineffective if <see cref="P:AVS.Configuration.VehicleConfiguration.AutoFixMaterials"/> is false.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnUpgradeModuleToggle(System.Int32,System.Boolean)">
            <summary>
            Executed if a toggleable upgrade module is toggled on or off.
            </summary>
            <param name="slotID">Upgrade module slot</param>
            <param name="active">True if has been toggled on, false if off</param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnUpgradeModuleUse(TechType,System.Int32)">
            <summary>
            Executed when a usable upgrade module is used.
            </summary>
            <param name="techType">The tech type of the upgrade being used</param>
            <param name="slotID">Upgrade module slot</param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnUpgradeModuleChange(System.Int32,TechType,System.Boolean)">
            <summary>
            Executed when an upgrade module is added or removed.
            </summary>
            <param name="slotID">Slot index the module is added to or removed from</param>
            <param name="techType">Tech type of the module being added or removed</param>
            <param name="added">True if the module is added, false if removed</param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetSlotItem(System.Int32)">
            <summary>
            Gets the quick slot type of the given slot ID.
            </summary>
            <param name="slotID">Slot index with 0 being the first</param>
            <returns>Slotted inventory item or null</returns>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.DeselectSlots">
            <summary>
            Deselects quick-slots and exits piloting.
            Misnomer but since the base class has this method, we must override it.
            Invoked when you press the Exit button while having a "currentMountedVehicle."
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.slotIDs">
            <summary>
            The slotIds of the vehicle.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.NumEfficiencyModules">
            <summary>
            The number of installed power efficiency modules.
            Automatically updated when a power efficiency module is added or removed.
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.UpgradeOnAddedActions">
            <summary>
            Actions to execute when an upgrade module is added or removed.
            The first argument is the slot ID,
            then the tech type of the module,
            finally a boolean indicating if the module is being added (true) or removed (false).
            </summary>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.isScuttled">
            <summary>
            True if the vehicle is scuttled (destroyed and ready to be salvaged).
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.DestroyVehicle">
            <summary>
            Destroys the vehicle and executes the death action.
            </summary>
            <remarks>Calls <see cref="M:AVS.BaseVehicle.AvsVehicle.DeathAction" /> and <see cref="M:AVS.BaseVehicle.AvsVehicle.ScuttleVehicle" /></remarks>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.DeathAction">
            <summary>
            Executed when the vehicle is destroyed.
            This default behavior lets the vehicle slowly sink to the bottom of the ocean.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.ScuttleVehicle">
            <summary>
            Executed when the vehicle is destroyed.
            Sets this vehicle as ready to be salvaged.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.UnscuttleVehicle">
            <summary>
            Returns the vehicle to a non-scuttled state.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnSalvage">
            <summary>
            Executed when the vehicle is salvaged.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.NewModLog(System.Collections.Generic.IReadOnlyList{System.String},AVS.Log.LogParameters)">
            <summary>
            Creates a new instance of <see cref="T:AVS.Log.SmartLog"/> preconfigured with module-specific tags.
            </summary>
            <param name="tags">An optional array of additional tags to include in the log. These tags are appended to the default module tags.</param>
            <param name="parameters">An optional array of parameters to include in the log for contextual information.</param>
            <returns>A new <see cref="T:AVS.Log.SmartLog"/> instance associated with the module and including the specified tags.</returns>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.NewLazyModLog(System.Collections.Generic.IReadOnlyList{System.String},AVS.Log.LogParameters,System.String,System.String)">
            <summary>
            Creates a new lazy instance of <see cref="T:AVS.Log.SmartLog"/> preconfigured with module-specific tags.
            Lazy logs defer the output of the log context until it is actually needed, which can improve performance.
            </summary>
            <remarks>
            When using this method, ensure that the caller type name matches the caller file name.
            </remarks>
            <param name="callerFilePath">The file path of the caller. This is automatically populated by the compiler.</param>
            <param name="memberName">The member name of the caller. This is automatically populated by the compiler.</param>
            <param name="tags">An optional array of additional tags to include in the log. These tags are appended to the default module tags.</param>
            <param name="parameters">An optional array of parameters to include in the log context.</param>
            <returns>A new <see cref="T:AVS.Log.SmartLog"/> instance associated with the module and including the specified tags.</returns>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.Owner">
            <summary>
            The root mod controller instance that owns this vehicle.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.SubConstructionComplete">
            <summary>
            Invoked via reflection by patches to notify the vehicle of a sub construction completion.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.SubConstructionBeginning">
            <summary>
            Invoked via reflection by patches to notify the vehicle of a sub construction beginning.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnCraftEnd(TechType)">
            <summary>
            Called via reflection once vehicle crafting is completed.
            </summary>
            <param name="techType">This vehicle's tech type</param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnRecipeOverride(AVS.Configuration.Recipe)">
            <summary>
            Overridable import method called when an imported recipe is loaded.
            </summary>
            <param name="recipe">Recipe restored from file</param>
            <returns>Recipe to use</returns>
        </member>
        <member name="P:AVS.BaseVehicle.AvsVehicle.IsConstructed">
            <summary>
            True if the vehicle is constructed and ready to be piloted.
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.PrefabSetupHudPing(PingType)">
            <summary>
            Constructs the vehicle's ping instance as part of the prefab setup.
            </summary>
            <param name="pingType"></param>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.OnStorageOpen(System.String,System.Boolean)">
            <summary>
            Executed when the PDA storage is opened or closed.
            </summary>
            <param name="name">Name of the storage being opened or closed</param>
            <param name="open">True if the storage was opened, otherwise false</param>
            <returns>
            The number of seconds to wait before opening the PDF, to show off the cool animations
            </returns>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetOrCreateDefaultStorageRootObject">
            <summary>
            Gets or creates a storage root object named "StorageRootObject".
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetOrCreateDefaultModulesRootObject">
            <summary>
            Gets or creates a modules root object named "ModulesRootObject".
            </summary>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.HasRoomFor(Pickupable)">
            <summary>
            Checks if the vehicle has room for the specified pickupable item in any of its storage containers.
            </summary>
            <param name="pickup">Pickupable to check</param>
            <returns>True if there is enough room, false if not</returns>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.HasInStorage(TechType,System.Int32)">
            <summary>
            Checks if the vehicle has at least the given number of items of
            the specified TechType in any of its storage containers.
            </summary>
            <param name="techType">Tech type to look for</param>
            <param name="count">Number of items to require</param>
            <returns>True if there are at least the given amount of items of the given
            tech type in this vehicle's storages</returns>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.AddToStorage(Pickupable)">
            <summary>
            Attempts to add a pickupable item to the vehicle's storage.
            </summary>
            <param name="pickup">The pickupable item to add.</param>
            <returns>True if the given pickupable could be placed in this vehicle's storages</returns>
        </member>
        <member name="M:AVS.BaseVehicle.AvsVehicle.GetStorageValues(System.Int32@,System.Int32@)">
            <summary>
            Queries the currently stored and total capacity of the vehicle's storage.
            </summary>
            <param name="stored">Out storage capacity occupied</param>
            <param name="capacity">Out total storage capacity</param>
        </member>
        <member name="T:AVS.Composition.SkimmerComposition">
            <summary>
            Vehicle composition for skimmers, which are small, fast vehicles designed for surface travel.
            </summary>
        </member>
        <member name="P:AVS.Composition.SkimmerComposition.PilotSeats">
            <summary>
            The pilot seats of the vehicle.
            </summary>
        </member>
        <member name="M:AVS.Composition.SkimmerComposition.#ctor(UnityEngine.GameObject,UnityEngine.GameObject,System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleHatchDefinition},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.Helm},AVS.Engines.AbstractEngine,UnityEngine.GameObject[],System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleBatteryDefinition},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleUpgrades},UnityEngine.BoxCollider,System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleStorage},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleStorage},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleSpotLightDefinition},System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleBatteryDefinition},System.Collections.Generic.IReadOnlyList{UnityEngine.Collider},System.Collections.Generic.IReadOnlyList{TMPro.TextMeshProUGUI},System.Collections.Generic.IReadOnlyList{UnityEngine.Transform},UnityEngine.GameObject)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.Composition.SkimmerComposition"/> class, representing the composition of a
            skimmer vehicle with its associated components and configuration.
            </summary>
            <remarks>This constructor initializes the skimmer vehicle with its various components,
            including storage, modules, hatches, pilot seats, and other optional features. The <paramref
            name="pilotSeats"/> parameter must not be null, and an empty collection will be used if no pilot seats are
            provided.</remarks>
            <param name="storageRootObject">The root <see cref="T:UnityEngine.GameObject"/> that serves as the parent for all storage-related components.</param>
            <param name="modulesRootObject">The root <see cref="T:UnityEngine.GameObject"/> that serves as the parent for all module-related components.</param>
            <param name="hatches">A collection of hatches (<see cref="T:AVS.VehicleBuilding.VehicleHatchDefinition"/>) that provide entry and exit points
            for the vehicle.</param>
            <param name="pilotSeats">A collection of pilot seats (<see cref="T:AVS.VehicleBuilding.Helm"/>) available in the vehicle. Cannot
            be null.</param>
            <param name="engine">The engine (<see cref="T:AVS.Engines.AbstractEngine"/>) that powers the vehicle. Must not be null</param>
            <param name="collisionModel"><see cref="T:UnityEngine.GameObject"/> representing the collision model of the vehicle. Must not be null. Must not be empty</param>
            <param name="batteries">An optional collection of batteries (<see cref="T:AVS.VehicleBuilding.VehicleBatteryDefinition"/>) used to power the vehicle.
            Can be null.</param>
            <param name="upgrades">An optional collection of upgrades (<see cref="T:AVS.VehicleBuilding.VehicleUpgrades"/>) installed on the vehicle.
            Can be null.</param>
            <param name="boundingBoxCollider">An optional <see cref="T:UnityEngine.BoxCollider"/> defining the bounding box of the vehicle. Can be null.</param>
            <param name="waterClipProxies">An optional collection of <see cref="T:UnityEngine.GameObject"/> proxies used for water clipping. Can be null.</param>
            <param name="innateStorages">An optional collection of innate storage components (<see cref="T:AVS.VehicleBuilding.VehicleStorage"/>) built into
            the vehicle. Can be null.</param>
            <param name="modularStorages">An optional collection of modular storage components (<see cref="T:AVS.VehicleBuilding.VehicleStorage"/>) that can be
            added to the vehicle. Can be null.</param>
            <param name="headlights">An optional collection of floodlights (<see cref="T:AVS.VehicleBuilding.VehicleSpotLightDefinition"/>) used as headlights for
            the vehicle. Can be null.</param>
            <param name="canopyWindows">An optional collection of <see cref="T:UnityEngine.GameObject"/> instances representing the canopy windows of the vehicle.
            Can be null.</param>
            <param name="backupBatteries">An optional collection of backup batteries (<see cref="T:AVS.VehicleBuilding.VehicleBatteryDefinition"/>) for the vehicle. Can
            be null.</param>
            <param name="denyBuildingColliders">An optional collection of <see cref="T:UnityEngine.Collider"/> instances that prevent building in certain areas. Can be
            null.</param>
            <param name="subNameDecals">An optional collection of <see cref="T:TMPro.TextMeshProUGUI"/> decals used to display the vehicle's name. Can
            be null.</param>
            <param name="lavaLarvaAttachPoints">An optional collection of <see cref="T:UnityEngine.Transform"/> points where lava larvae can attach. Can be null.</param>
            <param name="leviathanGrabPoint">An optional <see cref="T:UnityEngine.GameObject"/> representing the grab point for leviathans. Can be null.</param>
        </member>
        <member name="T:AVS.Composition.SubmarineComposition">
            <summary>
            Represents the composition of a submarine vehicle, including all relevant objects, lights, seats, and optional components.
            Inherits from <see cref="T:AVS.Composition.VehicleComposition"/> and adds submarine-specific parts such as tethers, pilot seats, navigation lights, and more.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.TetherSources">
            <summary>
            The list of active tethers in the submarine.
            Each tether is an object with attached SphereCollider,
            no renderers or rigidbodies,
            and scale set to 1, 1, 1.
            As long as a player is within the radius of at least one tether,
            they will be considered to be inside the submarine.
            Must not be empty.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.Helms">
            <summary>
            The list of helm stations in the submarine.
            Each helm allows a player to pilot the submarine.
            Must not be empty.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.Floodlights">
            <summary>
            Optional flood light definitions.
            If non-empty, these lights will be controlled using the control panel, if installed.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.InteriorLights">
            <summary>
            Optional interior light definitions.
            If non-empty, these lights will be controlled using the control panel, if installed.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.NavigationPortLights">
            <summary>
            External navigation lights located on the port side of the submarine.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.NavigationStarboardLights">
            <summary>
            External navigation lights located on the starboard side of the submarine.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.NavigationPositionLights">
            <summary>
            External position navigation lights.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.NavigationWhiteStrobeLights">
            <summary>
            White strobe lights that also emit light.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.NavigationRedStrobeLights">
            <summary>
            Red strobe lights that also emit light.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.ControlPanel">
            <summary>
            Optional parent game object for the flood light control panel.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.Fabricator">
            <summary>
            Optional pre-install fabricator parent game object.
            If not null, a fabricator will be automatically created as child of this game object.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.ColorPicker">
            <summary>
            Optional color picker console game object to construct necessary components in.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmarineComposition.RespawnPoint">
            <summary>
            Optional respawn point in case the character dies.
            If null, a respawn point will automatically be created in the vehicle's root object.
            </summary>
        </member>
        <member name="M:AVS.Composition.SubmarineComposition.#ctor(UnityEngine.GameObject,UnityEngine.GameObject,System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.Helm},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleHatchDefinition},AVS.Engines.AbstractEngine,UnityEngine.GameObject[],System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleSpotLightDefinition},System.Collections.Generic.IReadOnlyList{UnityEngine.Light},System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},UnityEngine.GameObject,UnityEngine.GameObject,UnityEngine.GameObject,UnityEngine.GameObject,System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleBatteryDefinition},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleUpgrades},UnityEngine.BoxCollider,System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleStorage},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleStorage},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleSpotLightDefinition},System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleBatteryDefinition},System.Collections.Generic.IReadOnlyList{UnityEngine.Collider},System.Collections.Generic.IReadOnlyList{TMPro.TextMeshProUGUI},System.Collections.Generic.IReadOnlyList{UnityEngine.Transform},UnityEngine.GameObject,System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.MobileWaterPark})">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.Composition.SubmarineComposition"/> class with the specified components and configuration.
            </summary>
            <param name="storageRootObject">The parent object for all storage objects. Must not be null and not the same as vehicle object.</param>
            <param name="modulesRootObject">The parent object for all modules. Must not be null and not the same as vehicle object.</param>
            <param name="tetherSources">The list of active tethers in the submarine. Must not be null or empty.</param>
            <param name="helms">The list of helm stations in the submarine. Must not be null or empty.</param>
            <param name="hatches">Entry/exit hatches for the submarine. Must not be null or empty.</param>
            <param name="floodlights">Optional flood light definitions. If non-empty, these lights will be controlled using the control panel, if installed.</param>
            <param name="interiorLights">Optional interior light definitions. If non-empty, these lights will be controlled using the control panel, if installed.</param>
            <param name="navigationPortLights">External navigation lights located on the port side of the submarine.</param>
            <param name="navigationStarboardLights">External navigation lights located on the starboard side of the submarine.</param>
            <param name="navigationPositionLights">External position navigation lights.</param>
            <param name="navigationWhiteStrobeLights">White strobe lights that also emit light.</param>
            <param name="navigationRedStrobeLights">Red strobe lights that also emit light.</param>
            <param name="controlPanel">Optional parent game object for the flood light control panel.</param>
            <param name="fabricator">Optional pre-install fabricator parent game object. If not null, a fabricator will be automatically created as child of this game object.</param>
            <param name="colorPicker">Optional color picker console game object to construct necessary components in.</param>
            <param name="respawnPoint">Optional respawn point in case the character dies. If null, a respawn point will automatically be created in the vehicle's root object.</param>
            <param name="collisionModel">Objects containing all colliders. Must not be null. Must not contain the vehicle object.</param>
            <param name="batteries">Power cell definitions. Optional.</param>
            <param name="upgrades">Upgrade module definitions. Optional.</param>
            <param name="boundingBoxCollider">Single box collider for the vehicle. Can be null.</param>
            <param name="waterClipProxies">Water clip proxies. Optional.</param>
            <param name="innateStorages">Innate storages. Optional.</param>
            <param name="modularStorages">Modular storages. Optional.</param>
            <param name="headlights">Headlights. Optional.</param>
            <param name="canopyWindows">Canopy windows. Optional.</param>
            <param name="backupBatteries">Backup batteries. Optional.</param>
            <param name="denyBuildingColliders">Deny building colliders. Optional.</param>
            <param name="subNameDecals">Sub name decals. Optional.</param>
            <param name="lavaLarvaAttachPoints">Lava larva attach points. Optional.</param>
            <param name="leviathanGrabPoint">Leviathan grab point. Optional.</param>
            <param name="engine">The engine that powers the vehicle. Must not be null.</param>
            <param name="waterParks">Optional mobile water parks</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="tetherSources"/> or <paramref name="helms"/> is null or empty.</exception>
        </member>
        <member name="T:AVS.Composition.SubmersibleComposition">
            <summary>
            The vehicle composition for submersible vehicles.
            </summary>
        </member>
        <member name="P:AVS.Composition.SubmersibleComposition.PilotSeat">
            <summary>
            The pilot seat of the vehicle.
            Must not be null.
            </summary>
        </member>
        <member name="M:AVS.Composition.SubmersibleComposition.#ctor(AVS.VehicleBuilding.Helm,UnityEngine.GameObject,UnityEngine.GameObject,System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleHatchDefinition},AVS.Engines.AbstractEngine,UnityEngine.GameObject[],System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleBatteryDefinition},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleUpgrades},UnityEngine.BoxCollider,System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleStorage},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleStorage},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleSpotLightDefinition},System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleBatteryDefinition},System.Collections.Generic.IReadOnlyList{UnityEngine.Collider},System.Collections.Generic.IReadOnlyList{TMPro.TextMeshProUGUI},System.Collections.Generic.IReadOnlyList{UnityEngine.Transform},UnityEngine.GameObject)">
            <summary>
            Represents the composition of a submersible vehicle, including all required and optional parts.
            Inherits from <see cref="T:AVS.Composition.VehicleComposition"/> and adds a required pilot seat.
            </summary>
            <param name="pilotSeat">
            The pilot seat of the vehicle. Must not be null and must have a non-null <c>Seat</c> property.
            </param>
            <param name="storageRootObject">
            The parent object for all storage objects. Must not be null and not the same as the vehicle object.
            </param>
            <param name="modulesRootObject">
            The parent object for all modules. Must not be null and not the same as the vehicle object.
            </param>
            <param name="hatches">
            Entry/exit hatches for the submarine. Must not be null or empty.
            </param>
            <param name="collisionModel">
            Object containing all colliders. Must not be null. Must not contain the vehicle object.
            </param>
            <param name="batteries">
            Power cell definitions. Optional. Can be null or empty.
            </param>
            <param name="upgrades">
            Upgrade module definitions. Optional. Can be null or empty.
            </param>
            <param name="boundingBoxCollider">
            Single box collider for the vehicle. Can be null.
            </param>
            <param name="waterClipProxies">
            Water clip proxies. Optional. Can be null or empty.
            </param>
            <param name="innateStorages">
            Storages that the vehicle always has. Optional. Can be null or empty.
            </param>
            <param name="modularStorages">
            Storages that can be added to the vehicle by the player. Optional. Can be null or empty.
            </param>
            <param name="headlights">
            Collection and configuration of headlights. Optional. Can be null or empty.
            </param>
            <param name="canopyWindows">
            Window objects automatically hidden when the vehicle is being piloted. Optional. Can be null or empty.
            </param>
            <param name="backupBatteries">
            Batteries exclusively used for the AI. Optional. Can be null or empty.
            </param>
            <param name="denyBuildingColliders">
            Colliders within which building is not permitted. Optional. Can be null or empty.
            </param>
            <param name="subNameDecals">
            Text output objects containing the vehicle name decals. Optional. Can be null or empty.
            </param>
            <param name="lavaLarvaAttachPoints">
            Attach points for Lava Larvae. Optional. Can be null or empty.
            </param>
            <param name="leviathanGrabPoint">
            Leviathan grab point. Optional.
            </param>
            <param name="engine">The engine that powers the vehicle. Must not be null.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="pilotSeat"/> is null or if <c>PilotSeat.Seat</c> is null.
            </exception>
        </member>
        <member name="T:AVS.Composition.VehicleComposition">
            <summary>
            Objects, transforms, and components as identified by the derived mod vehicle.
            GameObjects, Transforms, and Components are expected to be contained by the vehicle
            or its children.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.StorageRootObject">
            <summary>
            The parent object for all storage objects.
            Must not be null. Must be different from the vehicle game object.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.ModulesRootObject">
            <summary>
            The parent object for all modules.
            Must not be null. Must be different from the vehicle game object.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.CollisionModel">
            <summary>
            Base objects containing colliders (and nothing else).
            AVS can do without but the Subnautica system uses these object to switch off colliders while docked.
            Therefore, this value must be set, even if the referenced game objects contain nothing.
            Should not contain the vehicle root as this would disable everything.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.Hatches">
            <summary>
            Entry/exit hatches for the submarine.
            Required not empty
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.Batteries">
            <summary>
            Power cell definitions. Can be empty which disallows any batteries.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.Upgrades">
            <summary>
            Upgrade module definitions. Can be empty which disallows any upgrades.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.BoundingBoxCollider">
            <summary>
            Single box collider that contains the entire vehicle.
            While the code can handle this not being set, it really should be set.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.WaterClipProxies">
            <summary>
            Empty game objects that each define a box that clips the water surface.
            These objects must not contain any components (renderers or otherwise).
            The position identifies their center, the size their extents.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.WaterParks">
            <summary>
            Mobile water parks in the vehicle.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.InnateStorages">
            <summary>
            Storages that the vehicle always has.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.ModularStorages">
            <summary>
            Storages that can be added to the vehicle by the player.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.Headlights">
            <summary>
            Collection and configuration of headlights, to be rendered volumetrically while the player is outside the vehicle.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.CanopyWindows">
            <summary>
            Window objects automatically hidden when the vehicle is being piloted as to avoid reflections.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.BackupBatteries">
            <summary>
            Batteries exclusively used for the AI. Not sure anyone uses these.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.DenyBuildingColliders">
            <summary>
            Base object building is not permitted within these colliders.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.SubNameDecals">
            <summary>
            Text output objects containing the vehicle name decals.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.LavaLarvaAttachPoints">
            <summary>
            Contains the attach points for the Lava Larvae (to suck away energy).
            If empty, the vehicle will not be attacked by Lava Larvae.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.LeviathanGrabPoint">
            <summary>
            Leviathan grab point, used by the Leviathan to grab the vehicle.
            If empty, the vehicle's own object is used as the grab point.
            </summary>
        </member>
        <member name="P:AVS.Composition.VehicleComposition.Engine">
            <summary>
            The engine that powers the vehicle. Must not be null.
            </summary>
            <remarks>
            The engine must be instantiated and attached during or before querying the vehicle's
            composition.
            As such, it is the only part that is not just derived from the model but rather newly
            created on demand.
            It is contained here because the mod vehicle requires it and it must be custom defined
            by the client vehicle.
            </remarks>
        </member>
        <member name="M:AVS.Composition.VehicleComposition.#ctor(UnityEngine.GameObject,UnityEngine.GameObject,System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleHatchDefinition},AVS.Engines.AbstractEngine,UnityEngine.GameObject[],System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleBatteryDefinition},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleUpgrades},UnityEngine.BoxCollider,System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleStorage},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleStorage},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleSpotLightDefinition},System.Collections.Generic.IReadOnlyList{UnityEngine.GameObject},System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.VehicleBatteryDefinition},System.Collections.Generic.IReadOnlyList{UnityEngine.Collider},System.Collections.Generic.IReadOnlyList{TMPro.TextMeshProUGUI},System.Collections.Generic.IReadOnlyList{UnityEngine.Transform},UnityEngine.GameObject,System.Collections.Generic.IReadOnlyList{AVS.VehicleBuilding.MobileWaterPark})">
            <summary>
            Constructs a VehicleComposition with required and optional parts.
            </summary>
            <param name="storageRootObject">The parent object for all storage objects. Must not be null and not the same as vehicle object.</param>
            <param name="modulesRootObject">The parent object for all modules. Must not be null and not the same as vehicle object.</param>
            <param name="collisionModel">Base objects containing all colliders. Must not be null. Should contain at least one object. Must not contain the submarine root. Expect these to be disabled</param>
            <param name="hatches">Entry/exit hatches. Must not be null or empty.</param>
            <param name="batteries">Power cell definitions. Optional.</param>
            <param name="upgrades">Upgrade module definitions. Optional.</param>
            <param name="boundingBoxCollider">Single box collider for the vehicle. Can be null.</param>
            <param name="waterClipProxies">Water clip proxies. Optional.</param>
            <param name="innateStorages">Innate storages. Optional.</param>
            <param name="modularStorages">Modular storages. Optional.</param>
            <param name="headlights">Headlights. Optional.</param>
            <param name="canopyWindows">Canopy windows. Optional.</param>
            <param name="backupBatteries">Backup batteries. Optional.</param>
            <param name="denyBuildingColliders">Deny building colliders. Optional.</param>
            <param name="subNameDecals">Sub name decals. Optional.</param>
            <param name="lavaLarvaAttachPoints">Lava larva attach points. Optional.</param>
            <param name="leviathanGrabPoint">Leviathan grab point. Optional.</param>
            <param name="waterParks">Mobile water parks. Optional.</param>
            <param name="engine">The engine that powers the vehicle. Must not be null.</param>
        </member>
        <member name="T:AVS.Configuration.RecipeIngredient">
            <summary>
            Ingredient of a recipe, including its type and quantity.
            </summary>
        </member>
        <member name="P:AVS.Configuration.RecipeIngredient.Type">
            <summary>
            Type of the ingredient.
            </summary>
        </member>
        <member name="P:AVS.Configuration.RecipeIngredient.Amount">
            <summary>
            Amount of the ingredient required for the recipe.
            </summary>
        </member>
        <member name="M:AVS.Configuration.RecipeIngredient.#ctor(TechType,System.Int32)">
            <summary>
            Constructs an ingredient
            </summary>
            <param name="type">The type of the ingredient, represented as a <see cref="T:TechType"/>.</param>
            <param name="amount">The quantity of the ingredient required. Must be a positive, non-zero integer.</param>
        </member>
        <member name="T:AVS.Configuration.RecipeBuilder">
            <summary>
            Recipe builder for creating complex recipes with multiple ingredients.
            </summary>
        </member>
        <member name="M:AVS.Configuration.RecipeBuilder.Add(System.Collections.Generic.IEnumerable{AVS.Configuration.RecipeIngredient})">
            <summary>
            Adds the ingredients from the specified <see cref="T:AVS.Configuration.Recipe"/> to the current recipe.
            </summary>
            <param name="recipe">Recipe to add ingredients of</param>
            <returns>this</returns>
        </member>
        <member name="M:AVS.Configuration.RecipeBuilder.Include(AVS.Configuration.RecipeBuilder)">
            <summary>
            Combines the current recipe with another recipe by merging their ingredients.
            </summary>
            <param name="other">The recipe to combine with the current recipe. Must not be <see langword="null"/>.</param>
            <returns>A new <see cref="T:AVS.Configuration.RecipeBuilder"/> instance containing the combined ingredients of both recipes.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="other"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:AVS.Configuration.RecipeBuilder.AddOneOfEach(System.Collections.Generic.IEnumerable{TechType})">
            <summary>
            Adds one unit of each specified <see cref="T:TechType"/> to the recipe.
            </summary>
            <param name="types">A collection of <see cref="T:TechType"/> values to add to the recipe. Any <see cref="F:TechType.None"/> values
            in the collection are ignored.</param>
            <returns>The updated <see cref="T:AVS.Configuration.RecipeBuilder"/> instance, allowing for method chaining.</returns>
        </member>
        <member name="M:AVS.Configuration.RecipeBuilder.Add(TechType,System.Int32)">
            <summary>
            Adds a specified ingredient and its quantity to the recipe.
            </summary>
            <remarks>If <paramref name="type"/> is <see cref="F:TechType.None"/> or <paramref
            name="amount"/> is less than or equal to zero,  the method does nothing and returns the current
            instance.</remarks>
            <param name="type">The type of ingredient to add. Must not be <see cref="F:TechType.None"/>.</param>
            <param name="amount">The quantity of the ingredient to add. Must be greater than zero.</param>
            <returns>The current <see cref="T:AVS.Configuration.RecipeBuilder"/> instance, allowing for method chaining.</returns>
        </member>
        <member name="M:AVS.Configuration.RecipeBuilder.Add(System.ValueTuple{TechType,System.Int32})">
            <summary>
            Adds an ingredient to the recipe with the specified type and amount.
            </summary>
            <param name="ingredient">A tuple containing the type of the ingredient and the amount to add.  <paramref name="ingredient.Type.Type"/>
            specifies the ingredient type, and  <paramref name="ingredient.Amount.Amount"/> specifies the quantity to add.</param>
            <returns>The current <see cref="T:AVS.Configuration.RecipeBuilder"/> instance, allowing for method chaining.</returns>
        </member>
        <member name="M:AVS.Configuration.RecipeBuilder.Add(AVS.Configuration.RecipeIngredient)">
            <summary>
            Adds the specified ingredient to the recipe.
            </summary>
            <param name="ingredient">The ingredient to add, including its type and amount.</param>
            <returns>A <see cref="T:AVS.Configuration.RecipeBuilder"/> instance with the ingredient added, allowing for method chaining.</returns>
        </member>
        <member name="M:AVS.Configuration.RecipeBuilder.op_Addition(AVS.Configuration.RecipeBuilder,AVS.Configuration.RecipeIngredient)">
            <summary>
            Adds a <see cref="T:AVS.Configuration.RecipeIngredient"/> to the <see cref="T:AVS.Configuration.RecipeBuilder"/> and returns the updated builder.
            </summary>
            <param name="builder">The <see cref="T:AVS.Configuration.RecipeBuilder"/> to which the ingredient will be added.</param>
            <param name="ingredient">The <see cref="T:AVS.Configuration.RecipeIngredient"/> to add to the builder.</param>
            <returns>The updated <see cref="T:AVS.Configuration.RecipeBuilder"/> instance with the added ingredient.</returns>
        </member>
        <member name="M:AVS.Configuration.RecipeBuilder.op_Addition(AVS.Configuration.RecipeBuilder,System.ValueTuple{TechType,System.Int32})">
            <summary>
            Adds an ingredient to the recipe using the specified <see cref="T:TechType"/> and amount.
            </summary>
            <remarks>This operator provides a convenient way to add ingredients to a recipe by using the
            <c>+</c> operator.</remarks>
            <param name="builder">The <see cref="T:AVS.Configuration.RecipeBuilder"/> instance to which the ingredient will be added.</param>
            <param name="ingredient">A tuple containing the <see cref="T:TechType"/> of the ingredient and the amount to add. The first item
            represents the type of the ingredient, and the second item represents the quantity.</param>
            <returns>A new <see cref="T:AVS.Configuration.RecipeBuilder"/> instance with the specified ingredient added.</returns>
        </member>
        <member name="M:AVS.Configuration.RecipeBuilder.Done">
            <summary>
            Constructs a new <see cref="T:AVS.Configuration.Recipe"/> instance using the specified ingredients.
            </summary>
            <returns>A <see cref="T:AVS.Configuration.Recipe"/> object containing the provided ingredients.</returns>
        </member>
        <member name="T:AVS.Configuration.NewRecipe">
            <summary>
            Sequential builder for a <see cref="T:AVS.Configuration.Recipe"/>.
            </summary>
        </member>
        <member name="M:AVS.Configuration.NewRecipe.FromNothing">
            <summary>
            Creates a new instance of the <see cref="T:AVS.Configuration.NewRecipe"/> class with no ingredients.
            </summary>
            <returns>A new <see cref="T:AVS.Configuration.NewRecipe"/> instance.</returns>
        </member>
        <member name="M:AVS.Configuration.NewRecipe.From(AVS.Configuration.Recipe)">
            <summary>
            Creates a new <see cref="T:AVS.Configuration.NewRecipe"/> instance from the specified <see cref="T:AVS.Configuration.Recipe"/>.
            </summary>
            <param name="recipe">The source <see cref="T:AVS.Configuration.Recipe"/> to convert. Must not be <see langword="null"/>.</param>
            <returns>A new <see cref="T:AVS.Configuration.NewRecipe"/> instance containing the ingredients from the specified <see cref="T:AVS.Configuration.Recipe"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="recipe"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:AVS.Configuration.NewRecipe.Add(TechType,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:AVS.Configuration.NewRecipe"/> class with an initial ingredient.
            </summary>
            <param name="type">The type of the ingredient to add to the recipe.</param>
            <param name="amount">The quantity of the ingredient to add. Must be a positive integer.</param>
            <returns>A new <see cref="T:AVS.Configuration.NewRecipe"/> instance containing the specified ingredient.</returns>
        </member>
        <member name="M:AVS.Configuration.NewRecipe.Add(System.ValueTuple{TechType,System.Int32})">
            <summary>
            Creates a new instance of <see cref="T:AVS.Configuration.NewRecipe"/> with the specified ingredient.
            </summary>
            <param name="ingredient">A tuple containing the ingredient's <see cref="T:TechType"/> and the amount to be added. The <see
            cref="T:TechType"/> specifies the type of the ingredient, and the amount must be a positive integer.</param>
            <returns>A new <see cref="T:AVS.Configuration.NewRecipe"/> instance with the specified ingredient added.</returns>
        </member>
        <member name="T:AVS.Configuration.Recipe">
            <summary>
            Readonly vehicle construction recipe.
            </summary>
        </member>
        <member name="P:AVS.Configuration.Recipe.Example">
            <summary>
            Gets an example recipe that demonstrates the required ingredients for crafting.
            </summary>
        </member>
        <member name="P:AVS.Configuration.Recipe.Empty">
            <summary>
            Gets an empty recipe with no ingredients.
            </summary>
        </member>
        <member name="M:AVS.Configuration.Recipe.Import(AVS.RootModController,Nautilus.Crafting.RecipeData,AVS.Configuration.Recipe)">
            <summary>
            Converts a <see cref="T:Nautilus.Crafting.RecipeData"/> to a <see cref="T:AVS.Configuration.Recipe"/>.
            </summary>
            <param name="recipeData">Data to import</param>
            <param name="fallback">Fallback recipe to return in case of invalid data</param>
            <param name="rmc">Root mod controller, used for logging</param>
            <returns>Imported data</returns>
        </member>
        <member name="M:AVS.Configuration.Recipe.#ctor(System.Collections.Generic.IEnumerable{AVS.Configuration.RecipeIngredient})">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.Configuration.Recipe"/> class with the specified ingredients.
            </summary>
            <remarks>If multiple ingredients of the same type are provided, the last one in the collection
            will overwrite the previous entries in the internal dictionary.</remarks>
            <param name="ingredients">A collection of <see cref="T:AVS.Configuration.RecipeIngredient"/> objects representing the ingredients and their amounts. Each
            ingredient's type will be used as a key in the internal dictionary.</param>
        </member>
        <member name="P:AVS.Configuration.Recipe.IsEmpty">
            <summary>
            Gets a value indicating whether the collection of ingredients is empty.
            </summary>
        </member>
        <member name="M:AVS.Configuration.Recipe.ToRecipeData">
            <summary>
            Converts the current object to a <see cref="T:Nautilus.Crafting.RecipeData"/> instance.
            </summary>
            <remarks>The method creates a new <see cref="T:Nautilus.Crafting.RecipeData"/> object and populates its
            ingredients list based on the current object's <c>IngredientsDictionary</c>. Each entry in the dictionary is
            transformed into a <see cref="T:Ingredient"/> and added to the resulting recipe.</remarks>
            <returns>A <see cref="T:Nautilus.Crafting.RecipeData"/> instance containing the ingredients from the current object's
            <c>IngredientsDictionary</c>.</returns>
        </member>
        <member name="M:AVS.Configuration.Recipe.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AVS.Configuration.Recipe.CheckValidity(System.String)">
            <summary>
            Checks if the recipe is valid for vehicle registration.
            </summary>
            <param name="vehicleName"></param>
            <returns></returns>
        </member>
        <member name="M:AVS.Configuration.Recipe.Equals(AVS.Configuration.Recipe)">
            <inheritdoc />
        </member>
        <member name="M:AVS.Configuration.Recipe.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:AVS.Configuration.Recipe.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AVS.Configuration.Recipe.op_Equality(AVS.Configuration.Recipe,AVS.Configuration.Recipe)">
            <summary>
            Determines whether two <see cref="T:AVS.Configuration.Recipe"/> instances are equal.
            </summary>
            <param name="left">The first <see cref="T:AVS.Configuration.Recipe"/> instance to compare.</param>
            <param name="right">The second <see cref="T:AVS.Configuration.Recipe"/> instance to compare.</param>
            <returns><c>true</c> if the specified <see cref="T:AVS.Configuration.Recipe"/> instances are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:AVS.Configuration.Recipe.op_Inequality(AVS.Configuration.Recipe,AVS.Configuration.Recipe)">
            <summary>
            Determines whether two <see cref="T:AVS.Configuration.Recipe"/> instances are not equal.
            </summary>
            <param name="left">The first <see cref="T:AVS.Configuration.Recipe"/> instance to compare.</param>
            <param name="right">The second <see cref="T:AVS.Configuration.Recipe"/> instance to compare.</param>
            <returns>
            <c>true</c> if the two <see cref="T:AVS.Configuration.Recipe"/> instances are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:AVS.Configuration.Recipe.ToString">
            <inheritdoc />
        </member>
        <member name="T:AVS.Configuration.VehicleConfiguration">
            <summary>
            Read-only vehicle configuration
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.PingSprite">
            <summary>
            Sprite to show when the camera is sufficiently far away while the vehicle is not boarded.
            Also used on the map, if used.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.SaveFileSprite">
            <summary>
            Sprite to attach to the save file in the preview.
            Should be very abstract, ideally just an outline.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.Recipe">
            <summary>
            Construction recipe.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.AllowRecipeOverride">
            <summary>
            If true, the recipe can be overridden by a JSON file created in the "recipes" folder.
            If so, the imported recipe is passed to <see cref="M:AVS.BaseVehicle.AvsVehicle.OnRecipeOverride(AVS.Configuration.Recipe)"/> before being applied.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.UnlockedSprite">
            <summary>
            Optional sprite that shows in the popup when the tech type of this vehicle is unlocked
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.Description">
            <summary>
            Localized description of the vehicle.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.EncyclopediaEntry">
            <summary>
            Localized encyclopedia entry for this vehicle.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.EncyclopediaImage">
            <summary>
            Image to show in the encyclopedia entry, if any.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.CraftingSprite">
            <summary>
            The sprite to show in the crafting menu of the mobile vehicle bay.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.ModuleBackgroundImage">
            <summary>
            The image to show in the background of the vehicle's module menu.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.UnlockedWith">
            <summary>
            Type that, if unlocked, also automatically unlocks this vehicle for crafting.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.MaxHealth">
            <summary>
            Maximum health of the vehicle.
            100 is very low.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.CrushDamage">
            <summary>
            Absolute damage dealt to the vehicle when it decended below its crush depth.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.CrushDamageFrequency">
            <summary>
            Number of times per second the vehicle will take damage when below its crush depth.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.GhostAdultBiteDamage">
            <summary>
            Absolute damage dealt to the vehicle when it is bit by a adult ghost leviathan.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.GhostJuvenileBiteDamage">
            <summary>
            Absolute damage dealt to the vehicle when it is bit by a juvenile ghost leviathan.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.ReaperBiteDamage">
            <summary>
            Absolute damage dealt to the vehicle when it is bit by a reaper leviathan.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.Mass">
            <summary>
            Physical mass of the vehicle. Must be greater than 0.
            For reference,
            Cyclop: 12000
            Abyss: 5000
            Atrama: 4250
            Odyssey: 3500
            Prawn: 1250
            Seamoth: 800
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.NumModules">
            <summary>
            Maximum number of modules that can be installed on this vehicle.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.UnlockedMessage">
            <summary>
            PDA message shown when the vehicle is unlocked.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.BaseCrushDepth">
            <summary>
            Gets the base crush depth of the vehicle, measured in meters.
            If it decends below this depth and there are up upgrades installed, it will take damage.
            Must be greater than 0.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.CrushDepthUpgrade1">
            <summary>
            Crush depth increase if a level 1 depth upgrade is installed.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.CrushDepthUpgrade2">
            <summary>
            Crush depth increase if a level 2 depth upgrade is installed.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.CrushDepthUpgrade3">
            <summary>
            Crush depth increase if a level 3 depth upgrade is installed.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.PilotingStyle">
            <summary>
            The piloting style of the vehicle. Affects player animations.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.TimeToConstruct">
            <summary>
            The number of seconds it takes to construct the vehicle in the mobile vehicle bay.
            Reference times: Seamoth : 10 seconds, Cyclops : 20, Rocket Base : 25
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.ConstructionGhostColor">
            <summary>
            Gets the color used for rendering construction ghost objects.
            Applied only if not black.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.ConstructionWireframeColor">
            <summary>
            Gets the color used for rendering construction wireframes.
            Applied only if not black.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.CanLeviathanGrab">
            <summary>
            True if the vehicle can be grabbed by a leviathan.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.CanMoonpoolDock">
            <summary>
            True if the vehicle can be docked in a moonpool.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.CyclopsDockRotation">
            <summary>
            Rotation applied when docking the vehicle in a cyclops.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.AutoFixMaterials">
            <summary>
            True to automatically correct shaders of the vehicle's materials.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.MaterialAdaptConfig">
            <summary>
            Material adaptation configuration. If not provided, initialized with a new instance of <see cref="T:AVS.MaterialAdapt.DefaultMaterialAdaptConfig" />.
            Effective only if <see cref="P:AVS.Configuration.VehicleConfiguration.AutoFixMaterials"/> is true.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.InitialBaseColor">
            <summary>
            The initial base color of the vehicle.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.InitialStripeColor">
            <summary>
            The initial stripe color of the vehicle.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.InitialInteriorColor">
            <summary>
            The initial interior color of the vehicle.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.InitialNameColor">
            <summary>
            The initial name color of the vehicle.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.GetVoiceSoundVolume">
            <summary>
            Gets the current setting regarding sound volume for voice messages sent by the vehicle's <see cref="T:AVS.VoiceQueue"/> component,
            further modified by Subnautica's global voice and master sound volumes.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.GetVoiceSubtitlesEnabled">
            <summary>
            Gets the current setting whether to show subtitles for voice messages sent by the vehicle's <see cref="T:AVS.VoiceQueue"/> component.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.HudTemperatureIsFahrenheit">
            <summary>
            True if the HUD temperature display is in Fahrenheit.
            Defaults to false.
            </summary>
        </member>
        <member name="P:AVS.Configuration.VehicleConfiguration.CanEnterHelmWithoutPower">
            <summary>
            True if the player can enter the helm of the vehicle even if the vehicle has no power.
            Defaults to false.
            </summary>
        </member>
        <member name="M:AVS.Configuration.VehicleConfiguration.#ctor(UnityEngine.Sprite,UnityEngine.Sprite,UnityEngine.Sprite,UnityEngine.Sprite,UnityEngine.Sprite,System.Nullable{AVS.VehicleComponents.VehicleColor},System.Nullable{AVS.VehicleComponents.VehicleColor},System.Nullable{AVS.VehicleComponents.VehicleColor},System.Nullable{AVS.VehicleComponents.VehicleColor},AVS.MaterialAdapt.IMaterialAdaptConfig,AVS.Configuration.Recipe,System.Boolean,System.String,System.String,UnityEngine.Sprite,TechType,System.Int32,System.Nullable{System.Int32},System.Single,System.Single,System.Single,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,AVS.BaseVehicle.AvsVehicle.PilotingStyle,System.Single,System.Nullable{UnityEngine.Color},System.Nullable{UnityEngine.Color},System.Boolean,System.Boolean,System.Nullable{UnityEngine.Quaternion},System.Boolean,System.Func{System.Single},System.Func{System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.Configuration.VehicleConfiguration"/> class with the specified parameters.
            </summary>
            <param name="pingSprite">Sprite to show when the camera is sufficiently far away. Also used on the map, if used.</param>
            <param name="saveFileSprite">Sprite to attach to the save file in the preview. Should be very abstract, ideally just an outline.</param>
            <param name="recipe">Construction recipe. If null, uses <see cref="P:AVS.Configuration.Recipe.Example"/>.</param>
            <param name="allowRecipeOverride">If true, the recipe can be overridden by a JSON file created in the "recipes" folder.</param>
            <param name="unlockedSprite">Sprite shown when the vehicle is unlocked.</param>
            <param name="description">Localized description of the vehicle.</param>
            <param name="encyclopediaEntry">Localized encyclopedia entry for this vehicle.</param>
            <param name="encyclopediaImage">Image to show in the encyclopedia entry, if any.</param>
            <param name="craftingSprite">The sprite to show in the crafting menu of the mobile vehicle bay.</param>
            <param name="moduleBackgroundImage">The image to show in the background of the vehicle's module menu.</param>
            <param name="unlockedWith">Type that, if unlocked, also automatically unlocks this vehicle for crafting.</param>
            <param name="maxHealth">Maximum health of the vehicle. Must be greater than 0.</param>
            <param name="crushDamage">Absolute damage dealt to the vehicle when it descends below its crush depth.</param>
            <param name="ghostAdultBiteDamage">Absolute damage dealt to the vehicle when it is bit by an adult ghost leviathan.</param>
            <param name="ghostJuvenileBiteDamage">Absolute damage dealt to the vehicle when it is bit by a juvenile ghost leviathan.</param>
            <param name="reaperBiteDamage">Absolute damage dealt to the vehicle when it is bit by a reaper leviathan.</param>
            <param name="mass">Physical mass of the vehicle. Must be greater than 0.
            For reference,
            Cyclop: 12000
            Abyss: 5000
            Atrama: 4250
            Odyssey: 3500
            Prawn: 1250
            Seamoth: 800
            </param>
            <param name="numModules">Maximum number of modules that can be installed on this vehicle.</param>
            <param name="unlockedMessage">PDA message shown when the vehicle is unlocked.</param>
            <param name="baseCrushDepth">Base crush depth of the vehicle, measured in meters. Must be greater than 0.</param>
            <param name="crushDepthUpgrade1">Crush depth increase if a level 1 depth upgrade is installed.</param>
            <param name="crushDepthUpgrade2">Crush depth increase if a level 2 depth upgrade is installed.</param>
            <param name="crushDepthUpgrade3">Crush depth increase if a level 3 depth upgrade is installed.</param>
            <param name="crushDamageFrequency">Number of times per second the vehicle will take damage when below its crush depth.</param>
            <param name="pilotingStyle">The piloting style of the vehicle. Affects player animations.</param>
            <param name="timeToConstruct">The number of seconds it takes to construct the vehicle in the mobile vehicle bay.</param>
            <param name="constructionGhostColor">Color used for rendering construction ghost objects. Applied only if not black.</param>
            <param name="constructionWireframeColor">Color used for rendering construction wireframes. Applied only if not black.</param>
            <param name="canLeviathanGrab">True if the vehicle can be grabbed by a leviathan.</param>
            <param name="canMoonpoolDock">True if the vehicle can be docked in a moonpool.</param>
            <param name="cyclopsDockRotation">Rotation applied when docking the vehicle in a cyclops.</param>
            <param name="autoFixMaterials">True to automatically correct shaders to the vehicle's materials.</param>
            <param name="initialBaseColor">Initial base color of the vehicle. If null, defaults to <see cref="P:AVS.VehicleComponents.VehicleColor.Default"/>.</param>
            <param name="initialStripeColor">Initial stripe color of the vehicle. If null, defaults to <see cref="P:AVS.VehicleComponents.VehicleColor.Default"/>.</param>
            <param name="initialInteriorColor">Initial interior color of the vehicle. If null, defaults to <see cref="P:AVS.VehicleComponents.VehicleColor.Default"/>.</param>
            <param name="initialNameColor">Initial name color of the vehicle. If null, defaults to <see cref="P:AVS.VehicleComponents.VehicleColor.Default"/>.</param>
            <param name="getVoiceSoundVolume">Query function to get the sound volume for voice messages sent by the vehicle's <see cref="T:AVS.VoiceQueue"/> component. If null, defaults to always 1</param>
            <param name="getVoiceSubtitlesEnabled">Query function to get whether to show subtitles for voice messages sent by the vehicle's <see cref="T:AVS.VoiceQueue"/> component. If null, defaults to always false</param>
            <param name="materialAdaptConfig">Optional configuration for material adaptation</param>
            <param name="hudTemperatureIsFahrenheit">True if the HUD temperature display is in Fahrenheit.</param>
            <param name="canEnterHelmWithoutPower">True if the player can enter the helm of the vehicle even if the vehicle has no power.</param>
        </member>
        <member name="T:AVS.ControlPanel">
            <summary>
            Represents the control panel for a submarine, handling button initialization, lighting, and user interactions.
            Implements listeners for vehicle status, power, lights, and autopilot events.
            </summary>
        </member>
        <member name="F:AVS.ControlPanel.av">
            <summary>
            The submarine instance this control panel is associated with.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.Init">
            <summary>
            Initializes the control panel by finding and configuring all button GameObjects and their logic.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.ResetAllButtonLighting">
            <summary>
            Resets all button lighting to their default states.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.AdjustButtonLightingForPowerDown">
            <summary>
            Adjusts all button lighting for a power down state (all off).
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.EmptyClick">
            <summary>
            No-op click handler for unused buttons.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.EmptyHover">
            <summary>
            Hover handler for unused buttons, sets the hand reticle text and icon.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.HeadlightsClick">
            <summary>
            Click handler for the headlights button, toggles the headlights.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.HeadlightsHover">
            <summary>
            Hover handler for the headlights button, sets the hand reticle text and icon.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.FloodlightsClick">
            <summary>
            Click handler for the floodlights button, toggles the floodlights.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.FloodlightsHover">
            <summary>
            Hover handler for the floodlights button, sets the hand reticle text and icon.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.NavLightsClick">
            <summary>
            Click handler for the navigation lights button, toggles the navigation lights.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.NavLightsHover">
            <summary>
            Hover handler for the navigation lights button, sets the hand reticle text and icon.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.InteriorLightsClick">
            <summary>
            Click handler for the interior lights button, toggles the interior lights.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.InteriorLightsHover">
            <summary>
            Hover handler for the interior lights button, sets the hand reticle text and icon.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.DefaultColorClick">
            <summary>
            Click handler for the default color button, paints the vehicle with its default style.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.DefaultColorHover">
            <summary>
            Hover handler for the default color button, sets the hand reticle text and icon.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.PowerClick">
            <summary>
            Click handler for the power button, toggles vehicle power if there is charge.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.PowerHover">
            <summary>
            Hover handler for the power button, sets the hand reticle text and icon.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.AutopilotClick">
            <summary>
            Click handler for the autopilot button. (Not implemented.)
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.AutopilotHover">
            <summary>
            Hover handler for the autopilot button, sets the hand reticle text and icon.
            </summary>
        </member>
        <member name="M:AVS.ControlPanel.SetButtonLightingActive(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Sets the lighting state of a button, enabling or disabling emission and color.
            </summary>
            <param name="button">The button GameObject.</param>
            <param name="active">True to enable lighting, false to disable.</param>
        </member>
        <member name="M:AVS.ControlPanel.AVS#ILightsStatusListener#OnHeadlightsOn">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#ILightsStatusListener#OnHeadlightsOff">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#ILightsStatusListener#OnInteriorLightsOn">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#ILightsStatusListener#OnInteriorLightsOff">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#IVehicleStatusListener#OnTakeDamage">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#ILightsStatusListener#OnFloodlightsOn">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#ILightsStatusListener#OnFloodlightsOff">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#ILightsStatusListener#OnNavLightsOn">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#ILightsStatusListener#OnNavLightsOff">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#IPowerListener#OnBatterySafe">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#IPowerListener#OnBatteryLow">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#IPowerListener#OnBatteryNearlyEmpty">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#IPowerListener#OnBatteryDepleted">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#IPowerListener#OnPowerUp">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#IPowerListener#OnPowerDown">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#IPowerListener#OnBatteryDead">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#IPowerListener#OnBatteryRevive">
            <inheritdoc />
        </member>
        <member name="M:AVS.ControlPanel.AVS#IVehicleStatusListener#OnNearbyLeviathan">
            <inheritdoc />
        </member>
        <member name="T:AVS.Crafting.CraftPath">
            <summary>
            Path to a tab or module in the crafting interface.
            </summary>
        </member>
        <member name="P:AVS.Crafting.CraftPath.Segments">
            <summary>
            The segments of the crafting path.
            </summary>
        </member>
        <member name="P:AVS.Crafting.CraftPath.IsEmpty">
            <summary>
            Gets a value indicating whether the collection of segments is empty.
            </summary>
        </member>
        <member name="P:AVS.Crafting.CraftPath.Length">
            <summary>
            Gets the number of segments in the collection.
            </summary>
        </member>
        <member name="P:AVS.Crafting.CraftPath.Empty">
            <summary>
            An empty crafting path, representing the root or no specific path.
            </summary>
        </member>
        <member name="P:AVS.Crafting.CraftPath.Last">
            <summary>
            Gets the last segment of the path. An empty path returns an empty string.
            </summary>
        </member>
        <member name="P:AVS.Crafting.CraftPath.Previous">
            <summary>
            Gets the segment preceding the last segment in the collection.
            </summary>
        </member>
        <member name="P:AVS.Crafting.CraftPath.Parent">
            <summary>
            Gets the parent path, which is the path without the last segment.
            </summary>
        </member>
        <member name="P:AVS.Crafting.CraftPath.Ancestors">
            <summary>
            Gets an enumerable collection of <see cref="T:AVS.Crafting.CraftPath"/> objects representing the ancestors of the
            current path.
            </summary>
        </member>
        <member name="M:AVS.Crafting.CraftPath.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs a new <see cref="T:AVS.Crafting.CraftPath"/> with the specified segments.
            </summary>
        </member>
        <member name="M:AVS.Crafting.CraftPath.#ctor(System.String[])">
            <summary>
            Constructs a new <see cref="T:AVS.Crafting.CraftPath"/> with the specified segments.
            </summary>
        </member>
        <member name="M:AVS.Crafting.CraftPath.Append(System.String)">
            <summary>
            Appends a new segment to the crafting path.
            </summary>
            <param name="segment">Segment to append. Must not be empty (after trim) and must not contain / characters</param>
            <returns>New crafting path with the given segment appended</returns>
        </member>
        <member name="M:AVS.Crafting.CraftPath.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Crafting.CraftPath.Equals(AVS.Crafting.CraftPath)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Crafting.CraftPath.op_Equality(AVS.Crafting.CraftPath,AVS.Crafting.CraftPath)">
            <summary>
            Determines if two <see cref="T:AVS.Crafting.CraftPath"/> instances are equal.
            </summary>
            <param name="left">The first <see cref="T:AVS.Crafting.CraftPath"/> to compare.</param>
            <param name="right">The second <see cref="T:AVS.Crafting.CraftPath"/> to compare.</param>
            <returns>True if the two <see cref="T:AVS.Crafting.CraftPath"/> instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:AVS.Crafting.CraftPath.op_Inequality(AVS.Crafting.CraftPath,AVS.Crafting.CraftPath)">
            <summary>
            Determines whether two <see cref="T:AVS.Crafting.CraftPath"/> instances are not equal.
            </summary>
            <param name="left">The first <see cref="T:AVS.Crafting.CraftPath"/> to compare.</param>
            <param name="right">The second <see cref="T:AVS.Crafting.CraftPath"/> to compare.</param>
            <returns>True if the two <see cref="T:AVS.Crafting.CraftPath"/> instances are not equal; otherwise, false.</returns>
        </member>
        <member name="M:AVS.Crafting.CraftPath.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Crafting.CraftPath.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Crafting.CraftPath.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Crafting.CraftPath.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Crafting.CraftPath.op_Addition(AVS.Crafting.CraftPath,System.String)">
            <summary>
            Concatenates a specified segment to the end of the given <see cref="T:AVS.Crafting.CraftPath"/>.
            </summary>
            <param name="path">The <see cref="T:AVS.Crafting.CraftPath"/> to which the segment will be appended.</param>
            <param name="segment">The segment to append to the <see cref="T:AVS.Crafting.CraftPath"/>. Cannot be null or empty.</param>
            <returns>A new <see cref="T:AVS.Crafting.CraftPath"/> instance with the segment appended.</returns>
        </member>
        <member name="T:AVS.Crafting.UpgradeCompat">
            <summary>
            Specifies compatibility flags for registering upgrades with different vehicle types.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeCompat.SkipAvsVehicle">
            <summary>
            If true, skip registering for <see cref="T:AVS.BaseVehicle.AvsVehicle" />.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeCompat.SkipSeamoth">
            <summary>
            If true, skip registering for Seamoth.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeCompat.SkipExosuit">
            <summary>
            If true, skip registering for Exosuit.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeCompat.SkipCyclops">
            <summary>
            If true, skip registering for Cyclops.
            </summary>
        </member>
        <member name="M:AVS.Crafting.UpgradeCompat.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.Crafting.UpgradeCompat"/> class with options to skip certain vehicle
            upgrades.
            </summary>
            <param name="skipAvsVehicle">If <see langword="true"/>, the AVS vehicle upgrade will be skipped; otherwise, it will be included. Defaults
            to <see langword="false"/>.</param>
            <param name="skipSeamoth">If <see langword="true"/>, the Seamoth upgrade will be skipped; otherwise, it will be included. Defaults to
            <see langword="false"/>.</param>
            <param name="skipExosuit">If <see langword="true"/>, the Exosuit upgrade will be skipped; otherwise, it will be included. Defaults to
            <see langword="false"/>.</param>
            <param name="skipCyclops">If <see langword="true"/>, the Cyclops upgrade will be skipped; otherwise, it will be included. Defaults to
            <see langword="false"/>.</param>
        </member>
        <member name="P:AVS.Crafting.UpgradeCompat.AvsVehiclesOnly">
            <summary>
            Default compatibility settings for registering upgrades to be applicable only to
            AVS vehicles.
            </summary>
        </member>
        <member name="T:AVS.Crafting.UpgradeTechTypes">
            <summary>
            Holds TechTypes for an upgrade for each supported vehicle type.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeTechTypes.ForAvsVehicle">
            <summary>
            Tech type applicable for any AVS vehicle.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeTechTypes.ForSeamoth">
            <summary>
            Tech type applicable for Seamoth vehicles.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeTechTypes.ForExosuit">
            <summary>
            Tech type applicable for PRAWN exosuits.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeTechTypes.ForCyclops">
            <summary>
            Tech type applicable for Cyclops vehicles.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeTechTypes.AllNotNone">
            <summary>
            Gets an enumerable collection of <see cref="T:TechType"/> values that are not <see cref="F:TechType.None"/>.
            </summary>
        </member>
        <member name="M:AVS.Crafting.UpgradeTechTypes.#ctor(TechType,TechType,TechType,TechType)">
            <summary>
            Constructor for UpgradeTechTypes.
            </summary>
        </member>
        <member name="M:AVS.Crafting.UpgradeTechTypes.HasTechType(TechType)">
            <summary>
            Determines whether the specified <see cref="T:TechType"/> is not <see cref="F:TechType.None" />
            and equal to any of the contained types.
            </summary>
        </member>
        <member name="M:AVS.Crafting.UpgradeTechTypes.Equals(AVS.Crafting.UpgradeTechTypes)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Crafting.UpgradeTechTypes.CountSumIn(Equipment)">
            <summary>
            Counts the total number of upgrades locally registered
            in the provided <see cref="T:Equipment"/> instance.
            </summary>
            <param name="modules">Modules to count instances in</param>
            <returns>The total number of modules installed of the local type</returns>
        </member>
        <member name="M:AVS.Crafting.UpgradeTechTypes.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Crafting.UpgradeTechTypes.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Crafting.UpgradeTechTypes.op_Equality(AVS.Crafting.UpgradeTechTypes,AVS.Crafting.UpgradeTechTypes)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Crafting.UpgradeTechTypes.op_Inequality(AVS.Crafting.UpgradeTechTypes,AVS.Crafting.UpgradeTechTypes)">
            <inheritdoc/>
        </member>
        <member name="T:AVS.Crafting.VehicleType">
            <summary>
            Enum representing supported vehicle types.
            </summary>
        </member>
        <member name="F:AVS.Crafting.VehicleType.AvsVehicle">
            <summary>
            Any mod vehicle type
            </summary>
        </member>
        <member name="F:AVS.Crafting.VehicleType.Seamoth">
            <summary>
            The Seamoth vehicle type.
            </summary>
        </member>
        <member name="F:AVS.Crafting.VehicleType.Prawn">
            <summary>
            The Prawn exosuit vehicle type.
            </summary>
        </member>
        <member name="F:AVS.Crafting.VehicleType.Cyclops">
            <summary>
            The Cyclops vehicle type.
            </summary>
        </member>
        <member name="F:AVS.Crafting.VehicleType.Custom">
            <summary>
            Vehicle specific type, used for upgrades that are specific to one vehicle type.
            </summary>
        </member>
        <member name="M:AVS.Crafting.ToggleableTracker.OnToggle(Vehicle,System.Int32,System.Boolean)">
            <summary>
            Invoked if the toggleable upgrade is toggled on or off.
            </summary>
        </member>
        <member name="T:AVS.Crafting.UpgradeRegistrar">
            <summary>
            Handles registration and management of vehicle upgrades, including their icons, actions, and compatibility.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeRegistrar.UpgradeTechTypeMap">
            <summary>
            Global map TechType -> AvsVehicleModule for all registered upgrades.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeRegistrar.UpgradeClassIdMap">
            <summary>
            Global map ClassId -> AvsVehicleModule for all registered upgrades.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeRegistrar.UpgradeIcons">
            <summary>
            Dictionary of upgrade icons, indexed by upgrade ClassId.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeRegistrar.OnAddActions">
            <summary>
            List of actions to invoke when an upgrade is added or removed.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeRegistrar.OnToggleActions">
            <summary>
            List of actions to invoke when a toggleable upgrade is toggled.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeRegistrar.OnSelectChargeActions">
            <summary>
            List of actions to invoke when a selectable chargeable upgrade is selected.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeRegistrar.OnChargeActions">
            <summary>
            List of actions to invoke when a selectable chargeable upgrade is selected.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeRegistrar.OnSelectActions">
            <summary>
            List of actions to invoke when a selectable upgrade is selected.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeRegistrar.ToggledActions">
            <summary>
            Tracks currently toggled actions for vehicles, by vehicle, slot, and coroutine.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeRegistrar.ActiveToggle.EventTime">
            <summary>
            The Unity time at which the event is processed.
            </summary>
        </member>
        <member name="P:AVS.Crafting.UpgradeRegistrar.ActiveToggle.LastRepeatTime">
            <summary>
            The Unity time of last execution of <see cref="M:AVS.UpgradeModules.Variations.ToggleableModule.OnRepeat(AVS.UpgradeModules.Variations.IToggleState)"/>
            before this one (if currently processing this).
            </summary>
        </member>
        <member name="M:AVS.Crafting.UpgradeRegistrar.RegisterUpgrade(AVS.UpgradeModules.Node,AVS.UpgradeModules.AvsVehicleModule,AVS.Crafting.UpgradeCompat)">
            <summary>
            Registers a AvsVehicleUpgrade and sets up its icons, recipes, and actions for compatible vehicle types.
            </summary>
            <param name="node">The folder containing the upgrade assets.</param>
            <param name="upgrade">The upgrade to register.</param>
            <param name="compat">Compatibility flags for vehicle types.</param>
            <returns>UpgradeTechTypes containing TechTypes for each vehicle type.</returns>
        </member>
        <member name="M:AVS.Crafting.UpgradeRegistrar.ValidateAvsVehicleUpgrade(AVS.UpgradeModules.AvsVehicleModule,AVS.Crafting.UpgradeCompat)">
            <summary>
            Validates the provided <see cref="T:AVS.UpgradeModules.AvsVehicleModule"/> and its compatibility settings.
            </summary>
            <param name="upgrade">The upgrade to validate.</param>
            <param name="compat">Compatibility flags.</param>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="M:AVS.Crafting.UpgradeRegistrar.RegisterAvsVehicleModule(AVS.UpgradeModules.Node,AVS.UpgradeModules.AvsVehicleModule)">
            <summary>
            Registers the <see cref="T:AVS.UpgradeModules.AvsVehicleModule"/> for <see cref="T:AVS.BaseVehicle.AvsVehicle"/>, sets up its prefab, recipe, and unlock conditions.
            </summary>
            <param name="folder">The folder containing the upgrade assets.</param>
            <param name="upgrade">The upgrade to register.</param>
            <returns>The TechType assigned to the upgrade.</returns>
        </member>
        <member name="M:AVS.Crafting.UpgradeRegistrar.RegisterUpgradeMethods(AVS.UpgradeModules.AvsVehicleModule,AVS.Crafting.UpgradeCompat,AVS.Crafting.UpgradeTechTypes@,System.Boolean)">
            <summary>
            Registers the appropriate upgrade methods (passive, selectable, chargeable, toggleable) for the upgrade.
            </summary>
            <param name="upgrade">The upgrade to register methods for.</param>
            <param name="compat">Compatibility flags.</param>
            <param name="utt">Reference to UpgradeTechTypes to update.</param>
            <param name="isPDASetup">Indicates if PDA registration has occurred.</param>
        </member>
        <member name="M:AVS.Crafting.UpgradeRegistrar.RegisterPassiveUpgradeActions(AVS.UpgradeModules.AvsVehicleModule,AVS.Crafting.UpgradeCompat,AVS.Crafting.UpgradeTechTypes@,System.Boolean@)">
            <summary>
            Registers passive upgrade actions for the upgrade.
            </summary>
            <param name="upgrade">The upgrade to register.</param>
            <param name="compat">Compatibility flags.</param>
            <param name="utt">Reference to UpgradeTechTypes to update.</param>
            <param name="isPDASetup">Indicates if PDA registration has occurred.</param>
        </member>
        <member name="M:AVS.Crafting.UpgradeRegistrar.RegisterSelectableUpgradeActions(AVS.UpgradeModules.AvsVehicleModule,AVS.Crafting.UpgradeCompat,AVS.Crafting.UpgradeTechTypes@,System.Boolean@)">
            <summary>
            Registers selectable upgrade actions for the upgrade.
            </summary>
            <param name="upgrade">The upgrade to register.</param>
            <param name="compat">Compatibility flags.</param>
            <param name="utt">Reference to UpgradeTechTypes to update.</param>
            <param name="isPDASetup">Indicates if PDA registration has occurred.</param>
        </member>
        <member name="M:AVS.Crafting.UpgradeRegistrar.RegisterSelectableChargeableUpgradeActions(AVS.UpgradeModules.AvsVehicleModule,AVS.Crafting.UpgradeCompat,AVS.Crafting.UpgradeTechTypes@,System.Boolean@)">
            <summary>
            Registers selectable chargeable upgrade actions for the upgrade.
            </summary>
            <param name="upgrade">The upgrade to register.</param>
            <param name="compat">Compatibility flags.</param>
            <param name="utt">Reference to UpgradeTechTypes to update.</param>
            <param name="isPDASetup">Indicates if PDA registration has occurred.</param>
        </member>
        <member name="M:AVS.Crafting.UpgradeRegistrar.RegisterChargeableUpgradeActions(AVS.UpgradeModules.AvsVehicleModule,AVS.Crafting.UpgradeCompat,AVS.Crafting.UpgradeTechTypes@,System.Boolean@)">
            <summary>
            Registers chargeable upgrade actions for the upgrade.
            </summary>
            <param name="upgrade">The upgrade to register.</param>
            <param name="compat">Compatibility flags.</param>
            <param name="utt">Reference to UpgradeTechTypes to update.</param>
            <param name="isPDASetup">Indicates if PDA registration has occurred.</param>
        </member>
        <member name="M:AVS.Crafting.UpgradeRegistrar.RegisterToggleableUpgradeActions(AVS.UpgradeModules.AvsVehicleModule,AVS.Crafting.UpgradeCompat,AVS.Crafting.UpgradeTechTypes@,System.Boolean@)">
            <summary>
            Registers toggleable upgrade actions for the upgrade.
            </summary>
            <param name="upgrade">The upgrade to register.</param>
            <param name="compat">Compatibility flags.</param>
            <param name="utt">Reference to UpgradeTechTypes to update.</param>
            <param name="isPDASetup">Indicates if PDA registration has occurred.</param>
        </member>
        <member name="T:AVS.Engines.AbstractEngine">
            <summary>
            Base class for vehicle engines in the mod framework.
            Handles movement, physics, and input for mod vehicles.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.CenterOfMass">
            <summary>
            Center of mass for the vehicle, applied during Start().
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.AngularDrag">
            <summary>
            Angular drag for the vehicle, applied during Start().
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.MV">
            <summary>
            Gets the vehicle component associated with this engine.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.RB">
            <summary>
            Gets the Rigidbody component associated with this engine.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.CanMoveAboveWater">
            <summary>
            Gets or sets a value indicating whether the vehicle can move above water.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.CanRotateAboveWater">
            <summary>
            Gets or sets a value indicating whether the vehicle can rotate above water.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.ForwardTopSpeed">
            <summary>
            The forward top speed of the vehicle when using this engine.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.ReverseTopSpeed">
            <summary>
            The reverse top speed of the vehicle when using this engine.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.StrafeMaxSpeed">
            <summary>
            Gets the maximum speed allowed for non-vertical strafing movements when using this engine.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.VerticalMaxSpeed">
            <summary>
            Gets the maximum vertical speed allowed when using this engine.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.ForwardAcceleration">
            <summary>
            Forward acceleration rate of the vehicle when using this engine.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.ReverseAcceleration">
            <summary>
            Reverse acceleration rate of the vehicle when using this engine.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.StrafeAcceleration">
            <summary>
            Strafe acceleration rate of the vehicle when using this engine.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.VerticalAcceleration">
            <summary>
            Vertical acceleration rate of the vehicle when using this engine.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.WaterDragDecay">
            <summary>
            Fraction of the current velocity that is reduced per second due to drag
            while under water.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.AirDragDecay">
            <summary>
            Fraction of the current velocity that is reduced per second due to drag
            while airborne.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.DragDecay">
            <summary>
            Gets the drag decay fraction of the current velocity (per second)
            depending on the environment (water or air).
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.ForwardMomentum">
            <summary>
            Gets or sets the forward momentum of the vehicle.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.UpdateForwardMomentum(System.Single)">
            <summary>
            Updates the forward momentum based on input magnitude.
            </summary>
            <param name="inputMagnitude">Input value for forward movement.</param>
        </member>
        <member name="F:AVS.Engines.AbstractEngine._rightMomentum">
            <summary>
            Current right (strafe) momentum of the vehicle.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.RightMomentum">
            <summary>
            Gets or sets the right (strafe) momentum of the vehicle.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.UpdateRightMomentum(System.Single)">
            <summary>
            Updates the right (strafe) momentum based on input magnitude.
            </summary>
            <param name="inputMagnitude">Input value for right movement.</param>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.UpMomentum">
            <summary>
            Gets or sets the upward momentum of the vehicle.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.UpdateUpMomentum(System.Single)">
            <summary>
            Updates the upward momentum based on input magnitude.
            </summary>
            <param name="inputMagnitude">Input value for upward movement.</param>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.Awake">
            <summary>
            Unity Awake callback. Initializes references and registers the engine.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.Start">
            <summary>
            Unity Start callback. Applies center of mass and angular drag.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.OnDisable">
            <summary>
            Unity OnDisable callback. Stops engine sounds if needed.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.FixedUpdate">
            <summary>
            Unity FixedUpdate callback. Handles movement and physics updates.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.CanMove">
            <summary>
            Determines if the vehicle can move.
            </summary>
            <returns>True if movement is allowed.</returns>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.CanRotate">
            <summary>
            Determines if the vehicle can rotate.
            </summary>
            <returns>True if rotation is allowed.</returns>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.DoMovement">
            <summary>
            Performs the movement logic for the vehicle.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.DoFixedUpdate">
            <summary>
            Performs additional fixed update logic, such as drag application.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.MoveWithInput(UnityEngine.Vector3)">
            <summary>
            Applies movement input to the vehicle.
            </summary>
            <param name="moveInput">Movement input vector.</param>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.ApplyPlayerControls(UnityEngine.Vector3)">
            <summary>
            Applies player controls to the vehicle, including acceleration modifiers.
            </summary>
            <param name="moveDirection">Movement direction vector.</param>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.DoMovementInputs">
            <summary>
            Handles movement input and power drain if the player is controlling the vehicle.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.DrainPower(UnityEngine.Vector3)">
            <summary>
            Drains power from the vehicle based on movement input.
            </summary>
            <param name="moveDirection">Movement direction vector.</param>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.KillMomentum">
            <summary>
            Kills all movement momentum for the vehicle.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.ControlRotation">
            <summary>
            Controls the rotation of the vehicle based on player input.
            </summary>
        </member>
        <member name="P:AVS.Engines.AbstractEngine.DragThresholdSpeed">
            <summary>
            Gets or sets the drag threshold speed below which momentum is killed.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.ApplyDrag(UnityEngine.Vector3)">
            <summary>
            Applies drag to the vehicle's momentum based on movement input.
            </summary>
            <param name="move">Movement input vector.</param>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.ExecutePhysicsMove">
            <summary>
            Executes the physics-based movement for the vehicle.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.CanTakeInputs">
            <summary>
            Determines if the vehicle can take player inputs.
            </summary>
            <returns>True if input is allowed.</returns>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.GetTimeToStop">
            <summary>
            Gets the estimated time (in seconds) for the vehicle to come to a stop.
            </summary>
            <returns>Maximum time to stop among all axes.</returns>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.AVS#IScuttleListener#OnScuttle">
            <summary>
            Called when the vehicle is scuttled. Disables the engine.
            </summary>
        </member>
        <member name="M:AVS.Engines.AbstractEngine.AVS#IScuttleListener#OnUnscuttle">
            <summary>
            Called when the vehicle is unscuttled. Enables the engine.
            </summary>
        </member>
        <member name="T:AVS.Engines.SurfaceVessel">
            <summary>
            Engine of a surface vessel, such as a boat or a ship.
            </summary>
        </member>
        <member name="P:AVS.Engines.SurfaceVessel.WaterLine">
            <summary>
            The current water line to rise or fall to.
            </summary>
        </member>
        <member name="P:AVS.Engines.SurfaceVessel.Buoyancy">
            <summary>
            Gets the buoyancy factor of the object that is applied per second.
            </summary>
        </member>
        <member name="P:AVS.Engines.SurfaceVessel.ForeAftStability">
            <summary>
            Gets the fore-aft stability factor of the vessel, applied per second.
            Higher values result in faster stabilization of pitch.
            </summary>
        </member>
        <member name="P:AVS.Engines.SurfaceVessel.PortStarboardStability">
            <summary>
            Gets the port-starboard stability factor of the vessel, applied per second.
            Higher values result in faster stabilization of roll.
            </summary>
        </member>
        <member name="P:AVS.Engines.SurfaceVessel.CanMoveAboveWater">
            <inheritdoc/>
        </member>
        <member name="P:AVS.Engines.SurfaceVessel.CanRotateAboveWater">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Engines.SurfaceVessel.Awake">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Engines.SurfaceVessel.ControlRotation">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Engines.SurfaceVessel.MoveWithInput(UnityEngine.Vector3)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Engines.SurfaceVessel.DoFixedUpdate">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Engines.SurfaceVessel.IsTrackingSurface">
            <summary>
            Determines whether the vessel is tracking the surface of the water.
            </summary>
            <returns>True if the vessel is tracking the water surface; otherwise, false.</returns>
        </member>
        <member name="T:AVS.Interfaces.AutopilotStatusChange">
            <summary>
            Signals that an autopilot status change has occurred.
            </summary>
        </member>
        <member name="P:AVS.Interfaces.AutopilotStatusChange.PreviousStatus">
            <summary>
            The previous autopilot status.
            </summary>
        </member>
        <member name="P:AVS.Interfaces.AutopilotStatusChange.NewStatus">
            <summary>
            The new autopilot status.
            </summary>
        </member>
        <member name="M:AVS.Interfaces.AutopilotStatusChange.#ctor(AVS.Interfaces.AutopilotStatus,AVS.Interfaces.AutopilotStatus)">
            <summary>
            Constructs a new autopilot status change.
            </summary>
            <param name="previousStatus">Previous status</param>
            <param name="newStatus">New status</param>
        </member>
        <member name="T:AVS.Interfaces.AutopilotEvent">
            <summary>
            Plain autopilot event
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotEvent.PowerUp">
            <summary>
            Engine is powering up.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotEvent.PowerDown">
            <summary>
            Engine is powering down.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotEvent.PlayerEntry">
            <summary>
            The player has entered the vehicle.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotEvent.PlayerExit">
            <summary>
            The player has exited the vehicle.
            </summary>
        </member>
        <member name="T:AVS.Interfaces.AutopilotStatus">
            <summary>
            Autopilot events that can be detected by the autopilot system.
            More severe statuses are generally greater than less severe statuses.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.HealthSafe">
            <summary>
            Health status is now within safe limits.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.HealthLow">
            <summary>
            Health is low, but not critical.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.HealthCritical">
            <summary>
            Health is critical and requires immediate attention.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.PowerSafe">
            <summary>
            Power is within safe limits.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.PowerLow">
            <summary>
            Power is low, but not critical.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.PowerCritical">
            <summary>
            Power is critical and requires immediate attention.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.PowerDead">
            <summary>
            Battery/ies is/are dead and require(s) replacement.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.DepthSafe">
            <summary>
            Depth is within safe limits.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.DepthNearCrush">
            <summary>
            Depth is near crush depth, but not critical.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.DepthBeyondCrush">
            <summary>
            Depth is beyond crush depth and will cause damage.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.LeviathanSafe">
            <summary>
            No leviathan is nearby.
            </summary>
        </member>
        <member name="F:AVS.Interfaces.AutopilotStatus.LeviathanNearby">
            <summary>
            Leviathan is nearby.
            </summary>
        </member>
        <member name="T:AVS.Interfaces.IAutopilotEventListener">
            <summary>
            Listener for events detected by the autopilot system.
            </summary>
        </member>
        <member name="M:AVS.Interfaces.IAutopilotEventListener.Signal(AVS.Interfaces.AutopilotEvent)">
            <summary>
            Signals that the specified event was detected by the autopilot system.
            </summary>
            <param name="autopilotEvent">Event that was detected</param>
        </member>
        <member name="M:AVS.Interfaces.IAutopilotEventListener.Signal(AVS.Interfaces.AutopilotStatusChange)">
            <summary>
            Signals that a status change has occurred in the autopilot system.
            </summary>
            <param name="statusChange">Change that was detected</param>
        </member>
        <member name="T:AVS.Interfaces.INullTestableType">
            <summary>
            Declares that a type does <b>NOT</b> inherit from <b><see cref="T:UnityEngine.Object"/></b> and can safely be null-tested
            by is null / is not null
            </summary>
        </member>
        <member name="T:AVS.Interfaces.ISoundSource">
            <summary>
            Instantiated sound source
            </summary>
        </member>
        <member name="P:AVS.Interfaces.ISoundSource.Died">
            <summary>
            The sound source has been destroyed. It is no longer playing
            </summary>
        </member>
        <member name="M:AVS.Interfaces.ISoundSource.ApplyLiveChanges(AVS.Audio.SoundSettings)">
            <summary>
            Updates the live settings of this sound source.
            </summary>
            <param name="cfg">New configuration</param>
        </member>
        <member name="P:AVS.Interfaces.ISoundSource.IsPlaying">
            <summary>
            Check if the sound source is playing
            </summary>
        </member>
        <member name="P:AVS.Interfaces.ISoundSource.IsPaused">
            <summary>
            Gets/sets whether the sound source is currently paused
            </summary>
        </member>
        <member name="T:AVS.IDockListener">
            <summary>
            Implementations of this interface are notified when the vessel is docked or undocked.
            </summary>
        </member>
        <member name="M:AVS.IDockListener.OnDock">
            <summary>
            Notifies the listener that the vessel has been docked.
            </summary>
        </member>
        <member name="M:AVS.IDockListener.OnUndock">
            <summary>
            Notifies the listener that the vessel has been undocked.
            </summary>
        </member>
        <member name="T:AVS.ILightsStatusListener">
            <summary>
            Listener for changes in vehicle lights status.
            </summary>
        </member>
        <member name="M:AVS.ILightsStatusListener.OnHeadlightsOn">
            <summary>
            Triggered when the AVS controlled headlights are turned on.
            Called only if the vehicle has AVS controlled, declared headlights.
            </summary>
        </member>
        <member name="M:AVS.ILightsStatusListener.OnHeadlightsOff">
            <summary>
            Triggered when the AVS controlled headlights are turned off.
            Called only if the vehicle has AVS controlled, declared headlights.
            </summary>
        </member>
        <member name="M:AVS.ILightsStatusListener.OnInteriorLightsOn">
            <summary>
            Triggered when the AVS controlled interior lights are turned on.
            Called only if the vehicle has AVS controlled, declared interior lights.
            </summary>
        </member>
        <member name="M:AVS.ILightsStatusListener.OnInteriorLightsOff">
            <summary>
            Triggered when the AVS controlled interior lights are turned off.
            Called only if the vehicle has AVS controlled, declared interior lights.
            </summary>
        </member>
        <member name="M:AVS.ILightsStatusListener.OnNavLightsOn">
            <summary>
            Triggered when the AVS controlled navigation lights are turned on.
            Called only if the vehicle has AVS controlled, declared navigation lights.
            </summary>
        </member>
        <member name="M:AVS.ILightsStatusListener.OnNavLightsOff">
            <summary>
            Triggered when the AVS controlled navigation lights are turned off.
            Called only if the vehicle has AVS controlled, declared navigation lights.
            </summary>
        </member>
        <member name="M:AVS.ILightsStatusListener.OnFloodlightsOn">
            <summary>
            Triggered when the AVS controlled floodlights are turned on.
            Called only if the vehicle has AVS controlled, declared floodlights.
            </summary>
        </member>
        <member name="M:AVS.ILightsStatusListener.OnFloodlightsOff">
            <summary>
            Triggered when the AVS controlled floodlights are turned off.
            Called only if the vehicle has AVS controlled, declared floodlights.
            </summary>
        </member>
        <member name="T:AVS.IPlayerListener">
            <summary>
            Listener interface for player-related events in the AVS vehicle.
            </summary>
        </member>
        <member name="M:AVS.IPlayerListener.OnPlayerEntry">
            <summary>
            The player has entered the vehicle.
            </summary>
        </member>
        <member name="M:AVS.IPlayerListener.OnPlayerExit">
            <summary>
            The player has exited the vehicle.
            </summary>
        </member>
        <member name="M:AVS.IPlayerListener.OnPilotBegin">
            <summary>
            The player has begun piloting the vehicle.
            </summary>
        </member>
        <member name="M:AVS.IPlayerListener.OnPilotEnd">
            <summary>
            The player has ended piloting the vehicle.
            </summary>
        </member>
        <member name="T:AVS.IPowerChanged">
            <summary>
            Notifies the listener that the power state of the vehicle has changed.
            </summary>
        </member>
        <member name="M:AVS.IPowerChanged.OnPowerChanged(System.Boolean,System.Boolean)">
            <summary>
            Handles changes in power state, including battery power and switch status.
            </summary>
            <param name="hasBatteryPower">A value indicating whether the vehicle has battery power.  <see langword="true"/> if battery power is
            available; otherwise, <see langword="false"/>.</param>
            <param name="isSwitchedOn">A value indicating whether the vehicle is switched on.  <see langword="true"/> if the device is switched on;
            otherwise, <see langword="false"/>.</param>
        </member>
        <member name="T:AVS.IPowerListener">
            <summary>
            More extensive power listener interface for vehicles.
            </summary>
        </member>
        <member name="M:AVS.IPowerListener.OnPowerUp">
            <summary>
            The vehicle powered up.
            </summary>
        </member>
        <member name="M:AVS.IPowerListener.OnPowerDown">
            <summary>
            The vehicle has powered down.
            </summary>
        </member>
        <member name="M:AVS.IPowerListener.OnBatteryDead">
            <summary>
            The vehicle's batteries died.
            </summary>
        </member>
        <member name="M:AVS.IPowerListener.OnBatteryRevive">
            <summary>
            The vehicle's batteries were replaced or otherwise revived.
            </summary>
        </member>
        <member name="M:AVS.IPowerListener.OnBatterySafe">
            <summary>
            The battery level is now safe.
            </summary>
        </member>
        <member name="M:AVS.IPowerListener.OnBatteryLow">
            <summary>
            The battery level is low.
            </summary>
        </member>
        <member name="M:AVS.IPowerListener.OnBatteryNearlyEmpty">
            <summary>
            The battery level is nearly empty.
            </summary>
        </member>
        <member name="M:AVS.IPowerListener.OnBatteryDepleted">
            <summary>
            The battery is completely depleted.
            </summary>
        </member>
        <member name="T:AVS.IScuttleListener">
            <summary>
            Listeners for scuttling events.
            </summary>
        </member>
        <member name="M:AVS.IScuttleListener.OnScuttle">
            <summary>
            Executed when the scuttle action is triggered.
            </summary>
        </member>
        <member name="M:AVS.IScuttleListener.OnUnscuttle">
            <summary>
            Executed when the unscuttle action is triggered.
            </summary>
        </member>
        <member name="T:AVS.IVehicleStatusListener">
            <summary>
            Listener interface for vehicle status changes.
            </summary>
        </member>
        <member name="M:AVS.IVehicleStatusListener.OnTakeDamage">
            <summary>
            The vehicle has taken damage
            </summary>
        </member>
        <member name="M:AVS.IVehicleStatusListener.OnNearbyLeviathan">
            <summary>
            The vehicle has detected a nearby leviathan.
            </summary>
        </member>
        <member name="T:AVS.Localization.DefaultTranslator">
            <summary>
            Default implementation of the ITranslator interface for AVS.
            </summary>
        </member>
        <member name="M:AVS.Localization.DefaultTranslator.GetTranslationKey(AVS.Localization.TranslationKey)">
            <summary>
            Retrieves the translation key for a given TranslationKey enum value.
            </summary>
        </member>
        <member name="M:AVS.Localization.DefaultTranslator.Translate(AVS.Localization.TranslationKey)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Localization.DefaultTranslator.Translate``1(AVS.Localization.TranslationKey,``0)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Localization.DefaultTranslator.Translate``2(AVS.Localization.TranslationKey,``0,``1)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Localization.DefaultTranslator.Translate``3(AVS.Localization.TranslationKey,``0,``1,``2)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Localization.DefaultTranslator.Translate``4(AVS.Localization.TranslationKey,``0,``1,``2,``3)">
            <inheritdoc/>
        </member>
        <member name="T:AVS.Localization.ITranslator">
            <summary>
            Translator interface for AVS.
            </summary>
        </member>
        <member name="M:AVS.Localization.ITranslator.Translate(AVS.Localization.TranslationKey)">
            <summary>
            Translates a simple translation key.
            </summary>
        </member>
        <member name="M:AVS.Localization.ITranslator.Translate``1(AVS.Localization.TranslationKey,``0)">
            <summary>
            Translates a translation key with arguments.
            </summary>
        </member>
        <member name="M:AVS.Localization.ITranslator.Translate``2(AVS.Localization.TranslationKey,``0,``1)">
            <summary>
            Translates a translation key with arguments.
            </summary>
        </member>
        <member name="M:AVS.Localization.ITranslator.Translate``3(AVS.Localization.TranslationKey,``0,``1,``2)">
            <summary>
            Translates a translation key with arguments.
            </summary>
        </member>
        <member name="M:AVS.Localization.ITranslator.Translate``4(AVS.Localization.TranslationKey,``0,``1,``2,``3)">
            <summary>
            Translates a translation key with arguments.
            </summary>
        </member>
        <member name="T:AVS.Localization.Text">
            <summary>
            Helpers for creating <see cref="T:AVS.Localization.MaybeTranslate"/> instances.
            </summary>
        </member>
        <member name="M:AVS.Localization.Text.Translated(System.String)">
            <summary>
            Creates a new instance of <see cref="T:AVS.Localization.MaybeTranslate"/> with the specified text.
            </summary>
            <param name="text">The text to be used for translation.</param>
            <returns>A <see cref="T:AVS.Localization.MaybeTranslate"/> object initialized with the provided text.</returns>
        </member>
        <member name="M:AVS.Localization.Text.Untranslated(System.String)">
            <summary>
            Creates a <see cref="T:AVS.Localization.MaybeTranslate"/> instance representing untranslated text.
            </summary>
            <param name="text">The text to be marked as untranslated. Cannot be null.</param>
            <returns>A <see cref="T:AVS.Localization.MaybeTranslate"/> object with the specified text marked as untranslated.</returns>
        </member>
        <member name="T:AVS.Localization.MaybeTranslate">
            <summary>
            Text that may or may not be translated.
            </summary>
        </member>
        <member name="P:AVS.Localization.MaybeTranslate.Text">
            <summary>
            The text to display or use as key for localization.
            </summary>
        </member>
        <member name="P:AVS.Localization.MaybeTranslate.Localize">
            <summary>
            True if the text should be localized, false if it should be used as is.
            </summary>
        </member>
        <member name="P:AVS.Localization.MaybeTranslate.Rendered">
            <summary>
            Gets the localized or original text based on the localization setting.
            </summary>
        </member>
        <member name="M:AVS.Localization.MaybeTranslate.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of MaybeTranslate.
            </summary>
            <param name="text">The text to display or use as key for localization</param>
            <param name="localize">True if the text should be localized, false if it should be used as is</param>
        </member>
        <member name="M:AVS.Localization.MaybeTranslate.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Localization.MaybeTranslate.Equals(AVS.Localization.MaybeTranslate)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Localization.MaybeTranslate.Equals(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Localization.MaybeTranslate.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Localization.MaybeTranslate.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Localization.MaybeTranslate.op_Equality(AVS.Localization.MaybeTranslate,AVS.Localization.MaybeTranslate)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Localization.MaybeTranslate.op_Inequality(AVS.Localization.MaybeTranslate,AVS.Localization.MaybeTranslate)">
            <inheritdoc/>
        </member>
        <member name="T:AVS.Localization.TranslationKey">
            <summary>
            All AVS translation keys.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.VehicleDefaultName">
            <summary>
            The localized default name of the vehicle created by AVS.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Reactor_DedicatedBattery_ChargeValueText">
            <summary>
            Produces the current charge status of a dedicated reactor battery.
            The first argument is the current charge percent as a string.
            The second is the absolute charge value.
            The third is the maximum charge value.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Fabricator_Node_DepthModules">
            <summary>
            Title of the depth node fabricator node.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Fabricator_DisplayName">
            <summary>
            Display name of the fabricator.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Fabricator_Description">
            <summary>
            Description of the fabricator.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.ColorPicker_Tab_Exterior">
            <summary>
            Tab text for the exterior color tab of the color picker.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.ColorPicker_Tab_Accent">
            <summary>
            Tab text for the primary accent color tab of the color picker.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.ColorPicker_Tab_Interior">
            <summary>
            Tab text for the interior color tab of the color picker.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.ColorPicker_Tab_Name">
            <summary>
            Tab text for the name color tab of the color picker.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Reactor_WhitelistWithPowerValue">
            <summary>
            Headline when listing the reactor's whitelist
            with power potentials.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Reactor_WhitelistPlain">
            <summary>
            Headline when listing the reactor's whitelist
            without power potentials.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Command_NothingToUndock">
            <summary>
            No vehicle was found to undock.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Command_UndockingVehicle">
            <summary>
            The undock console command did undock something.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.HandOver_BatterySlot">
            <summary>
            Text displayed when the player hovers over a battery slot.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.HandHover_OpenStorage">
            <summary>
            Text displayed when the player hovers over a storage component.
            The first argument is the given display name of the storage component (which may also be localized).
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.HandHover_Vehicle_Enter">
            <summary>
            Text shown when the player hovers over a vehicle's entry hatch.
            The first argument is the vehicle's name.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.HandHover_Vehicle_Exit">
            <summary>
            Text shown when the player hovers over a vehicle's exit hatch.
            The first argument is the vehicle's name.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.HandHover_Vehicle_StartHelmControl">
            <summary>
            Displayed over a vehicle's helm control
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.HandHover_Reactor_Charge">
            <summary>
            The string to display over a material reactor.
            Expected to produce a string like "*: 500/1000".
            The first argument is the absolute current charge,
            the second is the maximum charge.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.HandHoverSub_Reactor_ShowWhitelist">
            <summary>
            The translation key that hints that the user can show the reactor's item-whitelist by right-clicking.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.HandHover_Vehicle_DeconstructionPercent">
            <summary>
            The vehicle status when the vehicle is scuttled, showing the percentage of its deconstruction.
            The first argument is the dconstruction fraction as a percent string.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.HandHover_Docked_StatusCharged">
            <summary>
            The vehicle status when hovering while docked and the vehicle is fully charged.
            The first argument is the vehicle health percentage.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.HandHover_Docked_StatusCharging">
            <summary>
            Represents the status of a hand hover event when the device is docked and charging.
            The first argument is the vehicle health percentage.
            The second argument is the current charge percentage.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Report_AddedToStorage">
            <summary>
            An item was added to the storage.
            The first argument is the item's name.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Error_UpgradeNotRemovable_StorageNotEmpty">
            <summary>
            When trying to remove an upgrade that is not removable because its storage is not empty.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Error_UpgradeNotAddable_Incompatible">
            <summary>
            When the user tries to add an upgrade that is not compatible with the vehicle.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Error_CannotAdd_StorageFull">
            <summary>
            Then trying to add an item to a storage that is full.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Error_CannotExitHelmControl">
            <summary>
            Exiting the vehicle's helm control is not allowed at the moment.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Error_CannotRemoveMaterialsFromReactor">
            <summary>
            Error message shown when the player tries to remove materials from a reactor.
            The first argument is the reactor's interactText field.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Error_MobileWaterPark_CannotAdd_FishIsDead">
            <summary>
            If the player tries to add a dead fish to the mobile water park.
            The first parameter is the localized tech type name of the fish.
            The second the label of the water park.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Error_MobileWaterPark_CannotAdd_EggIsHatched">
            <summary>
            If the player tries to add a hatched egg to the mobile water park.
            The first parameter is the localized tech type name of the fish.
            The second the label of the water park.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Error_MobileWaterPark_CannotAdd_Incompatible">
            <summary>
            If the player tries to add something that is not a fish or an egg to the mobile water park.
            The first parameter is the localized tech type name of the fish.
            The second the label of the water park.
            </summary>
        </member>
        <member name="F:AVS.Localization.TranslationKey.Error_MobileWaterPark_CannotRemove_HatchingEgg">
            <summary>
            If the player tries to remove an egg from the mobile water park that is in the process of hatching.
            </summary>
        </member>
        <member name="T:AVS.Localization.Translator">
            <summary>
            Global localization utility for AVS.
            </summary>
        </member>
        <member name="P:AVS.Localization.Translator.Implementation">
            <summary>
            The replaceable implementation for translating keys.
            </summary>
        </member>
        <member name="T:AVS.Logger">
            <summary>
            Provides logging, notification, and main menu alert utilities for the AVS mod.
            Integrates with BepInEx logging and Subnautica's in-game messaging systems.
            </summary>
        </member>
        <member name="P:AVS.Logger.OutLog">
            <summary>
            The BepInEx log source used for outputting log messages.
            </summary>
        </member>
        <member name="M:AVS.Logger.Log(System.String)">
            <summary>
            Logs an informational message.
            </summary>
        </member>
        <member name="M:AVS.Logger.Warn(System.String)">
            <summary>
            Logs a warning message.
            </summary>
        </member>
        <member name="M:AVS.Logger.Error(System.String)">
            <summary>
            Logs an error message.
            </summary>
        </member>
        <member name="M:AVS.Logger.Exception(System.String,System.Exception)">
            <summary>
            Logs an exception with a prefix.
            </summary>
        </member>
        <member name="M:AVS.Logger.DebugLog(System.String)">
            <summary>
            Logs a debug message.
            </summary>
        </member>
        <member name="M:AVS.Logger.WarnException(System.String,System.Exception,System.Boolean)">
            <summary>
            Logs a warning and exception details, optionally outputs to screen.
            </summary>
        </member>
        <member name="M:AVS.Logger.LogException(System.String,System.Exception,System.Boolean)">
            <summary>
            Logs an error and exception details, optionally outputs to screen.
            </summary>
        </member>
        <member name="F:AVS.Logger.IDCounter">
            <summary>
            Counter for generating unique notification IDs.
            </summary>
        </member>
        <member name="F:AVS.Logger.NoteIDsMemory">
            <summary>
            Stores message-to-ID mappings for notifications.
            </summary>
        </member>
        <member name="M:AVS.Logger.GetFreshID">
            <summary>
            Gets a fresh, unused notification ID.
            </summary>
        </member>
        <member name="M:AVS.Logger.PDANote(System.String,System.Single,System.Single)">
            <summary>
            Shows a PDA notification with the specified message, duration, and delay.
            </summary>
        </member>
        <member name="M:AVS.Logger.Output(System.String,System.Single,System.Int32,System.Int32)">
            <summary>
            Outputs a warning message to the in-game screen.
            </summary>
        </member>
        <member name="F:AVS.Logger.Notifications">
            <summary>
            Stores main menu notifications to be displayed in a loop.
            </summary>
        </member>
        <member name="M:AVS.Logger.LoopMainMenuError(System.String,System.String)">
            <summary>
            Adds an error notification to the main menu loop and logs it.
            </summary>
        </member>
        <member name="M:AVS.Logger.LoopMainMenuWarning(System.String,System.String)">
            <summary>
            Adds a warning notification to the main menu loop and logs it.
            </summary>
        </member>
        <member name="M:AVS.Logger.MakeAlerts">
            <summary>
            Coroutine that displays main menu notifications in a loop until the player is loaded.
            </summary>
        </member>
        <member name="T:AVS.Log.Domain">
            <summary>
            Logging domain constants
            </summary>
        </member>
        <member name="P:AVS.Log.Domain.AVS">
            <summary>
            AVS internal domain
            </summary>
        </member>
        <member name="P:AVS.Log.Domain.Mod">
            <summary>
            Client mod domain
            </summary>
        </member>
        <member name="P:AVS.Log.Domain.Unity">
            <summary>
            Unity domain
            </summary>
        </member>
        <member name="T:AVS.Log.Void">
            <summary>
            Marker type used to represent an omitted parameter slot in <see cref="T:AVS.Log.LogParameters`4"/>.
            </summary>
        </member>
        <member name="T:AVS.Log.Params">
            <summary>
            Provides a set of static methods for creating and working with strongly-typed log parameter objects.
            </summary>
        </member>
        <member name="P:AVS.Log.Params.None">
            <summary>
            Shorthand for no parameters.
            </summary>
        </member>
        <member name="M:AVS.Log.Params.Of``1(``0)">
            <summary>
            Creates a strongly-typed parameter container with one value.
            </summary>
            <typeparam name="T0">The type of the first parameter.</typeparam>
            <param name="p0">The first parameter value.</param>
            <returns>A <see cref="T:AVS.Log.LogParameters`4"/> instance containing the provided value.</returns>
        </member>
        <member name="M:AVS.Log.Params.Of``2(``0,``1)">
            <summary>
            Creates a strongly-typed parameter container with two values.
            </summary>
            <typeparam name="T0">The type of the first parameter.</typeparam>
            <typeparam name="T1">The type of the second parameter.</typeparam>
            <param name="p0">The first parameter value.</param>
            <param name="p1">The second parameter value.</param>
            <returns>A <see cref="T:AVS.Log.LogParameters`4"/> instance containing the provided values.</returns>
        </member>
        <member name="M:AVS.Log.Params.Of``3(``0,``1,``2)">
            <summary>
            Creates a strongly-typed parameter container with three values.
            </summary>
            <typeparam name="T0">The type of the first parameter.</typeparam>
            <typeparam name="T1">The type of the second parameter.</typeparam>
            <typeparam name="T2">The type of the third parameter.</typeparam>
            <param name="p0">The first parameter value.</param>
            <param name="p1">The second parameter value.</param>
            <param name="p2">The third parameter value.</param>
            <returns>A <see cref="T:AVS.Log.LogParameters`4"/> instance containing the provided values.</returns>
        </member>
        <member name="M:AVS.Log.Params.Of``4(``0,``1,``2,``3)">
            <summary>
            Creates a strongly-typed parameter container with four values.
            </summary>
            <typeparam name="T0">The type of the first parameter.</typeparam>
            <typeparam name="T1">The type of the second parameter.</typeparam>
            <typeparam name="T2">The type of the third parameter.</typeparam>
            <typeparam name="T3">The type of the fourth parameter.</typeparam>
            <param name="p0">The first parameter value.</param>
            <param name="p1">The second parameter value.</param>
            <param name="p2">The third parameter value.</param>
            <param name="p3">The fourth parameter value.</param>
            <returns>A <see cref="T:AVS.Log.LogParameters`4"/> instance containing the provided values.</returns>
        </member>
        <member name="T:AVS.Log.LogParameters">
            <summary>
            Base type for strongly-typed log parameter containers.
            </summary>
            <remarks>
            Use the <see cref="T:AVS.Log.Params"/> helper methods to create instances.
            </remarks>
        </member>
        <member name="M:AVS.Log.LogParameters.ToArgumentString">
            <summary>
            Builds a comma-separated string of arguments suitable for insertion into a log message.
            </summary>
            <returns>A string representation of the contained arguments.</returns>
        </member>
        <member name="T:AVS.Log.LogParameters`4">
            <summary>
            Strongly-typed container for up to four log parameters.
            </summary>
            <typeparam name="T0">Type of the first parameter.</typeparam>
            <typeparam name="T1">Type of the second parameter.</typeparam>
            <typeparam name="T2">Type of the third parameter.</typeparam>
            <typeparam name="T3">Type of the fourth parameter.</typeparam>
            <param name="P0">The first parameter value.</param>
            <param name="P1">The second parameter value.</param>
            <param name="P2">The third parameter value.</param>
            <param name="P3">The fourth parameter value.</param>
        </member>
        <member name="M:AVS.Log.LogParameters`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Strongly-typed container for up to four log parameters.
            </summary>
            <typeparam name="T0">Type of the first parameter.</typeparam>
            <typeparam name="T1">Type of the second parameter.</typeparam>
            <typeparam name="T2">Type of the third parameter.</typeparam>
            <typeparam name="T3">Type of the fourth parameter.</typeparam>
            <param name="P0">The first parameter value.</param>
            <param name="P1">The second parameter value.</param>
            <param name="P2">The third parameter value.</param>
            <param name="P3">The fourth parameter value.</param>
        </member>
        <member name="P:AVS.Log.LogParameters`4.P0">
            <summary>The first parameter value.</summary>
        </member>
        <member name="P:AVS.Log.LogParameters`4.P1">
            <summary>The second parameter value.</summary>
        </member>
        <member name="P:AVS.Log.LogParameters`4.P2">
            <summary>The third parameter value.</summary>
        </member>
        <member name="P:AVS.Log.LogParameters`4.P3">
            <summary>The fourth parameter value.</summary>
        </member>
        <member name="M:AVS.Log.LogParameters`4.ToString``1(``0)">
            <summary>
            Converts a value to a stable, log-friendly string representation.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="o">The value to convert.</param>
            <returns>A string suited for logging, handling primitives, strings, Unity objects and enumerables.</returns>
        </member>
        <member name="M:AVS.Log.LogParameters`4.ToArgumentString">
            <summary>
            Builds a comma-separated string of the non-<see cref="T:AVS.Log.Void"/> parameters in their log-friendly form.
            </summary>
            <returns>A string containing the serialized parameters, separated by commas.</returns>
        </member>
        <member name="T:AVS.Log.MaterialLog">
            <summary>
            Material adaptation logging configuration.
            </summary>
        </member>
        <member name="M:AVS.Log.MaterialLog.#ctor(System.Boolean,System.Boolean,System.String[],System.Boolean)">
            <summary>
            Constructs a new material adaptation logging configuration.
            </summary>
            <param name="tags">Optional logging tags, used to identify the source of the log message.</param>
            <param name="logMaterialVariables">If true, input material variables will be logged.</param>
            <param name="logMaterialChanges">If true material property changes will be logged.</param>
            <param name="logExtraSteps">If true, extra steps of the material adaptation process will be logged.</param>
        </member>
        <member name="M:AVS.Log.MaterialLog.NewLog(AVS.RootModController)">
            <summary>
            Creates a new scopes smart log for material adaptation logging.
            </summary>
            <param name="rmc"></param>
            <returns></returns>
        </member>
        <member name="P:AVS.Log.MaterialLog.LogMaterialChanges">
            <summary>
            If true material property changes will be logged.
            </summary>
        </member>
        <member name="P:AVS.Log.MaterialLog.Tags">
            <summary>
            Default tags associated with this logging configuration.
            </summary>
        </member>
        <member name="P:AVS.Log.MaterialLog.LogMaterialVariables">
            <summary>
            If true, input material variables will be logged.
            </summary>
        </member>
        <member name="P:AVS.Log.MaterialLog.LogExtraSteps">
            <summary>
            If true, extra steps of the material adaptation process will be logged.
            </summary>
        </member>
        <member name="F:AVS.Log.MaterialLog.MaterialAdaptationTag">
            <summary>
            Default logging prefix used when fixing materials.
            </summary>
        </member>
        <member name="P:AVS.Log.MaterialLog.Default">
            <summary>
            Default logging configuration for material adaptation.
            </summary>
        </member>
        <member name="P:AVS.Log.MaterialLog.Silent">
            <summary>
            Muted logging configuration for material adaptation.
            </summary>
        </member>
        <member name="P:AVS.Log.MaterialLog.Verbose">
            <summary>
            Verbose logging configuration for material adaptation.
            </summary>
        </member>
        <member name="M:AVS.Log.MaterialLog.LogExtraStep(AVS.Log.SmartLog,System.String)">
            <summary>
            Logs an extra step in the material adaptation process.
            If <see cref="P:AVS.Log.MaterialLog.LogExtraSteps"/> is false, this method does nothing.
            </summary>
        </member>
        <member name="M:AVS.Log.MaterialLog.LogMaterialChange(AVS.Log.SmartLog,System.String)">
            <summary>
            Logs a material change message.
            If <see cref="P:AVS.Log.MaterialLog.LogMaterialChanges"/> is false, this method does nothing.
            </summary>
        </member>
        <member name="M:AVS.Log.MaterialLog.LogMaterialChange(AVS.Log.SmartLog,System.Func{System.String})">
            <summary>
            Logs a material change message using a function to generate the message.
            If <see cref="P:AVS.Log.MaterialLog.LogMaterialChanges"/> is false, this method does nothing.
            </summary>
        </member>
        <member name="M:AVS.Log.MaterialLog.LogMaterialVariableSet``1(AVS.Log.SmartLog,UnityEngine.Rendering.ShaderPropertyType,System.String,``0,``0,UnityEngine.Material,System.String)">
            <summary>
            Logs a material property set operation.
            </summary>
            <typeparam name="T">C# type being updated</typeparam>
            <param name="log">The log to write to</param>
            <param name="type">Unity type being updated</param>
            <param name="name">Field name being updated</param>
            <param name="old">Old value</param>
            <param name="value">New value</param>
            <param name="m">Material affected</param>
            <param name="materialName">Optional custom material name to use instead of the nice name of the material itself</param>
        </member>
        <member name="M:AVS.Log.MaterialLog.LogMaterialVariableData(AVS.Log.SmartLog,System.Nullable{UnityEngine.Rendering.ShaderPropertyType},System.String,System.String,UnityEngine.Material,System.String)">
            <summary>
            Logs a material property value.
            </summary>
            <param name="log">The log to write to</param>
            <param name="type">Unity type being updated</param>
            <param name="name">Field name being updated</param>
            <param name="dataAsString">The current value as string</param>
            <param name="m">Material affected</param>
            <param name="materialName">Optional custom material name to use instead of the nice name of the material itself</param>
        </member>
        <member name="M:AVS.Log.MaterialLog.LogMaterialVariableData``1(AVS.Log.SmartLog,System.String,``0,UnityEngine.Material,System.String)">
            <summary>
            Logs a material property set operation.
            </summary>
            <typeparam name="T">C# type being logged</typeparam>
            <param name="log">The log to write to</param>
            <param name="name">Field name being updated</param>
            <param name="data">Recognized data</param>
            <param name="m">Material being logged</param>
            <param name="materialName">Optional custom material name to use instead of the nice name of the material itself</param>
        </member>
        <member name="T:AVS.Log.SmartLog">
            <summary>
            Represents a hierarchical, disposable logging context that supports tagging, verbosity control,  and
            interruptible operations. This class is designed to facilitate structured logging within  nested or asynchronous
            operations.
            </summary>
        </member>
        <member name="P:AVS.Log.SmartLog.RMC">
            <summary>
            The owning root mod controller instance.
            </summary>
        </member>
        <member name="P:AVS.Log.SmartLog.Depth">
            <summary>
            The recursive depth of this log context. Root context has depth 0.
            </summary>
        </member>
        <member name="P:AVS.Log.SmartLog.Domain">
            <summary>
            The active logging domain. Inherited only if null
            </summary>
        </member>
        <member name="P:AVS.Log.SmartLog.Name">
            <summary>
            The name of this log context, derived from the calling method.
            </summary>
        </member>
        <member name="P:AVS.Log.SmartLog.IsDisposed">
            <summary>
            True if this instance has been disposed.
            </summary>
        </member>
        <member name="P:AVS.Log.SmartLog.Tags">
            <summary>
            The tags associated with this log context.
            </summary>
        </member>
        <member name="P:AVS.Log.SmartLog.StartTime">
            <summary>
            Gets the date and time when the context was created.
            </summary>
        </member>
        <member name="M:AVS.Log.SmartLog.#ctor(AVS.RootModController,System.String,System.Int32,System.Boolean,System.Collections.Generic.IReadOnlyList{System.String},AVS.Log.LogParameters,System.String,System.Boolean)">
            <summary>
            Creates a new disposable log context. The new context becomes the current context.
            </summary>
            <param name="rmc">The owning root mod controller instance.</param>
            <param name="frameDelta">Optional additional stack frame delta to apply when determining the name of this context.</param>
            <param name="isInterruptable">If true, this context can be interrupted by asynchronous operations and later resumed.</param>
            <param name="tags">Optional additional tags to associate with this context to be set at creation time.</param>
            <param name="parameters">Optional parameters to format into the name of this context.</param>
            <param name="nameOverride">Optional name to use instead of the calling method's name.</param>
            <param name="domain">The domain name associated with the log. Typically AVS or Mod.</param>
            <param name="forceLazy">If true, logging of the start message is always deferred until the first actual log message.</param>
        </member>
        <member name="M:AVS.Log.SmartLog.IsChildOf(AVS.Log.SmartLog)">
            <summary>
            Checks if this log context is a child of the specified other context.
            </summary>
            <param name="other">Potential parent (or this)</param>
            <returns>True if child of or identical to <paramref name="other"/></returns>
        </member>
        <member name="M:AVS.Log.SmartLog.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Log.SmartLog.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Log.SmartLog.Write(System.String)">
            <summary>
            Writes a message to the log.
            </summary>
            <remarks>This method formats the provided message before logging it. Ensure that the message
            is meaningful and adheres to any logging conventions used in your application.</remarks>
            <param name="message">The message to be logged. Cannot be null or empty.</param>
        </member>
        <member name="M:AVS.Log.SmartLog.Warn(System.String)">
            <summary>
            Logs a warning message to the configured logging system.
            </summary>
            <remarks>This method signals the logging system before logging the warning message. Ensure
            that the logging system is properly configured to handle warning-level messages.</remarks>
            <param name="message">The warning message to log. Cannot be null or empty.</param>
        </member>
        <member name="M:AVS.Log.SmartLog.Error(System.String,System.Exception)">
            <summary>
            Logs an error message, optionally including details of an exception.
            </summary>
            <remarks>This method logs the error message and, if provided, the exception details. It is
            intended for use in scenarios where error information needs to be recorded for diagnostics.</remarks>
            <param name="message">The error message to log. This value cannot be <see langword="null"/> or empty.</param>
            <param name="ex">An optional exception containing additional details about the error. If <see langword="null"/>, only the
            message is logged.</param>
        </member>
        <member name="M:AVS.Log.SmartLog.Debug(System.String)">
            <summary>
            Logs a debug message if the current log verbosity level is set to <see cref="F:AVS.Log.Verbosity.Verbose"/>.
            </summary>
            <remarks>The method will not log the message if the log verbosity level is not set to <see
            cref="F:AVS.Log.Verbosity.Verbose"/>.</remarks>
            <param name="message">The debug message to log. This should provide detailed information useful for debugging purposes.</param>
        </member>
        <member name="M:AVS.Log.SmartLog.Debug(System.Func{System.String})">
            <summary>
            Logs a debug message generated by the provided message factory function if the current log verbosity level is set to <see cref="F:AVS.Log.Verbosity.Verbose"/>.
            </summary>
            <remarks>The method will not invoke the message factory or log the message if the log verbosity level is not set to <see cref="F:AVS.Log.Verbosity.Verbose"/>.</remarks>
            <param name="messageFactory">
            The function that generates the debug message to log. This function is only invoked if the log verbosity level is set to <see cref="F:AVS.Log.Verbosity.Verbose"/>.
            </param>
        </member>
        <member name="M:AVS.Log.SmartLog.DeriveCallerName(System.String,System.String)">
            <summary>
            Derives a fully qualified caller name based on the file path and member name.
            </summary>
            <param name="callerFilePath">The file path of the caller. Typically provided by the <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute"/>.</param>
            <param name="memberName">The name of the calling member. Typically provided by the <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.</param>
            <returns>A string representing the caller's fully qualified name in the format "FileName.MemberName", where
            "FileName" is the name of the file without its extension. Returns an empty string if either <paramref
            name="callerFilePath"/> or <paramref name="memberName"/> is null or empty.</returns>
        </member>
        <member name="M:AVS.Log.SmartLog.For(AVS.RootModController,System.String,System.Collections.Generic.IReadOnlyList{System.String},AVS.Log.LogParameters)">
            <summary>
            Creates a new instance of <see cref="T:AVS.Log.SmartLog"/> configured for the specified domain.
            </summary>
            <param name="mainPatcher">The root mod controller instance used to initialize the log.</param>
            <param name="tags">Optional additional tags to associate with this log context.</param>
            <param name="domain">The domain name associated with the log. Defaults to "Mod" if not specified.</param>
            <param name="parameters">Optional parameters to format into the name of this context.</param>
            <returns>A <see cref="T:AVS.Log.SmartLog"/> instance configured with the specified domain.</returns>
        </member>
        <member name="M:AVS.Log.SmartLog.LazyFor(AVS.RootModController,System.String,System.Collections.Generic.IReadOnlyList{System.String},AVS.Log.LogParameters,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:AVS.Log.SmartLog"/> configured for the specified domain using forced laziness.
            </summary>
            <remarks>
            This version uses a much faster method to derive the caller name, which may be less accurate in some edge cases.
            When calling this method, make sure that the caller type name matches the caller file name.
            </remarks>
            <param name="mainPatcher">The root mod controller instance used to initialize the log.</param>
            <param name="tags">Optional additional tags to associate with this log context.</param>
            <param name="parameters">Optional parameters to format into the name of this context.</param>
            <param name="domain">The domain name associated with the log. Defaults to "Mod" if not specified.</param>
            <param name="callerFilePath">The file path of the calling member, automatically provided by the compiler.</param>
            <param name="memberName">The name of the calling member, automatically provided by the compiler.</param>
            <returns>A <see cref="T:AVS.Log.SmartLog"/> instance configured with the specified domain.</returns>
        </member>
        <member name="T:AVS.Log.Verbosity">
            <summary>
            Logging verbosity levels.
            </summary>
        </member>
        <member name="F:AVS.Log.Verbosity.Verbose">
            <summary>
            Everything is logged
            </summary>
        </member>
        <member name="F:AVS.Log.Verbosity.Regular">
            <summary>
            Non-debug logs are logged.
            Smart log contexts are shown only if contained messages are logged
            </summary>
        </member>
        <member name="F:AVS.Log.Verbosity.WarningsAndErrorsOnly">
            <summary>
            Only warnings and errors are logged
            </summary>
        </member>
        <member name="T:AVS.MaterialAdapt.DefaultMaterialAdaptConfig">
            <summary>
            The default material adaptation configuration.
            Can be instantiated or inherited by the client mod.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.KeepTag">
            <summary>
            Default tag used to mark materials that should not be adapted.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.GlassTag">
            <summary>
            Default tag used to mark materials that are consider glass and should not be adapted in the default process.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.IgnoreShaderNames">
            <summary>
            True if shader names should be ignored during material adaptation.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.IgnoreGlassShaderNames">
            <summary>
            True if glass shader names should be ignored during material adaptation.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.LogConfig">
            <inheritdoc/>
        </member>
        <member name="M:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.#ctor(System.Nullable{AVS.Log.MaterialLog})">
            <summary>
            Constructs a new default material adaptation configuration.
            </summary>
            <param name="logConfig">Optional logging configuration to use.
            If null, <see cref="P:AVS.Log.MaterialLog.Default" /> is used</param>
        </member>
        <member name="M:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.IsExcludedFromMaterialFixing(UnityEngine.GameObject,AVS.Composition.VehicleComposition)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.IsExcludedFromMaterialFixingByName(System.String)">
            <summary>
            If this method returns true, the specific material with the given lower-case name will be excluded
            from material fixing.
            If you exclusion logic is based on material names only, you only need to override this method.
            </summary>
            <remarks>This default implementation excludes all materials 
            that have <see cref="P:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.KeepTag"/> in their name</remarks>
            <param name="lowerCaseMaterialName">Lower-case name of the material</param>
            <returns>True if this material should not be fixed</returns>
        </member>
        <member name="M:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.IsExcludedFromMaterialFixing(UnityEngine.Renderer)">
            <summary>
            Determines whether the provided renderer is excluded from material fixing.
            </summary>
            <param name="renderer">The renderer to be evaluated.</param>
            <returns>True if the renderer is excluded from material fixing; otherwise, false.</returns>
        </member>
        <member name="M:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.ConvertUnityMaterial(AVS.MaterialAdapt.UnityMaterialData)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.MaterialAdapt.DefaultMaterialAdaptConfig.ClassifyMaterial(UnityEngine.Renderer,System.Int32,UnityEngine.Material)">
            <inheritdoc/>
        </member>
        <member name="T:AVS.MaterialAdapt.IMaterialAdaptConfig">
            <summary>
            Controls how materials are adapted to Subnautica's material system.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.IMaterialAdaptConfig.LogConfig">
            <summary>
            Logging configuration for material adaptation.
            </summary>
        </member>
        <member name="M:AVS.MaterialAdapt.IMaterialAdaptConfig.IsExcludedFromMaterialFixing(UnityEngine.GameObject,AVS.Composition.VehicleComposition)">
            <summary>
            If this method returns true,
            all materials of the given game object will be excluded
            from material fixing.
            </summary>
            <remarks>Child objects will still be processed</remarks>
            <param name="go">Game object to test</param>
            <param name="comp">Vehicle composition of the target vehicle</param>
            <returns>True if this object should not be fixed</returns>
        </member>
        <member name="M:AVS.MaterialAdapt.IMaterialAdaptConfig.ClassifyMaterial(UnityEngine.Renderer,System.Int32,UnityEngine.Material)">
            <summary>
            Classifies the material of the given renderer.
            </summary>
            <param name="renderer">Owning renderer</param>
            <param name="materialIndex">Index of the material being processed with 0 being the first material</param>
            <param name="material">Material being processed</param>
            <returns>The material type this material represents or null if it should be omitted</returns>
        </member>
        <member name="M:AVS.MaterialAdapt.IMaterialAdaptConfig.ConvertUnityMaterial(AVS.MaterialAdapt.UnityMaterialData)">
            <summary>
            Passes the loaded material data to the config for custom conversion.
            </summary>
            <param name="materialData">Loaded material data</param>
            <returns>Converted material</returns>
        </member>
        <member name="T:AVS.MaterialAdapt.IMaterialResolver">
            <summary>
            Resolver to find materials for adaptation.
            </summary>
        </member>
        <member name="M:AVS.MaterialAdapt.IMaterialResolver.ResolveMaterials">
            <summary>
            Identifies all materials that should be adapted.
            </summary>
        </member>
        <member name="T:AVS.MaterialAdapt.MaterialAddress">
            <summary>
            A renderer material target description, identifying a material by its slot index,
            not reference.
            </summary>
            <author>https://github.com/IronFox</author>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialAddress.Renderer">
            <summary>
            The targeted renderer. Can become null if the source is destroyed
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialAddress.RendererInstanceId">
            <summary>
            The recorded instance id of the renderer. Preserved for performance and also
            to prevent null reference exceptions if the renderer is destroyed
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialAddress.MaterialIndex">
            <summary>
            The 0-based index of this material on the targeted renderer
            </summary>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialAddress.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialAddress.#ctor(UnityEngine.Renderer,System.Int32)">
            <summary>
            Constructs a new material address descriptor
            </summary>
            <param name="renderer">Targeted renderer</param>
            <param name="materialIndex">Index of the material</param>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialAddress.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialAddress.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialAddress.Equals(AVS.MaterialAdapt.MaterialAddress)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialAddress.GetMaterial">
            <summary>
            Gets the addressed material
            </summary>
            <returns>Addressed material or null if the address is/has become invalid</returns>
        </member>
        <member name="T:AVS.MaterialAdapt.MaterialAdaptation">
            <summary>
            A full material translation migrated+prototype -> final
            </summary>
            <author>https://github.com/IronFox</author>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialAdaptation.Target">
            <summary>
            The targeted material
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialAdaptation.Prototype">
            <summary>
            The (shared) prototype used to modify the final material
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialAdaptation.UnityMaterial">
            <summary>
            The data migrated from the original material as present in the mesh
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialAdaptation.Shader">
            <summary>
            The shader that is to be applied to the material
            </summary>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialAdaptation.#ctor(AVS.MaterialAdapt.SubnauticaMaterialPrototype,AVS.MaterialAdapt.UnityMaterialData,UnityEngine.Shader)">
            <summary>
            Constructs a new material adaptation descriptor
            </summary>
            <param name="prototype">The Subnautica material prototype descriptor</param>
            <param name="unityMaterial">The material data extracted from the Unity material</param>
            <param name="shader">The shader to use (Marmoset UBER)</param>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialAdaptation.PostDockFixOnTarget(AVS.RootModController,AVS.Log.MaterialLog)">
            <summary>
            Resets only variables known to be corrupted during moonpool undock
            </summary>
            <param name="logConfig">Log Configuration</param>
            <param name="rmc">Root mod controller for logging purposes</param>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialAdaptation.ApplyToTarget(AVS.RootModController,AVS.Log.MaterialLog,System.Nullable{System.Single})">
            <summary>
            Reapplies all material properties to the target
            </summary>
            <param name="logConfig">Log Configuration</param>
            <param name="rmc">Root mod controller for logging purposes</param>
            <param name="uniformShininess">The uniform shininess to apply everywhere. If not null,
            the unity material's smoothness value is disregarded</param>
        </member>
        <member name="T:AVS.MaterialAdapt.MaterialClassification">
            <summary>
            The classification of a material for adaptation purposes.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialClassification.Type">
            <summary>
            The type of material to apply.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialClassification.IgnoreShaderNames">
            <summary>
            Gets a value indicating whether shader names should be ignored during processing.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialClassification.Include">
            <summary>
            True if the source material should be included in the adaptation process.
            </summary>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialClassification.#ctor(AVS.MaterialAdapt.MaterialType,System.Boolean)">
            <summary>
            Constructs an included material classification with the specified type and shader name handling.
            </summary>
            <param name="type">The type of material to apply.</param>
            <param name="ignoreShaderNames">Whether shader names should be ignored during processing</param>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialClassification.Excluded">
            <summary>
            Global excluded material classification.
            </summary>
        </member>
        <member name="T:AVS.MaterialAdapt.MaterialFixer">
            <summary>
            Helper class to fix materials automatically. Should be instantiated on the vehicle
            you wish to fix materials of
            </summary>
            <author>https://github.com/IronFox</author>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialFixer.MaterialsAreFixed">
            <summary>
            True if materials have been fixed at least once.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialFixer.Vehicle">
            <summary>
            The owning vehicle.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialFixer.Logging">
            <summary>
            Controls how debug logging should be performed
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialFixer.MaterialResolver">
            <summary>
            The used material resolver.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialFixer.UniformShininess">
            <summary>
            Null or in [0,1].<br/>
            If non-null, enforces the same uniform shininess level on all materials
            </summary>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialFixer.#ctor(AVS.BaseVehicle.AvsVehicle,AVS.MaterialAdapt.IMaterialResolver,System.Nullable{AVS.Log.MaterialLog})">
            <summary>
            Constructs the instance
            </summary>
            <param name="owner">Owning vehicle</param>
            <param name="materialResolver">The solver to fetch all materials to translate.</param>
            <param name="logConfig">Log Configuration. If null, defaults to <see cref="P:AVS.Log.MaterialLog.Default" /></param>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialFixer.OnVehicleUndocked">
            <summary>
            Notifies that the vehicle has just undocked from a docking bay (moonpool, etc).
            </summary>
            <remarks>Should be called from your vehicle OnVehicleUndocked() method</remarks>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialFixer.OnVehicleDocked">
            <summary>
            Notifies that the vehicle has just docked to a docking bay (moonpool, etc).
            </summary>
            <remarks>Should be called from your vehicle OnVehicleDocked() method</remarks>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialFixer.ReApply(AVS.RootModController)">
            <summary>
            Forcefully reapplies all material adaptations.
            Normally not necessary
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.MaterialFixer.HaveGlassMaterial">
            <summary>
            There is something odd with the glass material in Subnautica.
            Even if we copy everything, the glass material is oddly opaque.
            If, instead, we use the material directly, it looks way more
            convincing. My best guess is, the material is not completely
            loaded when we copy it, and some part of Subnautica changes it
            at a later point.
            </summary>
        </member>
        <member name="M:AVS.MaterialAdapt.MaterialFixer.OnUpdate">
            <summary>
            Fixes materials if necessary/possible.
            Also fixes undock material changes if <see cref="M:AVS.MaterialAdapt.MaterialFixer.OnVehicleUndocked"/> was called before
            </summary>
            <remarks>Should be called from your vehicle Update() method</remarks>
        </member>
        <member name="T:AVS.MaterialAdapt.SubnauticaMaterialPrototype">
            <summary>
            Read-only material definition as retrieved from some existing material
            </summary>
            <author>https://github.com/IronFox</author>
        </member>
        <member name="P:AVS.MaterialAdapt.SubnauticaMaterialPrototype.IsEmpty">
            <summary>
            True if this instance was created without a source material.
            All local values are empty/default if true
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.SubnauticaMaterialPrototype.MaterialGlobalIlluminationFlags">
            <summary>
            Global illumination flags retrieved from the source material
            </summary>
        </member>
        <member name="M:AVS.MaterialAdapt.SubnauticaMaterialPrototype.ApplyTo(AVS.RootModController,UnityEngine.Material,AVS.Log.MaterialLog,System.Func{System.String,System.Boolean},System.String)">
            <summary>
            Updates all recorded shader variables in the specified material
            </summary>
            <param name="m">Target material</param>
            <param name="logConfig">Log Configuration</param>
            <param name="materialName">Optional custom material name to use instead of the nice name of the material itself</param>
            <param name="rmc">Root mod controller for logging purposes</param>
            <param name="variableNamePredicate">
            Optional predicate to only check/update certain shader variables by name.
            If non-null updates only variables for which this function returns true</param>
        </member>
        <member name="M:AVS.MaterialAdapt.SubnauticaMaterialPrototype.#ctor(UnityEngine.Material,System.Boolean)">
            <summary>
            Constructs the prototype from a given material
            </summary>
            <param name="source">Material to read. Can be null, causing <see cref="P:AVS.MaterialAdapt.SubnauticaMaterialPrototype.IsEmpty"/> to be set true</param>
            <param name="loadTextures">If true also load texture property values</param>
        </member>
        <member name="M:AVS.MaterialAdapt.SubnauticaMaterialPrototype.GlassMaterialFromSeamoth(AVS.RootModController,UnityEngine.Material@,AVS.Log.MaterialLog)">
            <summary>
            Creates a material prototype for the glass material of the Seamoth.
            </summary>
            <param name="logConfig">Logging configuration</param>
            <param name="result">The retrieved aquarium glass material, if any.</param>
            <param name="rmc">Root mod controller for logging purposes</param>
            <returns>False if the seamoth is not (yet) available. Keep trying if false.
            Ttrue if the seamoth is loaded, but <paramref name="result"/> can still be null
            if the respective material is not found</returns>
        </member>
        <member name="M:AVS.MaterialAdapt.SubnauticaMaterialPrototype.GlassFromSeamoth(AVS.RootModController,AVS.Log.MaterialLog)">
            <summary>
            Creates a material prototype for the glass material of the Seamoth.
            </summary>
            <param name="logConfig">Logging configuration</param>
            <param name="rmc">Root mod controller for logging purposes</param>
            <returns>Null if the seamoth is not (yet) available. Keep trying if null.
            Non-null if the seamoth is loaded, but can then be empty (IsEmpty is true)
            if the respective material is not found</returns>
        </member>
        <member name="M:AVS.MaterialAdapt.SubnauticaMaterialPrototype.GlassMaterialFromAquarium(AVS.RootModController,UnityEngine.Material@,AVS.Log.MaterialLog)">
            <summary>
            Retrieves the entire glass material of the aquarium.
            </summary>
            <param name="rmc">Root mod controller for logging purposes</param>
            <param name="logConfig">Logging configuration</param>
            <param name="result">The material prototype to fill with the aquarium glass material.</param>
            <returns>False if the aquarium is not (yet) available. Keep trying if false.
            Ttrue if the aquarium is loaded, but <paramref name="result"/> can still be null
            if the respective material is not found</returns>
        </member>
        <member name="M:AVS.MaterialAdapt.SubnauticaMaterialPrototype.GlassFromAquarium(AVS.RootModController,AVS.Log.MaterialLog)">
            <summary>
            Creates a material prototype for the glass material of the Seamoth.
            </summary>
            <param name="rmc">Root mod controller for logging purposes</param>
            <param name="logConfig">Logging configuration</param>
            <returns>Null if the seamoth is not (yet) available. Keep trying if null.
            Non-null if the seamoth is loaded, but can then be empty (IsEmpty is true)
            if the respective material is not found</returns>
        </member>
        <member name="M:AVS.MaterialAdapt.SubnauticaMaterialPrototype.FromSeamoth(AVS.RootModController,AVS.Log.MaterialLog)">
            <summary>
            Creates a material prototype for the main material of the Seamoth body.
            While the Seamoth is not yet available, the method returns null.
            If the Seamoth is loaded but the material could not be found, the return
            value is an empty material prototype (IsEmpty=true)
            </summary>
            <param name="rmc">Root mod controller for logging purposes</param>
            <param name="logConfig">Logging configuration</param>
            <returns>Null if the seamoth is not (yet) available. Keep trying if null.
            Non-null if the seamoth is loaded, but can then be empty (IsEmpty is true)
            if the respective material is not found</returns>
        </member>
        <member name="T:AVS.MaterialAdapt.MaterialType">
            <summary>
            Material classification.
            </summary>
        </member>
        <member name="F:AVS.MaterialAdapt.MaterialType.Opaque">
            <summary>
            Standard opaque material
            </summary>
        </member>
        <member name="F:AVS.MaterialAdapt.MaterialType.Glass">
            <summary>
            Glass material
            </summary>
        </member>
        <member name="T:AVS.MaterialAdapt.UnityMaterialData">
            <summary>
            Surface shader data extracted from a material imported from Unity.
            Only values relevant to the translation process are read.
            Read-only
            </summary>
            <author>https://github.com/IronFox</author>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.MaterialName">
            <summary>
            The name of the source material
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.Type">
            <summary>
            The material classification
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.Color">
            <summary>
            Main color of the material. Black if none
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.SpecularColor">
            <summary>
            The specular color of the material. Tints specular reflection.
            Default is white.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.EmissionColor">
            <summary>
            Emission texture of this material. Black if not emissive
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.MainTex">
            <summary>
            Main texture of the material. Null if none.
            In order to be applicable as
            specular reflectivity map, its alpha value must be filled such.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.Smoothness">
            <summary>
            Smoothness value (typically 0-1)
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.MetallicTexture">
            <summary>
            Metallic texture. In order to be applicable as
            specular reflectivity map, its alpha value must be filled such.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.BumpMap">
            <summary>
            Normal map. Null if none
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.EmissionTexture">
            <summary>
            Emission texture. Null if none
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.SmoothnessTextureChannel">
            <summary>
            Texture channel to derive the smoothness (specular) appearance from
            0 = Metallic
            1 = MainTex
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.SpecularTexture">
            <summary>
            The specular reflectivity texture to use for this material.
            Only the alpha channel is used.
            </summary>
        </member>
        <member name="P:AVS.MaterialAdapt.UnityMaterialData.Source">
            <summary>
            The source material
            </summary>
        </member>
        <member name="M:AVS.MaterialAdapt.UnityMaterialData.#ctor(AVS.MaterialAdapt.MaterialType,System.String,UnityEngine.Color,UnityEngine.Color,UnityEngine.Color,UnityEngine.Texture,System.Single,System.Int32,UnityEngine.Texture,UnityEngine.Texture,UnityEngine.Texture,AVS.MaterialAdapt.MaterialAddress)">
            <summary>
            Constructs a new instance of <see cref="T:AVS.MaterialAdapt.UnityMaterialData"/>
            </summary>
        </member>
        <member name="M:AVS.MaterialAdapt.UnityMaterialData.From(AVS.RootModController,AVS.MaterialAdapt.MaterialAddress,AVS.Log.MaterialLog,AVS.MaterialAdapt.MaterialType,System.Boolean)">
            <summary>
            Reads all local values from the given material address (if available).
            Unless <paramref name="ignoreShaderName"/> is set,
            the method returns null if the material's shader's name does not
            currently match "Standard"
            </summary>
            <param name="rmc">The owning root mod controller</param>
            <param name="source">The source material address to read from</param>
            <param name="logConfig">Configuration for logging material operations</param>
            <param name="type">The type classification for this material</param>
            <param name="ignoreShaderName">
            If true, will always read the material, regardless of shader name.
            If false, will only read the material if its shader name equals "Standard",
            return null otherwise</param>
            <returns>Read surface shader data or null if the shader name did not match
            or the target is (no longer) valid</returns>
        </member>
        <member name="M:AVS.MaterialAdapt.UnityMaterialData.From(AVS.RootModController,UnityEngine.Renderer,System.Int32,AVS.MaterialAdapt.MaterialType,AVS.Log.MaterialLog,System.Boolean)">
            <summary>
            Reads all local values from the given renderer material (if available).
            Unless <paramref name="ignoreShaderName"/> is set,
            the method returns null if the material's shader's name does not
            currently match "Standard"
            </summary>
            <param name="type">The type classification for this material</param>
            <param name="renderer">The source renderer</param>
            <param name="materialIndex">The source material index on that renderer</param>
            <param name="logConfig">Log Configuration</param>
            <param name="rmc">The owning root mod controller</param>
            <param name="ignoreShaderName">
            If true, will always read the material, regardless of shader name.
            If false, will only read the material if its shader name equals "Standard",
            return null otherwise</param>
            <returns>Read surface shader data or null if the shader name did not match
            or the target is (no longer) valid</returns>
        </member>
        <member name="M:AVS.MaterialAdapt.UnityMaterialData.ApplyTo(AVS.RootModController,UnityEngine.Material,System.Nullable{System.Single},AVS.Log.MaterialLog,System.String)">
            <summary>
            Applies the loaded configuration to the given material
            </summary>
            <param name="m">Target material</param>
            <param name="uniformShininess">If non-null, applies this level of shininess to all materials</param>
            <param name="logConfig">Log Configuration</param>
            <param name="rmc">The owning root mod controller</param>
            <param name="materialName">Optional custom material name to use instead of the nice name of the material itself</param>
        </member>
        <member name="M:AVS.MaterialAdapt.UnityMaterialData.RedefineSource(AVS.MaterialAdapt.MaterialAddress)">
            <summary>
            Creates a clone with a new source material address
            </summary>
            <param name="source">New source address</param>
            <returns>Clone with updated source</returns>
        </member>
        <member name="M:AVS.MaterialAdapt.UnityMaterialData.ToString">
            <inheritdoc />
        </member>
        <member name="M:AVS.MaterialAdapt.Variables.ColorVariable.Set(AVS.RootModController,UnityEngine.Material,System.String,UnityEngine.Color,AVS.Log.MaterialLog,System.String)">
            <summary>
            Sets the color property of a material with the given value and logs the change.
            </summary>
            <param name="m">The material on which the color property will be set.</param>
            <param name="name">The name of the color property to set.</param>
            <param name="value">The new color value to assign to the property.</param>
            <param name="logConfig">The log configuration used to log the operation.</param>
            <param name="materialName">Optional custom material name for logging purposes.</param>
            <param name="rmc">Root mod controller for logging purposes</param>
        </member>
        <member name="M:AVS.MaterialAdapt.Variables.IShaderVariable.SetTo(AVS.RootModController,UnityEngine.Material,AVS.Log.MaterialLog,System.String)">
            <summary>
            Updates a material according to the preserved values present in the local variable
            </summary>
            <param name="m">Material to update</param>
            <param name="logConfig">Log Configuration</param>
            <param name="rmc">Root mod controller for logging purposes</param>
            <param name="materialName">Optional custom material name to use instead of the nice name of the material itself</param>
        </member>
        <member name="T:AVS.Patches.ArmsControllerPatcher">
            <summary>
            A Harmony patching class for modifying the behavior of the <see cref="T:ArmsController"/> class during its update cycle.
            </summary>
            <remarks>
            This patch adds support for custom handling of player animations and interactions while piloting an AvsVehicle.
            It hooks into the <c>ArmsController.Update</c> method and enables the execution of AvsVehicle-specific piloting animations,
            based on the current vehicle being controlled by the player.
            </remarks>
        </member>
        <member name="M:AVS.Patches.ArmsControllerPatcher.ArmsControllerUpdatePostfix">
            <summary>
            Postfix method that modifies the behavior of the <c>ArmsController.Update</c> method.
            </summary>
            <remarks>
            This method is executed after the original <c>ArmsController.Update</c> method.
            It enables AvsVehicle-specific handling, ensuring that piloting animations are properly executed
            for the vehicle currently controlled by the player. If the player is not piloting an AvsVehicle,
            this method performs no additional actions.
            </remarks>
        </member>
        <member name="T:AVS.Patches.BedPatcher">
            <summary>
            Patches the behavior of the <see cref="T:Bed"/> class to ensure that a submarine vehicle remains stationary while the player is sleeping in a bed.
            </summary>
            <remarks>
            Addresses issues caused by bed usage animations that could otherwise inadvertently affect the position or orientation of the submarine.
            </remarks>
        </member>
        <member name="M:AVS.Patches.BedPatcher.BedEnterInUseModePostfix(Bed)">
            <summary>
            Postfix method that modifies the behavior of the <c>Bed.EnterInUseMode</c> method.
            </summary>
            <remarks>
            This method is executed after the original <c>Bed.EnterInUseMode</c> method.
            It enables the execution of AvsVehicle-specific handling, ensuring that piloting animations are properly executed
            for the vehicle currently controlled by the player. If the player is not piloting an AvsVehicle,
            this method performs no additional actions.
            </remarks>
        </member>
        <member name="M:AVS.Patches.BedPatcher.UpdatePostfix(Bed)">
            <summary>
            Postfix method that modifies the behavior of the <c>Bed.Update</c> method.
            </summary>
            <remarks>
            Ensures that the submarine vehicle's position and rotation remain consistent while the player is in the sleeping animation mode.
            This prevents unwanted movement or orientation changes to the submarine while the <c>Bed</c> is in use.
            </remarks>
            <param name="__instance">The <c>Bed</c> instance being updated.</param>
        </member>
        <member name="T:AVS.Patches.BlockAvsVehicle">
            <summary>
            A component designed to prevent AVS vehicles from entering specific restricted areas referred to as "moon gates."
            </summary>
            <remarks>
            This class monitors the entry and exit of AVS vehicles into a trigger zone defined by its collider.
            It applies force to prevent the vehicles from progressing further while maintaining consistency in gameplay or world design.
            </remarks>
        </member>
        <member name="T:AVS.Patches.BuilderPatcher">
            <summary>
            A Harmony patch class designed for modifying the behavior of the Builder class.
            Specifically tailored for allowing submarines to specify volumes in which
            construction or placement of objects is prohibited.
            </summary>
        </member>
        <member name="M:AVS.Patches.BuilderPatcher.BuilderCheckAsSubModulePostfix(System.Boolean@)">
            <summary>
            Postfix method that modifies the behavior of the Builder's CheckAsSubModule method.
            Ensures that submarines can define specific volumes where object construction or placement
            is restricted based on bounding box and collider checks.
            </summary>
            <param name="__result">
            A boolean value indicating whether the construction or placement is allowed.
            This is modified to false if certain conditions (e.g., overlapping denial zones) are met.
            </param>
        </member>
        <member name="T:AVS.Patches.BuilderToolPatcher">
            <summary>
            A Harmony patch class for modifying the behavior of the BuilderTool component in Unity.
            </summary>
            <remarks>
            This patch ensures that constructed building ghosts properly attach to the submarine
            they are being built in and addresses several potential issues such as ensuring correct
            parenting and removing unwanted components.
            </remarks>
        </member>
        <member name="M:AVS.Patches.BuilderToolPatcher.ConstructPostfix(BuilderTool,Constructable,System.Boolean,System.Boolean)">
            <summary>
            Ensures that building ghosts are properly attached to the Submarine they are built in and removes unwanted components.
            </summary>
            <param name="__instance">The instance of the BuilderTool being used.</param>
            <param name="c">The Constructable object representing the building ghost being constructed.</param>
            <param name="state">The state of the construction (e.g., whether it has started or completed).</param>
            <param name="start">Indicates whether the construction process is starting.</param>
        </member>
        <member name="T:AVS.Patches.CellManagerPatcher">
            <summary>
            Provides patches for the CellManager class to handle specific anomalies or edge cases.
            </summary>
            <remarks>
            The primary purpose of this patch is to address a potential issue where the streamer or globalRoot
            properties of the CellManager instance might be null during the invocation of certain methods.
            This could lead to unexpected errors in scenarios where registering global entities is performed.
            </remarks>
        </member>
        <member name="M:AVS.Patches.CellManagerPatcher.RegisterGlobalEntityPostfix(CellManager,UnityEngine.GameObject)">
            <summary>
            Handles the registration of a global entity within the CellManager.
            Ensures that the proper parent is set even when the streamer or globalRoot properties are null
            during the registration process.
            </summary>
            <param name="__instance">The instance of the CellManager performing the global entity registration.</param>
            <param name="ent">The entity being registered as a global entity.</param>
            <returns>
            Returns true if the registration process can continue normally. Returns false if the parent-setting
            process needs to be deferred due to null streamer or globalRoot properties.
            </returns>
        </member>
        <member name="T:AVS.Patches.CompatibilityPatches.BetterVehicleStoragePatcher">
            <summary>
            PURPOSE: add compatibility for better vehicle storage upgrades
            VALUE: High. It's a very cool mod.
            </summary>
        </member>
        <member name="M:AVS.Patches.CompatibilityPatches.BetterVehicleStoragePatcher.Prefix(System.Object,Equipment,System.Boolean@)">
            <summary>
            This patch is specifically for the Better Vehicle Storage Mod.
            It allows the storage containers to be added to AvsVehicles.
            </summary>
        </member>
        <member name="T:AVS.Patches.CompatibilityPatches.ChameleonSubPatcher">
            <summary>
            ChameleonSubPatcher is a compatibility patch specifically created for the Chameleon mod.
            It ensures that AvsVehicles are built correctly despite the presence of the Chameleon sub.
            Without this patch, vehicles such as submarines may not complete the construction process properly
            and would lack essential components like fabricators.
            </summary>
            <remarks>
            The patch addresses issues caused by a specific transpilation chain that interferes with
            the crafting process of vehicles. Although the implementation does not contain any logic
            within the postfix method, it effectively resolves the problem.
            The underlying issue and its resolution through this patch are currently not fully understood.
            </remarks>
        </member>
        <member name="M:AVS.Patches.CompatibilityPatches.ChameleonSubPatcher.OnCraftingBeginAsyncPostfix">
            <summary>
            Postfix method applied to `ConstructorInput.OnCraftingBeginAsync`.
            This patch is implemented to resolve compatibility issues with the Chameleon mod,
            ensuring that AvsVehicles, such as submarines, finish construction correctly
            and include essential components like fabricators.
            </summary>
            <remarks>
            The method itself contains no explicit logic and serves to modify or adjust
            the transpilation chain affecting the crafting process. The specific behavior
            of the original transpiler and why this method fixes the issue are currently unclear.
            This patch plays a critical role in maintaining proper functionality of vehicles
            during their construction process when the Chameleon mod is in use.
            </remarks>
        </member>
        <member name="T:AVS.Patches.CompatibilityPatches.MapModPatcher">
            <summary>
            The MapModPatcher class provides compatibility patches for the Map Mod,
            ensuring that AvsVehicles are displayed correctly on the map using their corresponding ping sprites.
            This patch prevents the Map Mod from crashing when handling custom AvsVehicle pings.
            </summary>
        </member>
        <member name="M:AVS.Patches.CompatibilityPatches.MapModPatcher.Prefix(System.Object)">
            <summary>
            Harmony prefix patch for ensuring AvsVehicles are displayed correctly on the Map Mod,
            using their associated ping sprites. Prevents the Map Mod from crashing when handling
            custom AvsVehicle pings.
            </summary>
            <param name="__instance">The target instance of the Map Mod object being patched.</param>
            <returns>
            A boolean indicating whether the original method should execute. Returns false
            if the prefix processing handles the requirement and the original method should be skipped.
            </returns>
        </member>
        <member name="T:AVS.Patches.CompatibilityPatches.SilencePlayerPatcher">
            <summary>
            A Harmony patch class for modifying the behavior of the <see cref="T:Player"/> class
            in specific contexts involving the Silence and associated vehicles, to prevent
            potential game softlocks.
            </summary>
        </member>
        <member name="M:AVS.Patches.CompatibilityPatches.SilencePlayerPatcher.PlayerCanBeAttackedHarmonyPostfix(System.Boolean@)">
            <summary>
            A Harmony Postfix patch for modifying the result of the <see cref="M:Player.CanBeAttacked"/> method.
            Ensures that the game does not softlock when interacting with specific vehicles
            associated with the Silence mechanic.
            </summary>
            <param name="__result">The original result of the <see cref="M:Player.CanBeAttacked"/> method,
            modified to allow specific vehicle interactions to properly execute.</param>
        </member>
        <member name="M:AVS.Patches.CompatibilityPatches.SilencePlayerPatcher.GetComponentByName(UnityEngine.GameObject)">
            <summary>
            Determines whether a GameObject contains a component with a specific name, returning true if a match is found.
            Specifically checks for a component named "VehicleLock".
            </summary>
            <param name="obj">The GameObject to inspect for the presence of the specified component.</param>
            <returns>True if the GameObject contains a component named "VehicleLock"; otherwise, false.</returns>
        </member>
        <member name="T:AVS.Patches.ConstructorInputPatcher">
            <summary>
            The <c>ConstructorInputPatcher</c> class provides a Harmony patch for modifying
            the crafting behavior in the <c>ConstructorInput</c> class, enabling more flexible
            and customized crafting mechanics within the application.
            </summary>
            <remarks>
            This class modifies the behavior of the <c>ConstructorInput.Craft</c> method using
            a Harmony transpiler to allow for crafting in additional locations by overriding
            the default crafting position validation logic.
            </remarks>
        </member>
        <member name="M:AVS.Patches.ConstructorInputPatcher.ConstructorInputCraftranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction})">
            <summary>
            A Harmony transpiler method that modifies instructions within the
            <c>ConstructorInput.Craft</c> method to customize crafting position validation logic.
            </summary>
            <param name="instructions">The original sequence of IL code instructions from the <c>ConstructorInput.Craft</c> method.</param>
            <returns>The modified sequence of IL code instructions with custom crafting position validation logic.</returns>
        </member>
        <member name="T:AVS.Patches.CreaturePatcher">
            <summary>
            CreaturePatcher is a class designed to modify the behavior of in-game creatures
            by introducing awareness of nearby leviathan-class entities specifically for
            vehicles derived from AvsVehicle. This patch enhances gameplay by enabling interactions
            with the environment when dangerous creatures are within a specific range.
            </summary>
            <remarks>
            The class operates as a Harmony patch applied to the Creature class, particularly
            targeting the ChooseBestAction method. It allows vehicles implementing the IVehicleStatusListener
            to respond to proximity of certain leviathan classes, creating dynamic and immersive experiences
            during gameplay.
            </remarks>
            <example>
            No example code provided.
            </example>
        </member>
        <member name="M:AVS.Patches.CreaturePatcher.Postfix(Creature)">
            <summary>
            Postfix method for the ChooseBestAction method in the Creature class.
            </summary>
            <param name="__instance">The instance of the Creature being patched.</param>
            <remarks>
            This method is designed to modify the behavior of the ChooseBestAction method
            in the Creature class. It allows vehicles implementing the IVehicleStatusListener
            to respond to proximity of certain leviathan classes, creating dynamic and immersive experiences
            during gameplay.
            </remarks>
        </member>
        <member name="T:AVS.Patches.CreaturePatches.BleederPatcher">
            <summary>
            The BleederPatcher class provides functionality to modify the behavior of the "AttachAndSuck" component
            ensuring that damage caused by bleeder creatures reflects an intuitive approach. Specifically, this ensures
            bleeder creatures deal damage to the appropriate entity instead of inadvertently damaging vehicles.
            </summary>
            <remarks>
            This patch incorporates Harmony transpilers to overwrite specific behaviors of the "AttachAndSuck" class.
            It checks whether the player is piloting an AvsVehicle and ensures bleeders interact correctly without
            causing unintended collisions between the player and the vehicle's mechanics.
            </remarks>
            <example>
            The BleederPatcher modifies the OnCollisionEnter method within the "AttachAndSuck" component.
            </example>
        </member>
        <member name="M:AVS.Patches.CreaturePatches.BleederPatcher.IsPlayerInsideAvsVehicle">
            <summary>
            Checks if the player is currently inside an AvsVehicle.
            </summary>
            <returns>True if the player is inside an AvsVehicle, otherwise false.</returns>
        </member>
        <member name="M:AVS.Patches.CreaturePatches.BleederPatcher.Transpiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction})">
            <summary>
            Modifies the IL code of the OnCollisionEnter method in the AttachAndSuck class to adjust behavior when interacting with vehicles.
            </summary>
            <param name="instructions">The original set of IL instructions to be modified.</param>
            <returns>An enumerable collection of IL instructions with the applied modifications.</returns>
        </member>
        <member name="T:AVS.Patches.CreaturePatches.CrabSquidEnergyMixinPatcher">
            <summary>
            A Harmony patch class designed to modify the behavior of the EnergyMixin class,
            specifically to ensure compatibility with vehicles implementing the AvsVehicle class when affected by the CrabSquid's EMP ability.
            </summary>
        </member>
        <member name="M:AVS.Patches.CreaturePatches.CrabSquidEnergyMixinPatcher.electronicsDisabled(EnergyMixin,System.Boolean)">
            <summary>
            Handles the behavior for setting the electronicsDisabled property in the EnergyMixin class.
            Ensures compatibility with vehicles implementing the AvsVehicle class when affected by disruptive effects like the CrabSquid's EMP.
            </summary>
            <param name="__instance">The instance of the EnergyMixin class being modified.</param>
            <param name="value">A boolean value indicating whether the electronics should be disabled.</param>
            <returns>Returns false if the value change is handled internally within the method, otherwise true to allow the game to handle the update.</returns>
        </member>
        <member name="T:AVS.Patches.CreaturePatches.CrabSquidPatcher">
            <summary>
            A Harmony patch class designed to modify the behavior of the EMPBlast class,
            ensuring the CrabSquid's EMP effect interacts gracefully with vehicles that implement the AvsVehicle class.
            </summary>
        </member>
        <member name="M:AVS.Patches.CreaturePatches.CrabSquidPatcher.OnTouchPostfix(EMPBlast,UnityEngine.Collider)">
            <summary>
            A postfix method for the OnTouch method of the EMPBlast class.
            Ensures the EMP effect properly interacts with vehicles implementing the AvsVehicle class by disabling their electronics and applying visual effects.
            </summary>
            <param name="__instance">The instance of the EMPBlast class.</param>
            <param name="collider">The collider of the GameObject that was touched by the EMP effect.</param>
        </member>
        <member name="T:AVS.Patches.CreaturePatches.GhostPatcher">
            <summary>
            The <c>GhostPatcher</c> class is a Harmony patch used to modify the damage dealt by Ghost Leviathan melee attacks
            to vehicles defined in the AVS.BaseVehicle namespace. It adjusts the bite damage value dynamically depending on
            whether the attacker is an adult or juvenile Ghost Leviathan, and the type of the target vehicle.
            </summary>
            <remarks>
            This patch ensures that the damage inflicted by Ghost Leviathans is configured to specific values set in
            the <c>VehicleConfiguration</c> class:
            - Seamoth and Prawn: 85
            - Cyclops: 250
            </remarks>
        </member>
        <member name="M:AVS.Patches.CreaturePatches.GhostPatcher.GetBiteDamagePostfix(GhostLeviathanMeleeAttack,System.Single@,UnityEngine.GameObject)">
            <summary>
            Adjusts the bite damage dealt by Ghost Leviathans when attacking AVS vehicles.
            </summary>
            <param name="__instance">The instance of the Ghost Leviathan Melee Attack being patched.</param>
            <param name="__result">The resulting bite damage value, modified based on target vehicle type.</param>
            <param name="target">The target of the Ghost Leviathan's melee attack.</param>
        </member>
        <member name="T:AVS.Patches.CreaturePatches.ReaperMeleeAttackPatcher">
            <summary>
            A Harmony patch class that modifies the behavior of the <see cref="T:ReaperMeleeAttack"/> class
            to allow Reaper Leviathans to interact with instances of <see cref="T:AVS.BaseVehicle.AvsVehicle"/>.
            </summary>
            <remarks>
            This patch implements changes to enable Reaper Leviathans to grab an <see cref="T:AVS.BaseVehicle.AvsVehicle"/>
            in a manner similar to their interaction with Seamoths. Additionally, it adjusts damage dealt
            by the Reaper Leviathan's bite dynamically based on the <see cref="T:AVS.Configuration.VehicleConfiguration"/> of
            the targeted <see cref="T:AVS.BaseVehicle.AvsVehicle"/>.
            </remarks>
        </member>
        <member name="M:AVS.Patches.CreaturePatches.ReaperMeleeAttackPatcher.OnTouchPostfix(ReaperMeleeAttack,UnityEngine.Collider)">
            <summary>
            Executes additional logic after the ReaperMeleeAttack.OnTouch method. Handles interactions with AVS vehicles specifically
            allowing Reaper Leviathans to grab AVS vehicles similar to how they grab Seamoths.
            </summary>
            <param name="__instance">The instance of the ReaperMeleeAttack class executing the OnTouch method.</param>
            <param name="collider">The collider of the object that the Reaper Leviathan interacts with.</param>
        </member>
        <member name="M:AVS.Patches.CreaturePatches.ReaperMeleeAttackPatcher.GetBiteDamagePostfix(ReaperMeleeAttack,System.Single@,UnityEngine.GameObject)">
            <summary>
            Modifies the bite damage dealt by Reaper Leviathans when targeting AVS vehicles, applying custom damage values
            specific to the targeted vehicle's configuration.
            </summary>
            <param name="__instance">The instance of the ReaperMeleeAttack performing the bite attack.</param>
            <param name="__result">The original damage dealt by the Reaper Leviathan, modified to reflect the custom configuration.</param>
            <param name="target">The target GameObject, potentially an AVS vehicle, that the Reaper Leviathan is attacking.</param>
        </member>
        <member name="T:AVS.Patches.CreaturePatches.ReaperPatcher">
            <summary>
            A Harmony patch class that modifies the behavior of the <see cref="T:ReaperLeviathan"/> class
            to ensure proper interaction and positioning of an attached <see cref="T:AVS.BaseVehicle.AvsVehicle"/> when grabbed.
            </summary>
            <remarks>
            This patch implements a post-fix to update the position of the <see cref="T:AVS.BaseVehicle.AvsVehicle"/> being
            held by the <see cref="T:ReaperLeviathan"/>. If a valid grab point is defined within the vehicle,
            the patch ensures that the vehicle's position is adjusted to align with its intended grab point,
            maintaining consistent positioning during the interaction.
            </remarks>
        </member>
        <member name="M:AVS.Patches.CreaturePatches.ReaperPatcher.UpdatePostfix(ReaperLeviathan)">
            <summary>
            Ensures the proper positioning of an attached <see cref="T:AVS.BaseVehicle.AvsVehicle"/> when held by the <see cref="T:ReaperLeviathan"/>.
            This method adjusts the vehicle's position to align with its defined grab point or its default position.
            </summary>
            <param name="__instance">The instance of the <see cref="T:ReaperLeviathan"/> currently executing the update method.</param>
        </member>
        <member name="T:AVS.Patches.CreaturePatches.WarperPatcher">
            <summary>
            The WarperPatcher class provides patches to modify the behavior of creatures in the game, specifically addressing interactions with "Warper" creatures and their "Warp Ball" attacks.
            It is designed to protect players who are located inside submarines from being targeted or affected by Warper attacks.
            </summary>
            <remarks>
            This class utilizes Harmony patches to alter the behavior of "Warper" creatures, redirecting certain attack actions to ensure player safety inside submarines.
            Additionally, it prevents warp balls from impacting players who are inside submarines.
            </remarks>
        </member>
        <member name="M:AVS.Patches.CreaturePatches.WarperPatcher.ChooseBestActionPostfix(Creature,CreatureAction@)">
            <summary>
            Postfix method for the <c>ChooseBestAction</c> method in the <c>Creature</c> class.
            Modifies the behavior of the Warper creature to prevent it from selecting ranged attack actions
            (specifically "RangedAttackLastTarget") if the player is inside a submarine.
            </summary>
            <param name="__instance">The instance of the <c>Creature</c> being patched.</param>
            <param name="__result">The action chosen by the <c>Creature</c> before modification. Can be modified by the postfix.</param>
        </member>
        <member name="T:AVS.Patches.CreaturePatches.WarperPatcher2">
            <summary>
            The WarperPatcher2 class provides patches to modify the behavior of warp balls in the game, specifically preventing their effects from impacting players who are located inside submarines.
            </summary>
            <remarks>
            This class employs Harmony patches to intercept the behavior of warp balls. By applying modifications, it ensures that warp balls no longer target or impact players who are either inside a submarine or safely within its vicinity. This functionality enhances player safety while using submarines in potentially dangerous situations involving warp balls.
            </remarks>
        </member>
        <member name="M:AVS.Patches.CreaturePatches.WarperPatcher2.WarpBallWarpPrefix(WarpBall,UnityEngine.GameObject,UnityEngine.Vector3@)">
            <summary>
            Prefix method for the <c>Warp</c> method in the <c>WarpBall</c> class.
            Modifies the behavior of warp balls to prevent their effects from impacting players if they are inside a submarine.
            Ensures warp balls do not target or affect players who are protected by submarines.
            </summary>
            <param name="__instance">The instance of the <c>WarpBall</c> being patched.</param>
            <param name="target">The potential target of the warp ball's effect.</param>
            <param name="position">The position in the game world where the warp effect is intended to occur. Can be modified by the prefix.</param>
            <returns>
            Returns <c>true</c> to allow the original <c>Warp</c> method to execute when players are not in a submarine,
            and <c>false</c> to skip the original method when a submarine is detected, effectively preventing the warp effect.
            </returns>
        </member>
        <member name="T:AVS.Patches.CyclopsPatcher">
            <summary>
            This class provides a patch for the CyclopsVehicleStorageTerminalManager to enhance its functionality.
            Specifically, it modifies the behavior of the storage interface when interacting with docked vehicles.
            </summary>
            <remarks>
            The patch allows the Cyclops Vehicle Storage Terminal to interact with AvsVehicle data,
            enabling seamless integration and interaction with expanded vehicle types and their storage systems.
            </remarks>
            <example>
            This patch executes a postfix on the StorageButtonClick method of the
            CyclopsVehicleStorageTerminalManager, enabling custom logic for storage access.
            </example>
        </member>
        <member name="M:AVS.Patches.CyclopsPatcher.Transpiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction})">
            <summary>
            Transforms the IL code within the target method of the CyclopsVehicleStorageTerminalManager class to modify behavior.
            This method is designed to enhance compatibility with additional vehicle types by replacing specific calls in instructions.
            </summary>
            <param name="instructions">A collection of IL code instructions to be modified by this transpiler.</param>
            <returns>A transformed IEnumerable of CodeInstruction objects with modifications applied for enhanced functionality.</returns>
        </member>
        <member name="M:AVS.Patches.CyclopsPatcher.VehicleDockedPrefix(CyclopsVehicleStorageTerminalManager,Vehicle)">
            <summary>
            Modifies the behavior of the VehicleDocked method in the CyclopsVehicleStorageTerminalManager class
            to support specific functionalities for custom vehicle types derived from AvsVehicle.
            </summary>
            <param name="__instance">The instance of CyclopsVehicleStorageTerminalManager where the method is being executed.</param>
            <param name="vehicle">The vehicle object that is being docked.</param>
        </member>
        <member name="M:AVS.Patches.CyclopsPatcher.VehicleDockedPostfix(CyclopsVehicleStorageTerminalManager,Vehicle)">
            <summary>
            Executes after a vehicle is docked in the Cyclops's vehicle storage terminal and modifies its behavior for compatibility with custom vehicle types.
            Adjusts the instance to accommodate the docked vehicle, ensuring proper utility and interface functionality.
            </summary>
            <param name="__instance">The instance of the CyclopsVehicleStorageTerminalManager handling the vehicle docking process.</param>
            <param name="vehicle">The vehicle being docked in the Cyclops that may require customized behavior adjustments.</param>
        </member>
        <member name="M:AVS.Patches.CyclopsPatcher.StorageButtonClickPostfix(CyclopsVehicleStorageTerminalManager,CyclopsVehicleStorageTerminalManager.VehicleStorageType,System.Int32)">
            <summary>
            Modifies the behavior of the Cyclops Vehicle Storage Terminal's StorageButtonClick method to support specific functionality for docked vehicles.
            This postfix ensures proper handling of storage interactions for Seamoth vehicles docked in the Cyclops.
            </summary>
            <param name="__instance">The instance of the CyclopsVehicleStorageTerminalManager currently being patched.</param>
            <param name="type">The type of vehicle storage being accessed.</param>
            <param name="slotID">The slot ID of the storage container being interacted with.</param>
        </member>
        <member name="T:AVS.Patches.DockedVehicleHandTargetPatch">
            <summary>
            A patch class designed to modify the behavior of the DockedVehicleHandTarget class.
            This patch ensures the expected interaction with docked vehicles, including hover and click functionalities,
            enabling appropriate feedback and operations.
            </summary>
            <remarks>
            This class utilizes the Harmony library to inject additional behavior into the DockedVehicleHandTarget's methods
            through postfix and prefix patches, enhancing the functionality of vehicle docking and undocking processes.
            </remarks>
        </member>
        <member name="M:AVS.Patches.DockedVehicleHandTargetPatch.Transpiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction})">
            <summary>
            Transpiles the instructions of the OnHandHover method in the DockedVehicleHandTarget class to inject
            custom behavior by modifying certain code instructions. This allows enhanced interaction with docked vehicles,
            making the method more general and flexible in its functionality.
            </summary>
            <param name="instructions">An enumerable collection of original IL code instructions to be transpiled.</param>
            <returns>A modified enumerable collection of IL code instructions with the custom changes applied.</returns>
        </member>
        <member name="M:AVS.Patches.DockedVehicleHandTargetPatch.OnHandHoverPostfix(DockedVehicleHandTarget)">
            <summary>
            Executes additional behavior and modifications after the OnHandHover method is invoked on a DockedVehicleHandTarget instance.
            This method is used to enhance the interaction with docked vehicles, such as displaying additional information or altering behavior.
            </summary>
            <param name="__instance">The instance of DockedVehicleHandTarget on which the OnHandHover method was called.</param>
        </member>
        <member name="M:AVS.Patches.DockedVehicleHandTargetPatch.OnHandClickPrefix(DockedVehicleHandTarget,GUIHand)">
            <summary>
            Handles the prefix logic for the OnHandClick method in DockedVehicleHandTarget, allowing for custom behavior during the interaction with a docked vehicle.
            This method ensures undocking clearance, triggers undocking animations, and updates environmental states as necessary.
            </summary>
            <param name="__instance">The instance of the DockedVehicleHandTarget being interacted with.</param>
            <param name="hand">The GUIHand instance interacting with the DockedVehicleHandTarget.</param>
            <returns>A boolean indicating whether to proceed with the original method's execution. Returning <c>false</c> skips the original method.</returns>
        </member>
        <member name="T:AVS.Patches.EnergyMixinPatcher">
            <summary>
            A patching class for the EnergyMixin component used in the game.
            This class provides a Harmony patch specifically targeting the NotifyHasBattery method of EnergyMixin.
            </summary>
            <remarks>
            The purpose of this patch is to handle a specific edge case where the EnergyMixin's NotifyHasBattery method is invoked with a null InventoryItem.
            This could prevent potential errors during game exit, ensuring proper unloading and avoiding memory leaks.
            </remarks>
        </member>
        <member name="M:AVS.Patches.EnergyMixinPatcher.EnergyMixinNotifyHasBatteryHarmonyPrefix(EnergyMixin,InventoryItem)">
            <summary>
            A Harmony prefix method that patches the NotifyHasBattery method of the EnergyMixin class.
            Handles cases where the NotifyHasBattery method might be called with a null InventoryItem,
            preventing potential errors and ensuring proper behavior during the game's unload process.
            </summary>
            <param name="__instance">The EnergyMixin instance on which the NotifyHasBattery method is invoked.</param>
            <param name="item">The InventoryItem associated with the NotifyHasBattery method call; can be null.</param>
            <returns>
            A boolean value indicating whether the original method should execute (true) or not (false).
            Returns false to skip the original method execution in scenarios where InventoryItem is null or invalid.
            </returns>
        </member>
        <member name="T:AVS.Patches.EquipmentPatcher">
            <summary>
            The EquipmentPatcher class is designed to enhance the functionality and compatibility
            of the base game's Equipment class with custom modifications introduced by AvsVehicles.
            It utilizes Harmony patches to modify or extend specific methods within the Equipment
            class to handle new upgrade slots and ensure proper interaction with the game's mechanics.
            </summary>
        </member>
        <member name="M:AVS.Patches.EquipmentPatcher.SetLabelPrefix(Equipment,System.String,System.Collections.Generic.Dictionary{EquipmentType,System.Collections.Generic.List{System.String}}@)">
            <summary>
            Prefix method for the SetLabel method in the Equipment class. Updates the typeToSlots
            dictionary for Equipment instances owned by an AvsVehicle, ensuring compatibility with
            the AvsVehicles' custom upgrade slots.
            </summary>
            <param name="__instance">The Equipment instance calling the SetLabel method.</param>
            <param name="l">The label string passed to the original SetLabel method.</param>
            <param name="___typeToSlots">A reference to the Equipment's typeToSlots dictionary
            that maps EquipmentType to a list of slot names.</param>
        </member>
        <member name="M:AVS.Patches.EquipmentPatcher.AddSlotPrefix(Equipment,System.String,System.Collections.Generic.Dictionary{EquipmentType,System.Collections.Generic.List{System.String}}@)">
            <summary>
            Prefix method for the AddSlot method in the Equipment class. Adjusts the typeToSlots
            dictionary for Equipment instances owned by an AvsVehicle. Ensures the slots align
            with the custom configuration of the AvsVehicle's module upgrades.
            </summary>
            <param name="__instance">The Equipment instance calling the AddSlot method.</param>
            <param name="slot">The slot name passed to the original AddSlot method.</param>
            <param name="___typeToSlots">A reference to the Equipment's typeToSlots dictionary that maps EquipmentType to a list of slot names.</param>
        </member>
        <member name="M:AVS.Patches.EquipmentPatcher.GetCompatibleSlotDefaultPrefix(Equipment,EquipmentType,System.Collections.Generic.Dictionary{EquipmentType,System.Collections.Generic.List{System.String}}@)">
            <summary>
            Prefix method for the GetCompatibleSlotDefault method in the Equipment class. Updates the typeToSlots
            dictionary with the VehicleTypeToSlots dictionary from the owning AvsVehicle, ensuring slot compatibility
            for specific EquipmentTypes related to the AvsVehicle class.
            </summary>
            <param name="__instance">The Equipment instance calling the GetCompatibleSlotDefault method.</param>
            <param name="itemType">The EquipmentType being processed to determine slot compatibility.</param>
            <param name="___typeToSlots">A reference to the Equipment's typeToSlots dictionary that maps EquipmentType to a list of slot names.</param>
        </member>
        <member name="M:AVS.Patches.EquipmentPatcher.GetFreeSlotPrefix(Equipment,EquipmentType,System.Collections.Generic.Dictionary{EquipmentType,System.Collections.Generic.List{System.String}}@)">
            <summary>
            Prefix method for the GetFreeSlot method in the Equipment class. Modifies the typeToSlots
            dictionary for Equipment instances owned by an AvsVehicle, ensuring slots are updated appropriately
            based on the vehicle's custom configuration for specific EquipmentType values.
            </summary>
            <param name="__instance">The instance of the Equipment class invoking the GetFreeSlot method.</param>
            <param name="type">The EquipmentType being queried for a free slot.</param>
            <param name="___typeToSlots">A reference to the Equipment's typeToSlots dictionary, mapping
            EquipmentType to a list of slot names.</param>
        </member>
        <member name="M:AVS.Patches.EquipmentPatcher.GetSlotsPrefix(Equipment,EquipmentType,System.Collections.Generic.Dictionary{EquipmentType,System.Collections.Generic.List{System.String}}@)">
            <summary>
            Prefix method for the GetSlots method in the Equipment class. Adjusts the typeToSlots
            dictionary for Equipment instances to ensure compatibility with AvsVehicles' slot configurations.
            </summary>
            <param name="__instance">The Equipment instance calling the GetSlots method.</param>
            <param name="itemType">The EquipmentType value passed to the original GetSlots method.</param>
            <param name="___typeToSlots">A reference to the Equipment's typeToSlots dictionary,
            which maps EquipmentType to a list of slot names.</param>
        </member>
        <member name="M:AVS.Patches.EquipmentPatcher.RemoveSlot(Equipment,System.String,System.Collections.Generic.Dictionary{EquipmentType,System.Collections.Generic.List{System.String}}@)">
            <summary>
            Prefix method for the RemoveSlot method in the Equipment class. This method
            ensures that any removal of a slot for an equipment instance owned by an AvsVehicle
            is aligned with the AvsVehicle's custom VehicleTypeToSlots mapping.
            </summary>
            <param name="__instance">The Equipment instance calling the RemoveSlot method.</param>
            <param name="slot">The name of the slot to be removed.</param>
            <param name="___typeToSlots">A reference to the Equipment's typeToSlots dictionary
            that maps EquipmentType to a list of slot names.</param>
        </member>
        <member name="M:AVS.Patches.EquipmentPatcher.GetSlotTypePrefix(System.String,EquipmentType@,System.Collections.Generic.Dictionary{EquipmentType,System.Collections.Generic.List{System.String}})">
            <summary>
            Prefix method for the GetSlotType method in the Equipment class. Determines the EquipmentType
            for a given slot name, enabling custom behavior for module slots if applicable.
            </summary>
            <param name="slot">The slot name passed to the original GetSlotType method.</param>
            <param name="__result">A reference to the result EquipmentType that will be returned by the original method.</param>
            <param name="___typeToSlots">A reference to the Equipment's typeToSlots dictionary that maps EquipmentType to a list of slot names.</param>
            <returns>Returns false if the slot corresponds to a module type, bypassing the original method. Returns true otherwise, allowing the original method to execute.</returns>
        </member>
        <member name="M:AVS.Patches.EquipmentPatcher.IsCompatiblePrefix(EquipmentType,EquipmentType,System.Boolean@)">
            <summary>
            Prefix method for the IsCompatible method in the Equipment class. Determines whether an EquipmentType
            is compatible with a given slot type, considering additional custom compatibility for specific types such as VehicleModule and AvsVehicleBuilder.ModuleType.
            </summary>
            <param name="itemType">The EquipmentType of the item being checked for compatibility.</param>
            <param name="slotType">The EquipmentType of the slot being checked for compatibility with the item.</param>
            <param name="__result">A reference to the compatibility check result, which will be set to true if the itemType is compatible with the slotType.</param>
            <returns>Returns false to skip the original method execution if compatibility is found; otherwise, returns true to allow the original method to execute.</returns>
        </member>
        <member name="T:AVS.Patches.VehicleExosuitPatcher">
            <summary>
            This class contains Harmony patches designed to extend and modify the functionality
            of vehicles, specifically Exosuits, in order to enable proper handling of custom
            vehicle upgrades.
            </summary>
            <remarks>
            The Exosuit does not originally implement methods such as `OnUpgradeModuleUse`
            or `OnUpgradeModuleToggle`. These patches address this limitation by intercepting
            and adding the required functionality to those methods through the vehicle class.
            The purpose of these modifications is to make custom upgrade modules usable
            within Exosuits.
            </remarks>
        </member>
        <member name="M:AVS.Patches.VehicleExosuitPatcher.VehicleOnUpgradeModuleTogglePostfix(Vehicle,System.Int32,System.Boolean)">
            <summary>
            Postfix method for the <c>Vehicle.OnUpgradeModuleToggle</c> Harmony patch. This method is invoked
            after the <c>OnUpgradeModuleToggle</c> method is called for a vehicle. It ensures that custom
            functionality is executed when a toggleable upgrade module is activated or deactivated in an Exosuit.
            </summary>
            <param name="__instance">The instance of the <c>Vehicle</c> that the upgrade module belongs to.</param>
            <param name="slotID">The slot ID of the upgrade module being toggled.</param>
            <param name="active">
            A boolean indicating whether the upgrade module in the specified slot is being activated (<c>true</c>)
            or deactivated (<c>false</c>).
            </param>
        </member>
        <member name="M:AVS.Patches.VehicleExosuitPatcher.VehicleOnUpgradeModuleUsePostfix(Vehicle,TechType,System.Int32)">
            <summary>
            Postfix method for the <c>Vehicle.OnUpgradeModuleUse</c> Harmony patch. This method is invoked
            after the <c>OnUpgradeModuleUse</c> method is called for a vehicle. It ensures that custom
            functionality is executed when an upgrade module is used in an Exosuit, enabling additional
            behaviors or handling for specific modules.
            </summary>
            <param name="__instance">The instance of the <c>Vehicle</c> being patched, which is expected to be an Exosuit.</param>
            <param name="techType">The technology type of the upgrade module being used.</param>
            <param name="slotID">The slot ID of the upgrade module being used.</param>
        </member>
        <member name="T:AVS.Patches.ExosuitPatcher">
            <summary>
            This class applies Harmony patches to the `Exosuit` class to introduce
            functionality for handling interactions with upgrade modules.
            The patches adjust the behavior of input-related methods to extend support
            for custom vehicle upgrades.
            </summary>
            <remarks>
            The `Exosuit` class inherently lacks support for certain methods such as
            `OnUpgradeModuleUse` and `OnUpgradeModuleToggle`, which prevents its proper
            integration with custom upgrade modules. This class overrides and extends
            input processing methods (e.g., key presses and releases) to enable
            support for features like module activation, toggling, and charging during
            gameplay.
            </remarks>
        </member>
        <member name="M:AVS.Patches.ExosuitPatcher.ExosuitSlotKeyDownPostfix(Exosuit,System.Int32)">
            <summary>
            Postfix method for the <c>Exosuit.SlotKeyDown</c> Harmony patch. This method is executed
            after the <c>SlotKeyDown</c> method of the <c>Exosuit</c> class to trigger custom functionality
            when a slot key is pressed in the Exosuit's upgrade module system.
            </summary>
            <param name="__instance">The instance of the <c>Exosuit</c> that the action is being performed on.</param>
            <param name="slotID">The identifier for the specific upgrade module slot being interacted with.</param>
        </member>
        <member name="M:AVS.Patches.ExosuitPatcher.ExosuitSlotKeyHeldPostfix(Exosuit,System.Int32)">
            <summary>
            Postfix method for the <c>Exosuit.SlotKeyHeld</c> Harmony patch. This method is invoked
            when a slot key is held down for an Exosuit. It ensures appropriate functionality related
            to the held slot is executed, such as handling custom upgrade module behaviors.
            </summary>
            <param name="__instance">The instance of the <c>Exosuit</c> where the slot key is being held.</param>
            <param name="slotID">The ID of the slot associated with the key being held.</param>
        </member>
        <member name="M:AVS.Patches.ExosuitPatcher.ExosuitSlotKeyUpPostfix(Exosuit,System.Int32)">
            <summary>
            Postfix method for the <c>Exosuit.SlotKeyUp</c> Harmony patch. This method is invoked
            after the <c>SlotKeyUp</c> method is executed in an <c>Exosuit</c>. It handles the
            release action of a specific upgrade slot and ensures proper processing of custom
            upgrade functionalities.
            </summary>
            <param name="__instance">The instance of the <c>Exosuit</c> for which the slot key action occurred.</param>
            <param name="slotID">The slot ID associated with the released key in the <c>Exosuit</c>.</param>
        </member>
        <member name="M:AVS.Patches.ExosuitPatcher.ExosuitSlotLeftDownPostfix(Exosuit)">
            <summary>
            Postfix method for the <c>Exosuit.SlotLeftDown</c> Harmony patch. This method is invoked
            after the <c>SlotLeftDown</c> method is called for an Exosuit. It processes interactions
            with the currently active upgrade module when the left-hand slot is pressed down.
            </summary>
            <param name="__instance">The instance of the <c>Exosuit</c> for which the left-hand slot is activated.</param>
        </member>
        <member name="M:AVS.Patches.ExosuitPatcher.ExosuitSlotLeftHeldPostfix(Exosuit)">
            <summary>
            Postfix method for the <c>Exosuit.SlotLeftHeld</c> Harmony patch. This method is invoked
            after the <c>SlotLeftHeld</c> method is called to ensure functionality related to
            continuous interaction with upgrade modules is processed while the left interaction button is held.
            </summary>
            <param name="__instance">The instance of the <c>Exosuit</c> being interacted with.</param>
        </member>
        <member name="M:AVS.Patches.ExosuitPatcher.ExosuitSlotLeftUpPostfix(Exosuit)">
            <summary>
            Postfix method for the <c>Exosuit.SlotLeftUp</c> Harmony patch. This method is executed
            after the <c>SlotLeftUp</c> method is called on an <c>Exosuit</c>, enabling custom actions
            when the left slot key is released for the currently active slot.
            </summary>
            <param name="__instance">The instance of the <c>Exosuit</c> the method is invoked on, representing the player's current vehicle.</param>
        </member>
        <member name="T:AVS.Patches.FabricatorPatcher">
            <summary>
            Provides patching functionality for fabricator and constructor-related behaviors in the AVS.BaseVehicle namespace.
            This class ensures onboard fabricators are correctly powered and prevents the construction of multiple vehicles concurrently.
            </summary>
            <remarks>
            Uses the Harmony library to apply prefix patches for specific methods in target classes such as GhostCrafter, CrafterLogic, and ConstructorInput.
            The primary functionality focuses on evaluating power status and preventing undesirable construction behaviors.
            </remarks>
        </member>
        <member name="M:AVS.Patches.FabricatorPatcher.HasEnoughPowerPrefix(GhostCrafter,System.Boolean@)">
            <summary>
            Determines whether the GhostCrafter has enough power to perform its operation.
            It evaluates the power status of the associated vehicle and sets the result accordingly.
            </summary>
            <param name="__instance">The instance of the GhostCrafter being evaluated.</param>
            <param name="__result">A reference to the boolean result indicating power sufficiency.</param>
            <returns>
            Returns false to prevent the original method from being executed, or true if the operation is unaffected.
            </returns>
        </member>
        <member name="T:AVS.Patches.CrafterLogicPatcher">
            <summary>
            Provides patching functionality for crafting logic, specifically addressing energy consumption behaviors in the AVS framework.
            This class enhances the logic for determining power usage within fabricators aboard vehicles, ensuring proper energy validation
            and power systems integration.
            </summary>
            <remarks>
            Implements prefix patches using the Harmony library to intervene in the CrafterLogic.ConsumeEnergy method. The patch accounts for
            unique scenarios where power relays may not properly function, such as within certain custom vehicle contexts provided by the AVS framework.
            Enables compatibility with game modes that do not require power consumption, such as Creative.
            </remarks>
        </member>
        <member name="M:AVS.Patches.CrafterLogicPatcher.ConsumeEnergyPrefix(CrafterLogic,System.Boolean@,PowerRelay,System.Single)">
            <summary>
            Modifies the behavior of the CrafterLogic.ConsumeEnergy method to handle unique energy consumption logic for custom vehicle scenarios.
            This method ensures proper energy validation and power relay handling when interacting with AVS vehicles.
            </summary>
            <param name="__instance">The instance of CrafterLogic associated with the energy consumption operation.</param>
            <param name="__result">A reference to a boolean result indicating whether the operation was successfully processed.</param>
            <param name="powerRelay">The power relay involved in the energy consumption context.</param>
            <param name="amount">The amount of energy required for the operation.</param>
            <returns>
            Returns true to allow the original operation to proceed, or false to override the original behavior
            and apply custom energy consumption logic.
            </returns>
        </member>
        <member name="T:AVS.Patches.ConstructorInputFabricatorPatcher">
            <summary>
            Ensures that the ConstructorInput class properly handles vehicle construction interactions.
            This patch prevents multiple vehicle construction events from being executed simultaneously.
            </summary>
            <remarks>
            Applies a Harmony prefix patch to the OnHandClick method of the ConstructorInput class.
            The functionality evaluates whether the current build target is a valid AvsVehicle component
            and interrupts the construction process if the condition is met, ensuring proper construction behavior.
            </remarks>
        </member>
        <member name="M:AVS.Patches.ConstructorInputFabricatorPatcher.OnHandClickPrefix(ConstructorInput,GUIHand)">
            <summary>
            Handles the interaction logic when a hand click event is triggered on the ConstructorInput.
            Ensures that the construction process is interrupted if the target build object is an AvsVehicle component.
            </summary>
            <param name="__instance">The instance of the ConstructorInput being evaluated during the hand click.</param>
            <param name="hand">The GUIHand instance representing the hand performing the interaction.</param>
            <returns>
            Returns false to interrupt the hand click event if the target is an AvsVehicle component, or true to allow normal execution.
            </returns>
        </member>
        <member name="T:AVS.Patches.FreezeTimePatcher">
            <summary>
            Provides functionality for managing audio sources in relation to the game's pause state, utilizing the FreezeTime system.
            </summary>
            <remarks>
            This class allows for the registration of audio sources, ensuring they are paused when the game is paused
            and unpaused when the game resumes. It interacts with the FreezeTime system to monitor pause state transitions.
            </remarks>
        </member>
        <member name="M:AVS.Patches.FreezeTimePatcher.Register(UnityEngine.AudioSource)">
            <summary>
            Registers an AudioSource to be managed by the FreezeTime system.
            </summary>
            <remarks>
            This method adds the given AudioSource to a managed list, ensuring its state (paused or unpaused)
            reflects the game's pause status handled by the FreezeTime system. Null references in the list
            are removed to maintain integrity.
            </remarks>
            <param name="source">The AudioSource to be registered.</param>
            <returns>The registered AudioSource.</returns>
        </member>
        <member name="M:AVS.Patches.FreezeTimePatcher.FreezeTimeSetPostfix">
            <summary>
            Postfix method executed after FreezeTime.Set is invoked to manage the state of registered AudioSources.
            </summary>
            <remarks>
            This method checks the state of the FreezeTime system to determine whether the game is paused.
            If the game is paused, all valid AudioSources in the registered list are paused.
            Conversely, if the game is unpaused, all valid AudioSources are resumed.
            It also removes null references from the list to maintain its integrity.
            </remarks>
        </member>
        <member name="T:AVS.Patches.KnownTechPatcher">
            <summary>
            Provides functionality to unlock all AVS vehicle encyclopedia entries
            in Creative mode or via a specified console command.
            </summary>
            <remarks>
            This class includes a Harmony patch for the KnownTech.UnlockAll method to register
            AVS vehicle entries in the PDA Encyclopedia.
            </remarks>
        </member>
        <member name="M:AVS.Patches.KnownTechPatcher.KnownTechUnlockAllHarmonyPostfix">
            <summary>
            Harmony Postfix method to ensure that all AVS vehicle entries
            are unlocked in the in-game PDA encyclopedia when the
            KnownTech.UnlockAll method is called.
            </summary>
            <remarks>
            This method loops through all registered AVS vehicle types and
            registers their names in the PDAEncyclopedia without setting them
            to be discovered.
            </remarks>
        </member>
        <member name="T:AVS.Patches.MainMenuLoadPanelPatcher">
            <summary>
            Harmony patch for <see cref="T:MainMenuLoadPanel"/> to support custom save file sprites.
            See also: <see cref="T:AVS.Patches.SaveLoadManagerPatcher"/>
            </summary>
        </member>
        <member name="F:AVS.Patches.MainMenuLoadPanelPatcher.HasTechTypes">
            <summary>
            List of tech types that have associated save file sprites.
            </summary>
        </member>
        <member name="M:AVS.Patches.MainMenuLoadPanelPatcher.AddLoadButtonSprites(MainMenuLoadButton)">
            <summary>
            Adds custom save file sprites as child images to the given <see cref="T:MainMenuLoadButton"/>.
            </summary>
            <param name="lb">The load button to add sprites to.</param>
        </member>
        <member name="M:AVS.Patches.MainMenuLoadPanelPatcher.MainMenuLoadPanelUpdateLoadButtonStatePostfix(MainMenuLoadButton)">
            <summary>
            Harmony postfix for <see cref="M:MainMenuLoadPanel.UpdateLoadButtonState(MainMenuLoadButton)"/>.
            Ensures custom save file sprites are displayed and sized correctly.
            </summary>
            <param name="lb">The load button whose state is being updated.</param>
        </member>
        <member name="T:AVS.Patches.PDAPatcher">
            <summary>
            Provides patch functionality for the PDA class through Harmony.
            Ensures proper QuickSlots display when the player is inside an AvsVehicle,
            and prevents Drones from interacting with the Player's inventory.
            </summary>
        </member>
        <member name="M:AVS.Patches.PDAPatcher.ClosePostfix">
            <summary>
            A Harmony patch method executed after the PDA.Close method.
            Ensures that the appropriate QuickSlots are displayed when the player
            is inside an AvsVehicle but not piloting it.
            If the player is inside the AvsVehicle and not actively controlling it,
            the QuickSlots will reset to the default player inventory (e.g., tools, flashlight, etc.).
            </summary>
        </member>
        <member name="T:AVS.Patches.PingInstancePatcher">
            <summary>
            A Harmony patch class that modifies the behavior of the PingInstance class.
            Specifically, addresses the issue where PingInstances contain null origins, which can lead to errors
            in the display of ping sprites. This patch ensures that such instances are corrected by defaulting the origin
            to the PingInstance's own transform.
            </summary>
        </member>
        <member name="M:AVS.Patches.PingInstancePatcher.PingInstanceGetPositionPrefix(PingInstance)">
            <summary>
            Harmony prefix method for the <c>PingInstance.GetPosition</c> method. This prefix
            ensures that if the <c>origin</c> property of a PingInstance is <c>null</c>,
            it is set to the PingInstance's own transform. This prevents issues where
            ping sprites fail to display due to a null origin.
            </summary>
            <param name="__instance">The PingInstance being patched.</param>
        </member>
        <member name="T:AVS.Patches.PlaceToolPatcher">
            <summary>
            The PlaceToolPatcher class applies patches to the PlaceTool methods using Harmony.
            It ensures that objects placed in the game maintain proper hierarchies and are correctly parented,
            especially when working with submarine-type vehicles.
            </summary>
        </member>
        <member name="M:AVS.Patches.PlaceToolPatcher.OnPlacePostfix(PlaceTool)">
            <summary>
            Postfix method that modifies the behavior of the PlaceTool's OnPlace method.
            Ensures that objects placed in the game, particularly within submarine-type
            vehicles, are properly parented to maintain correct hierarchies.
            </summary>
            <param name="__instance">The instance of the PlaceTool being patched.</param>
        </member>
        <member name="M:AVS.Patches.PlaceToolPatcher.LateUpdatePrefix(PlaceTool)">
            <summary>
            Prefix method that modifies the behavior of the PlaceTool's LateUpdate method.
            Ensures proper parenting and hierarchy adjustments for objects interacting with
            submarine-type vehicles when the player is present.
            </summary>
            <param name="__instance">The instance of the PlaceTool being patched.</param>
        </member>
        <member name="T:AVS.Patches.PlayerControllerPatcher">
            <summary>
            Harmony patch class for modifying the behavior of the <see cref="T:PlayerController"/> class.
            </summary>
            <remarks>
            This patch ensures that the player always behaves as if "normally grounded" while inside an AVS vehicle of
            type <see cref="T:AVS.VehicleTypes.Submarine"/>.
            It prevents the player from performing swim-related actions when inside a submarine vehicle.
            </remarks>
        </member>
        <member name="M:AVS.Patches.PlayerControllerPatcher.HandleUnderWaterStatePrefix(PlayerController)">
            <summary>
            Harmony prefix patch method for modifying the behavior of the HandleUnderWaterState method in the PlayerController class.
            Ensures the player behaves as if grounded and disables swim-related actions when inside a submarine vehicle.
            </summary>
            <param name="__instance">The instance of the PlayerController being patched.</param>
            <returns>
            Returns false if the player is inside a submarine and not controlling it, preventing the original method from executing.
            Returns true otherwise, allowing the original method to execute.
            </returns>
        </member>
        <member name="T:AVS.Patches.PlayerPatcher">
            <summary>
            The PlayerPatcher class contains a set of Harmony patches that modify the behavior of the Player class
            in specific scenarios, particularly when interacting with an AVS vehicle or other specialized game states.
            This class introduces custom behavior for underwater activities, pilot seat exits, and other gameplay elements.
            It leverages the Harmony library to override or extend the default methods of the Player class.
            </summary>
        </member>
        <member name="M:AVS.Patches.PlayerPatcher.AwakePostfix(Player)">
            <summary>
            Executes additional setup logic after the player object's Awake method is called. This includes initializing the game's console commands,
            marking the player as awakened, loading scanner data entries, deciding on HUD elements, and setting up build bot paths.
            </summary>
            <param name="__instance">The instance of the Player class being initialized.</param>
        </member>
        <member name="M:AVS.Patches.PlayerPatcher.StartPostfix(Player)">
            <summary>
            Performs additional logic after the player's Start method has been executed. This includes updating the game state
            to indicate that the player has started.
            </summary>
            <param name="__instance">The instance of the Player class for which the Start method is being patched.</param>
        </member>
        <member name="M:AVS.Patches.PlayerPatcher.PlayerTryEjectPrefix(Player)">
            <summary>
            Adjusts the behavior of the Player.TryEject method to ensure compatibility with the AvsVehicle system
            and integration with the DeathRun functionality. Prevents the default ejection process if the player is using an AvsVehicle.
            </summary>
            <param name="__instance">The Player instance on which the TryEject method is invoked.</param>
            <returns>Returns true if no AvsVehicle is associated with the player, allowing the default ejection logic to execute; otherwise, returns false.</returns>
        </member>
        <member name="M:AVS.Patches.PlayerPatcher.GetDepthClass(Player,Ocean.DepthClass@)">
            <summary>
            Overrides the depth classification logic for the player. This determines the current depth class,
            which affects crush depth values and other related gameplay mechanics, based on whether the player
            is controlling a vehicle or otherwise.
            </summary>
            <param name="__instance">The instance of the Player class for which the depth class is being evaluated.</param>
            <param name="__result">The resulting Ocean.DepthClass value that represents the current depth classification for the player.</param>
            <returns>
            Returns true to proceed with the original method logic; false if the depth class is overridden
            and processed within this method.
            </returns>
        </member>
        <member name="M:AVS.Patches.PlayerPatcher.UpdatePostfix(Player)">
            <summary>
            Adjusts the player's animator states based on their interaction with a submarine. Ensures the correct movement states
            are set when the player is inside a submarine but not controlling it, preventing animations such as swimming or diving.
            </summary>
            <param name="__instance">The instance of the Player class being updated.</param>
        </member>
        <member name="M:AVS.Patches.PlayerPatcher.UpdateIsUnderwaterPrefix(Player)">
            <summary>
            Intercepts the Player.UpdateIsUnderwater method to determine if the player is underwater.
            If the player is inside a submarine, they are considered not underwater, ensuring appropriate state updates.
            </summary>
            <param name="__instance">The Player instance being checked for underwater status.</param>
            <returns>
            Returns `false` to bypass the original UpdateIsUnderwater method logic
            when the player is inside a submarine, or `true` to allow normal execution.
            </returns>
        </member>
        <member name="M:AVS.Patches.PlayerPatcher.UpdateMotorModePrefix(Player)">
            <summary>
            Adjusts the motor mode of the player before the UpdateMotorMode method is executed. This ensures that the player is in walking mode
            if they are in a vehicle derived from the Submarine class but are not actively piloting it.
            </summary>
            <param name="__instance">The instance of the Player class undergoing motor mode updates.</param>
            <returns>
            A boolean value indicating whether the original method should execute. Returns false to prevent execution if the motor mode
            is explicitly set to walking during the prefix.
            </returns>
        </member>
        <member name="M:AVS.Patches.PlayerPatcher.CanBreathePostfix(Player,System.Boolean@)">
            <summary>
            Adjusts the player's ability to breathe based on whether they are currently mounted
            inside a powered and boarded AVS submarine.
            </summary>
            <param name="__instance">The instance of the Player class being evaluated for breathing capability.</param>
            <param name="__result">A reference to the original result indicating whether the player can breathe.</param>
        </member>
        <member name="M:AVS.Patches.PlayerPatcher.UpdatePositionPrefix(Player)">
            <summary>
            Intercepts and evaluates the player's position update logic before it executes. This ensures
            consistency when the player is piloting a vehicle, handles anomalies in vehicle parenting,
            and skips updates during freecam or ghost mode.
            </summary>
            <param name="__instance">The instance of the Player class updating its position.</param>
            <returns>
            Returns true to allow the original UpdatePosition logic to execute, or false to skip execution
            if abnormalities are detected.
            </returns>
        </member>
        <member name="M:AVS.Patches.PlayerPatcher.PlayerExitLockedModePrefix(Player)">
            <summary>
            Intercepts the logic for the Player's ExitLockedMode method to determine if the default behavior
            should be executed or replaced with customized behavior for exiting vehicles in the AVS system.
            </summary>
            <param name="__instance">The instance of the Player class attempting to exit locked mode.</param>
            <returns>
            Returns false if the player is in an AVS vehicle and the customized behavior for exiting a vehicle
            is applied. Returns true to allow the default ExitLockedMode logic to proceed.
            </returns>
        </member>
        <member name="M:AVS.Patches.PlayerPatcher.PlayerOnKillPostfix(Player)">
            <summary>
            Executes logic following the player's death. If the player is inside an AVS vehicle,
            performs specific operations to ensure the player is safely exited from the vehicle.
            </summary>
            <param name="__instance">The instance of the Player class that has been killed.</param>
        </member>
        <member name="T:AVS.Patches.PowerRelayPatcher">
            <summary>
            The PowerRelayPatcher class provides Harmony patches to modify the behavior of the PowerRelay
            component within the AVS game context. These patches ensure that certain functionalities
            of the PowerRelay operate correctly when interacting with the AvsVehicle class, particularly
            in submarines and other vehicles where a null SubRoot.powerRelay could cause issues.
            </summary>
            <remarks>
            This class addresses issues such as missing power relays in vehicles, voice notification errors,
            handling game object interactions, and energy interface integration. It disables certain default
            behaviors of the PowerRelay and implements replacements compatible with AvsVehicle.
            </remarks>
            <example>
            This class is automatically applied through Harmony at runtime to patch the necessary methods
            in the PowerRelay component.
            Patched methods:
            - <c>PowerRelay.Start</c>: Prevents PowerRelay's default Start logic if it is part of AvsVehicle.
            - <c>PowerRelay.GetPower</c>: Overrides default power retrieval logic using the energy system of AvsVehicle.
            - <c>PowerRelay.GetMaxPower</c>: Calculates the maximum power based on the energy sources of AvsVehicle.
            </example>
        </member>
        <member name="M:AVS.Patches.PowerRelayPatcher.StartPrefix(PowerRelay)">
            <summary>
            Prevents the default behavior of the PowerRelay's Start method from executing,
            allowing custom functionality for vehicles implementing the AvsVehicle component.
            </summary>
            <param name="__instance">The instance of the PowerRelay on which the method is invoked.</param>
            <returns>
            Returns false if the associated PowerRelay belongs to an AvsVehicle, overriding the default Start behavior.
            Returns true to allow the default Start method behavior for other cases.
            </returns>
        </member>
        <member name="M:AVS.Patches.PowerRelayPatcher.GetPowerPrefix(PowerRelay,System.Single@)">
            <summary>
            Intercepts the default behavior of the PowerRelay's GetPower method, allowing for custom power handling
            when the PowerRelay belongs to an AvsVehicle.
            </summary>
            <param name="__instance">The instance of the PowerRelay on which the method is invoked.</param>
            <param name="__result">The power value to be returned by the GetPower method, modified if the PowerRelay is associated with an AvsVehicle.</param>
            <returns>
            Returns false to override the default GetPower behavior when the PowerRelay is associated with an AvsVehicle,
            substituting custom logic for power handling. Returns true to allow the default behavior in other cases.
            </returns>
        </member>
        <member name="M:AVS.Patches.PowerRelayPatcher.GetMaxPowerPrefix(PowerRelay,System.Single@)">
            <summary>
            Overrides the default behavior of the PowerRelay's GetMaxPower method to calculate the total energy capacity
            for vehicles implementing the AvsVehicle component.
            </summary>
            <param name="__instance">The instance of the PowerRelay on which the method is invoked.</param>
            <param name="__result">The resulting value for the maximum power, calculated based on energy sources when applicable.</param>
            <returns>
            Returns false if the associated PowerRelay belongs to an AvsVehicle and successfully calculates the total capacity.
            Returns true to allow the default GetMaxPower behavior for other cases.
            </returns>
        </member>
        <member name="M:AVS.Patches.PowerRelayPatcher.ModifyPowerPrefix(PowerRelay,System.Single,System.Single@,System.Boolean@)">
            <summary>
            Overrides PowerRelay.ModifyPower to route energy transactions through the AvsVehicle energy interface.
            </summary>
            <param name="__instance">PowerRelay instance executing the call.</param>
            <param name="amount">
            The energy delta to apply. Negative values consume energy; positive values add energy.
            </param>
            <param name="modified">
            Out parameter set to the applied amount when handled by AVS, or 0 if not applied.
            </param>
            <param name="__result">
            Set to true if the operation was successful (or not required by game mode),
            false if the request could not be fulfilled (insufficient capacity or power).
            </param>
            <returns>
            False when the AvsVehicle path handles the modification (suppressing original method),
            true to allow the original game logic when the relay is not part of an AvsVehicle.
            </returns>
            <remarks>
            - Honors GameModeUtils.RequiresPower().
            - Validates both available power (for consumption) and remaining capacity (for charging).
            - Logs errors if the energy interface is unavailable.
            </remarks>
        </member>
        <member name="T:AVS.Patches.PowerSystemPatcher">
            <summary>
            The PowerSystemPatcher class provides Harmony patches to modify the behavior of the power system,
            ensuring compatibility with the energy interface of vehicles within the AVS game context.
            </summary>
            <remarks>
            This class primarily addresses issues with energy consumption and power relay systems, such as
            allowing chargers to function correctly within AVS vehicles that have unique power setups. It
            ensures that the power consumption mechanisms work seamlessly by interacting with the
            energy interface in vehicles. Additionally, it includes a transpiler for updating the behavior
            of the Charger component to handle energy consumption in an expected manner.
            </remarks>
        </member>
        <member name="M:AVS.Patches.PowerSystemPatcher.PatchedEnergyProcess(PowerRelay,System.Single,System.Single@)">
            <summary>
            Consumes energy only if the vehicle attached to the PowerRelay GameObject is an AvsVehicle.
            Otherwise, does nothing.
            </summary>
            <param name="mvpr">The PowerRelay instance invoking the method.</param>
            <param name="amount">The amount of energy requested for consumption.</param>
            <param name="amountConsumed">A reference parameter that tracks the total amount of energy consumed, updated based on vehicle-specific logic.</param>
        </member>
        <member name="M:AVS.Patches.PowerSystemPatcher.Transpiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction})">
            <summary>
            Finds any call with "ConsumeEnergy" in the name, which can either the native call or the replacement
            emitted by VehicleFramework.
            Then inserts a new block just behind it that re-pushes the parameters onto the stack,
            then calls <see cref="M:AVS.Patches.PowerSystemPatcher.PatchedEnergyProcess(PowerRelay,System.Single,System.Single@)"/> with a ref amountConsumed instead of an out value.
            Unlike the VF consumption method, <see cref="M:AVS.Patches.PowerSystemPatcher.PatchedEnergyProcess(PowerRelay,System.Single,System.Single@)"/> does nothing if it does not
            detect an AVS vehicle. If another AVS instance comes along, both will append in arbitrary order but should
            produce the desired net result.
            </summary>
            <param name="instructions">The original sequence of IL instructions from the Charger.Update method.</param>
            <returns>
            Returns a modified IEnumerable of CodeInstruction objects, where specific method calls are replaced,
            allowing customized processing in scenarios involving the AvsVehicle energy interface.
            </returns>
        </member>
        <member name="T:AVS.Patches.PrecursorDoorMotorModeSetterPatcher">
            <summary>
            A Harmony patching class for modifying the behavior of the
            <see cref="T:PrecursorDoorMotorModeSetter"/> when a trigger event occurs.
            </summary>
            <remarks>
            This patch checks if the entering object is a suitable <see cref="T:AVS.BaseVehicle.AvsVehicle"/> instance
            and adjusts its "precursor out-of-water" state based on the motor mode
            defined by the <see cref="T:PrecursorDoorMotorModeSetter"/> instance.
            </remarks>
            <seealso cref="T:PrecursorDoorMotorModeSetter"/>
            <seealso cref="T:AVS.BaseVehicle.AvsVehicle"/>
        </member>
        <member name="M:AVS.Patches.PrecursorDoorMotorModeSetterPatcher.PrecursorDoorMotorModeSetterOnTriggerEnterHarmonyPostfix(PrecursorDoorMotorModeSetter,UnityEngine.Collider)">
            <summary>
            Postfix patch for the OnTriggerEnter method of the PrecursorDoorMotorModeSetter class.
            Adjusts the behavior of the triggered event to interact with AVS vehicles.
            </summary>
            <param name="__instance">The instance of the PrecursorDoorMotorModeSetter class.</param>
            <param name="col">The collider that triggered the event.</param>
        </member>
        <member name="T:AVS.Patches.SaveLoadManagerPatcher">
            <summary>
            Patcher to load the ping tech types from a save file.
            </summary>
        </member>
        <member name="M:AVS.Patches.SaveLoadManagerPatcher.SaveLoadManagerRegisterSaveGamePostfix(System.String)">
            <summary>
            This patch collects hasTechTypeGameInfo, in order to have save file sprites displayed on the save cards
            Postfix method for the SaveLoadManager.RegisterSaveGame method, enabling the collection and management
            of custom save file sprites associated with save slots.
            </summary>
            <param name="slotName">The name of the save slot being registered.</param>
        </member>
        <member name="T:AVS.Patches.SDFCutoutPatcher">
            <summary>
            A patching class for the SDFCutout component, providing functionality
            to suppress the execution of the Start method when a cutout instance has been initialized externally.
            Uses Harmony to intercept the Start method of SDFCutout.
            </summary>
        </member>
        <member name="M:AVS.Patches.SDFCutoutPatcher.SuppressStartOf(SDFCutout)">
            <summary>
            Notifies that the Start() method should not be called on this cutout instance (because it has been
            initialized externally)
            </summary>
            <param name="cutout">Cutout to suppress Start() of</param>
        </member>
        <member name="M:AVS.Patches.SDFCutoutPatcher.StartPatch(SDFCutout)">
            <summary>
            A Harmony prefix patch for the Start method of the SDFCutout class.
            Controls whether the Start method should execute, based on whether the cutout instance
            has been marked to suppress its Start execution.
            </summary>
            <param name="__instance">The instance of the SDFCutout whose Start method is being intercepted.</param>
            <returns>
            Returns false if the Start method should be skipped because the instance is suppressed.
            Returns true if the Start method should execute normally.
            </returns>
        </member>
        <member name="T:AVS.Patches.SpawnConsoleCommandPatcher">
            <summary>
            SpawnConsoleCommandPatcher is used to enhance the functionality of the existing spawn console command
            by ensuring compatibility with the AvsVehicle class objects. This patch enables vehicles to spawn properly
            and ensures related tasks such as construction are handled correctly.
            </summary>
        </member>
        <member name="M:AVS.Patches.SpawnConsoleCommandPatcher.OnConsoleCommand_spawnPostfix(SpawnConsoleCommand,NotificationCenter.Notification)">
            <summary>
            Harmony postfix for the SpawnConsoleCommand.OnConsoleCommand_spawn method.
            Enhances the spawn functionality to ensure compatibility with AvsVehicle objects.
            This method checks if the specified TechType corresponds to a vehicle and initiates
            a coroutine to handle its spawning and related tasks.
            </summary>
            <param name="__instance">The instance of the SpawnConsoleCommand executing the method.</param>
            <param name="n">Notification object containing data about the console command input.</param>
        </member>
        <member name="T:AVS.Patches.SubNamePatcher">
            <summary>
            Provides patching functionality for the SubName class by modifying its behavior when setting names
            and colors, enabling integration with AVS vehicles.
            </summary>
            <remarks>
            This class uses the Harmony library to apply postfix patches to the SubName class methods,
            allowing custom operations to update AVS vehicles associated with the SubName component.
            </remarks>
        </member>
        <member name="M:AVS.Patches.SubNamePatcher.SubNameSetNamePostfix(SubName)">
            <summary>
            A postfix method applied to the "SetName" method of the SubName class.
            This method ensures proper configuration of SubName decals and name painting
            for vehicles, specifically for submarines.
            </summary>
            <param name="__instance">The instance of the SubName class on which the original SetName method was called.</param>
        </member>
        <member name="M:AVS.Patches.SubNamePatcher.SubNameSetColorPostfix(SubName,System.Int32,UnityEngine.Vector3,UnityEngine.Color)">
            <summary>
            A postfix method applied to the "SetColor" method of the SubName class.
            This method ensures that the appropriate colors are applied to the components of the associated vehicle, taking into account the index specified.
            Properly handles base colors, decals, interior colors, and stripe colors for vehicles, while also logging warnings for any unrecognized indices.
            </summary>
            <param name="__instance">The instance of the SubName class whose SetColor method is being modified.</param>
            <param name="index">Specifies which vehicle component should have its color set (e.g., base color, stripes, interior, or decals).</param>
            <param name="hsb">The HSB (hue, saturation, brightness) values used to represent the desired color.</param>
            <param name="color">The RGB color to be applied to the specified component.</param>
        </member>
        <member name="T:AVS.Patches.SubRootPatcher">
            <summary>
            The SubRootPatcher class is a Harmony patching class for the SubRoot type.
            It provides prefixed methods that intercept specific methods in the SubRoot class to allow
            custom behavior prior to the execution of the original methods.
            </summary>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.UpdatePrefix(SubRoot)">
            <summary>
            Determines whether the update process for the specified SubRoot instance should proceed.
            </summary>
            <param name="__instance">The instance of the SubRoot being updated.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, preventing the update; otherwise, true to allow the update to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.GetLeakAmountPrefix(SubRoot,System.Single@)">
            <summary>
            Determines whether the leak amount calculation for the specified SubRoot instance should proceed.
            </summary>
            <param name="__instance">The instance of the SubRoot being evaluated.</param>
            <param name="__result">The resulting leak amount. If overridden, this value will be set to 0.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, halting the calculation; otherwise, true to allow the calculation to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.OnConsoleCommand_floodPrefix(SubRoot)">
            <summary>
            Determines whether the console command for flooding the specified SubRoot instance should proceed.
            </summary>
            <param name="__instance">The instance of the SubRoot being affected by the console command.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, preventing the command from taking effect; otherwise, true to allow the command to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.OnConsoleCommand_crushPrefix(SubRoot)">
            <summary>
            Determines whether the execution of the 'OnConsoleCommand_crush' method for the specified SubRoot instance should proceed.
            </summary>
            <param name="__instance">The instance of the SubRoot being evaluated.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, preventing the execution; otherwise, true to allow the execution to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.OnConsoleCommand_damagesubPrefix(SubRoot)">
            <summary>
            Intercepts the execution of the OnConsoleCommand_damagesub method for the specified SubRoot instance.
            </summary>
            <param name="__instance">The instance of the SubRoot on which the command is executed.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, preventing the damage command; otherwise, true to allow the command execution.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.GetOxygenManagerPrefix(SubRoot,OxygenManager@)">
            <summary>
            Determines if the SubRoot instance should provide an OxygenManager component.
            </summary>
            <param name="__instance">The instance of the SubRoot being queried for an OxygenManager component.</param>
            <param name="__result">The resulting OxygenManager component, or null if the component is not available.</param>
            <returns>Returns false if the SubRoot instance contains a component of type AvsVehicle, overriding the default behavior; otherwise, true.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.OnKillPrefix(SubRoot)">
            <summary>
            Determines whether the OnKill process for the specified SubRoot instance should execute.
            </summary>
            <param name="__instance">The instance of the SubRoot being evaluated.</param>
            <returns>Returns false if the SubRoot instance contains a component of type AvsVehicle, preventing the OnKill action; otherwise, true to allow the process to execute.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.GetModulesRootPrefix(SubRoot,UnityEngine.Transform@)">
            <summary>
            Determines whether the GetModulesRoot operation should proceed for the given SubRoot instance and sets the result accordingly.
            </summary>
            <param name="__instance">The instance of the SubRoot being evaluated.</param>
            <param name="__result">The resulting Transform reference for the modules root, or null if the operation is prevented.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, preventing the operation; otherwise, true to allow normal execution.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.GetWorldCenterOfMassPrefix(SubRoot,UnityEngine.Vector3@)">
            <summary>
            Determines whether the calculation of the world center of mass for the specified SubRoot instance should proceed.
            </summary>
            <param name="__instance">The instance of the SubRoot whose world center of mass is being queried.</param>
            <param name="__result">The resulting world center of mass value if the process is bypassed.</param>
            <returns>Returns false and sets the world center of mass to zero if the SubRoot instance contains a component of type AvsVehicle; otherwise, true to proceed with the calculation.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.OnCollisionEnterPrefix(SubRoot)">
            <summary>
            Determines whether the collision handling for the specified SubRoot instance should proceed.
            </summary>
            <param name="__instance">The instance of the SubRoot involved in the collision.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, preventing collision handling; otherwise, true to allow it to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.CrushDamageRandomPartPrefix(SubRoot)">
            <summary>
            Prevents the CrushDamageRandomPart functionality if the SubRoot instance has a component of type AvsVehicle.
            </summary>
            <param name="__instance">The SubRoot instance being evaluated.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, disabling crush damage. Otherwise, true to enable the crush damage functionality.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.UpdateDamageSettingsPrefix(SubRoot)">
            <summary>
            Intercepts the UpdateDamageSettings method for the specified SubRoot instance.
            </summary>
            <param name="__instance">The SubRoot instance whose damage settings are being updated.</param>
            <returns>Returns false if the SubRoot instance contains a component of type AvsVehicle, preventing the update; otherwise, returns true to allow the update to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.ForceLightingStatePrefix(SubRoot)">
            <summary>
            Handles the prefix for the ForceLightingState method on the SubRoot instance.
            </summary>
            <param name="__instance">The instance of the SubRoot on which lighting state is being forced.</param>
            <returns>Returns false if the SubRoot instance contains a component of type AvsVehicle, preventing execution of the original method; otherwise, true.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.UpdateLightingPrefix(SubRoot)">
            <summary>
            Determines whether the lighting update process for the specified SubRoot instance should proceed.
            </summary>
            <param name="__instance">The instance of the SubRoot being updated.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, preventing the lighting update; otherwise, true to allow the update to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.GetTemperaturePrefix(SubRoot)">
            <summary>
            Determines whether the GetTemperature process for the specified SubRoot instance should proceed.
            </summary>
            <param name="__instance">The instance of the SubRoot being evaluated.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, preventing temperature processing; otherwise, true to allow the process to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.UpdateThermalReactorChargePrefix(SubRoot)">
            <summary>
            Determines whether the UpdateThermalReactorCharge process for the specified SubRoot instance should proceed.
            </summary>
            <param name="__instance">The instance of the SubRoot for which the UpdateThermalReactorCharge is being processed.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, preventing the thermal reactor charge update; otherwise, true to allow the process to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.FixedUpdatePrefix(SubRoot)">
            <summary>
            Determines whether the FixedUpdate process for the specified SubRoot instance should proceed.
            </summary>
            <param name="__instance">The instance of the SubRoot being processed during FixedUpdate.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, preventing the FixedUpdate process; otherwise, true to allow the process to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.SetCyclopsUpgradesPrefix(SubRoot)">
            <summary>
            Determines whether the Cyclops upgrades process for the specified SubRoot instance should proceed.
            </summary>
            <param name="__instance">The instance of the SubRoot being modified for Cyclops upgrades.</param>
            <returns>Returns false if the SubRoot instance contains a component of type AvsVehicle, preventing the upgrades; otherwise, true to allow the upgrades to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.SetExtraDepthPrefix(SubRoot)">
            <summary>
            Determines whether the SubRoot instance is allowed to proceed with the SetExtraDepth process.
            </summary>
            <param name="__instance">The instance of the SubRoot being checked.</param>
            <returns>Returns false if the SubRoot instance contains an AvsVehicle component, halting the process; otherwise, true to allow the process to continue.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.UpdatePowerRatingPrefix(SubRoot)">
            <summary>
            Determines whether the power rating update process for the specified SubRoot instance should proceed.
            </summary>
            <param name="__instance">The instance of the SubRoot being updated.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, preventing the update; otherwise, true to allow the update to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.GetPowerRatingPrefix(SubRoot,System.Single@)">
            <summary>
            Determines the power rating of the specified SubRoot instance.
            </summary>
            <param name="__instance">The instance of the SubRoot being evaluated.</param>
            <param name="__result">The resulting power rating of the SubRoot instance. Defaults to 1 if overridden.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, providing a fixed power rating; otherwise, true to proceed with the default evaluation.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.OnSubModulesChangedPrefix(SubRoot)">
            <summary>
            Determines whether the module change process for the specified SubRoot instance should proceed.
            </summary>
            <param name="__instance">The instance of the SubRoot experiencing module changes.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, preventing further module changes; otherwise, true to allow the process to continue.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.UpdateSubModulesPrefix(SubRoot)">
            <summary>
            Determines whether the update process for the submodules of the specified SubRoot instance should proceed.
            </summary>
            <param name="__instance">The instance of the SubRoot being processed.</param>
            <returns>Returns false if the SubRoot instance contains a component of type AvsVehicle, preventing the submodules update; otherwise, true to allow the update to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.OnPlayerEnteredPrefix(SubRoot)">
            <summary>
            Determines whether the OnPlayerEntered process for the specified SubRoot instance should proceed.
            </summary>
            <param name="__instance">The instance of the SubRoot being processed when a player enters.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, preventing further processing; otherwise, true to allow the process to continue.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.OnPlayerExitedPrefix(SubRoot)">
            <summary>
            Determines whether the OnPlayerExited process for the specified SubRoot instance should proceed.
            </summary>
            <param name="__instance">The instance of the SubRoot being acted on during the OnPlayerExited process.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, preventing further processing; otherwise, true to allow the process to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.GetSubNamePrefix(SubRoot,System.String@)">
            <summary>
            Determines the appropriate name prefix for the specified SubRoot instance.
            </summary>
            <param name="__instance">The instance of the SubRoot whose name prefix is being determined.</param>
            <param name="__result">The resulting name prefix for the SubRoot instance.</param>
            <returns>Returns false if the SubRoot instance contains a component of type AvsVehicle, setting the name prefix to "AvsVehicle" and preventing further name resolution; otherwise, true to allow normal name resolution.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.OnProtoSerializerefix(SubRoot)">
            <summary>
            Handles the serialization process for the specified SubRoot instance.
            </summary>
            <param name="__instance">The instance of the SubRoot being serialized.</param>
            <returns>Returns false if the SubRoot instance contains a component of type AvsVehicle, preventing serialization; otherwise, true to allow serialization to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.OnProtoDeserializePrefix(SubRoot)">
            <summary>
            Determines whether the deserialization process for the specified SubRoot instance should proceed.
            </summary>
            <param name="__instance">The instance of the SubRoot undergoing the deserialization process.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, preventing deserialization; otherwise, true to allow deserialization to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.StartSubShieldedPrefix(SubRoot)">
            <summary>
            Determines whether the shield activation process for the specified SubRoot instance should proceed.
            </summary>
            <param name="__instance">The instance of the SubRoot being shielded.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, preventing the shield activation; otherwise, true to allow the activation to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.EndSubShieldedPrefix(SubRoot)">
            <summary>
            Determines whether the EndSubShielded process for the specified SubRoot instance should proceed.
            </summary>
            <param name="__instance">The instance of the SubRoot being processed.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, preventing the process; otherwise, true to allow the process to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.PowerDownCyclopsPrefix(SubRoot)">
            <summary>
            Determines whether the Cyclops power-down process should proceed for the specified SubRoot instance.
            </summary>
            <param name="__instance">The instance of the SubRoot being checked for power-down compatibility.</param>
            <returns>Returns false to prevent the power-down process if the SubRoot instance has a component of type AvsVehicle; otherwise, true to allow the process to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.DestroyCyclopsSubRootPrefix(SubRoot)">
            <summary>
            Determines whether the destruction process of the Cyclops SubRoot should proceed.
            </summary>
            <param name="__instance">The instance of the SubRoot being evaluated for destruction.</param>
            <returns>Returns false if the SubRoot instance contains a component of type AvsVehicle, preventing destruction; otherwise, true to allow the destruction process to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.AwakePrefix(SubRoot)">
            <summary>
            Determines whether the Awake process for the specified SubRoot instance should proceed.
            </summary>
            <param name="__instance">The instance of the SubRoot being initialized.</param>
            <returns>Returns false if the SubRoot instance contains a component of type AvsVehicle, preventing the Awake process; otherwise, true to allow the process to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.StartPrefix(SubRoot)">
            <summary>
            Determines whether the Start process for the specified SubRoot instance should proceed.
            </summary>
            <param name="__instance">The instance of the SubRoot being initialized.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, preventing the Start process; otherwise, true to allow the Start process to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.OnTakeDamagePrefix(SubRoot)">
            <summary>
            Determines whether the damage response logic for the specified SubRoot instance should execute.
            </summary>
            <param name="__instance">The instance of the SubRoot receiving damage.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, preventing the damage logic from executing; otherwise, true to allow the damage response to proceed.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.IsLeakingPrefix(SubRoot,System.Boolean@)">
            <summary>
            Determines whether the specified SubRoot instance is leaking.
            </summary>
            <param name="__instance">The instance of the SubRoot to check for leaks.</param>
            <param name="__result">A reference to the result indicating if the SubRoot is leaking. Will be set to false if the SubRoot instance has a component of type AvsVehicle.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle, bypassing the leak check; otherwise, true to proceed with the default leak determination logic.</returns>
        </member>
        <member name="M:AVS.Patches.SubRootPatcher.IsUnderwaterPrefix(SubRoot,System.Boolean@)">
            <summary>
            Determines whether the specified SubRoot instance is underwater.
            </summary>
            <param name="__instance">The instance of the SubRoot being checked for underwater status.</param>
            <param name="__result">A reference to the boolean result indicating whether the SubRoot is underwater.</param>
            <returns>Returns false if the SubRoot instance has a component of type AvsVehicle and its underwater check is handled by that component; otherwise, true to proceed with the default check.</returns>
        </member>
        <member name="T:AVS.Patches.uGUI_EquipmentPatcher">
            <summary>
            A Harmony patching class designed to ensure proper integration of custom
            AvsVehicle upgrades into the base game's uGUI_Equipment system in Subnautica.
            This class modifies the equipment UI behavior to support custom upgrade slots
            and ensures that the PDA displays vehicle upgrades accurately.
            </summary>
        </member>
        <member name="M:AVS.Patches.uGUI_EquipmentPatcher.AwakePostfix(uGUI_Equipment,System.Collections.Generic.Dictionary{System.String,uGUI_EquipmentSlot}@)">
            <summary>
            A postfix method that modifies the behavior of the <c>uGUI_Equipment</c> class's Awake method to integrate
            custom vehicle upgrade slots into the default equipment system of Subnautica.
            Initializes the custom ModuleBuilder class, sets up all upgrade slots, and ensures proper integration into the UI.
            </summary>
            <param name="__instance">The instance of the <c>uGUI_Equipment</c> class being patched.</param>
            <param name="___allSlots">
            A reference to the dictionary containing all equipment slots managed by the <c>uGUI_Equipment</c> system.
            This parameter is used to integrate custom slots for vehicle upgrades.
            </param>
        </member>
        <member name="M:AVS.Patches.uGUI_EquipmentPatcher.OnDragHoverEnterPatch(System.Collections.Generic.Dictionary{System.String,uGUI_EquipmentSlot}@)">
            <summary>
            A prefix method that modifies the behavior of the <c>uGUI_Equipment</c> class's OnDragHoverEnter method to integrate
            custom vehicle upgrade slots into the base game's equipment slot system in Subnautica.
            Ensures accurate synchronization of the custom slots to allow proper drag-and-drop functionality during upgrades.
            </summary>
            <param name="___allSlots">
            A reference to the dictionary containing all equipment slots managed by the <c>uGUI_Equipment</c> system.
            This parameter is updated to include custom slots for vehicle upgrades, enabling seamless interaction and display.
            </param>
        </member>
        <member name="M:AVS.Patches.uGUI_EquipmentPatcher.OnDragHoverStayPatch(System.Collections.Generic.Dictionary{System.String,uGUI_EquipmentSlot}@)">
            <summary>
            A prefix method that modifies the behavior of the <c>uGUI_Equipment</c> class's <c>OnDragHoverStay</c> method
            to ensure custom vehicle upgrade slots are properly integrated into the equipment system in Subnautica.
            This method synchronizes the slot data between the default equipment system and the custom slot implementation
            managed by the <c>ModuleBuilder</c>.
            </summary>
            <param name="___allSlots">
            A reference to the dictionary that maintains all equipment slots managed by <c>uGUI_Equipment</c>.
            This parameter is updated to include custom vehicle upgrade slots defined in the <c>ModuleBuilder</c>.
            </param>
        </member>
        <member name="M:AVS.Patches.uGUI_EquipmentPatcher.OnDragHoverExitPatch(System.Collections.Generic.Dictionary{System.String,uGUI_EquipmentSlot}@)">
            <summary>
            A prefix method that patches the behavior of the <c>uGUI_Equipment</c> class's OnDragHoverExit method
            to ensure custom vehicle upgrade slots are merged and properly managed in the equipment system.
            Updates the <c>___allSlots</c> dictionary with the custom slots defined by the <c>ModuleBuilder</c>.
            </summary>
            <param name="___allSlots">
            A reference to the dictionary containing all equipment slots managed by the <c>uGUI_Equipment</c> system.
            This parameter is modified to include all custom vehicle slots from the <c>ModuleBuilder</c>.
            </param>
        </member>
        <member name="T:AVS.Patches.uGUI_PingsPatcher">
            <summary>
            A class designed to patch the behavior of the uGUI_Pings class through Harmony transpilers.
            It enables the customization and display of custom ping sprites for AvsVehicles within the game.
            </summary>
        </member>
        <member name="M:AVS.Patches.uGUI_PingsPatcher.uGUI_PingsOnAddTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction})">
            <summary>
            Transpiler method for patching the uGUI_Pings.OnAdd method to ensure custom ping sprites
            are used properly by the base-game systems, allowing for display of custom ping sprites on the HUD.
            </summary>
            <remarks>
            Looks for the SetIcon() method invocation in nGUI_Pings.OnAdd.
            Then adds a new invocation just after this call, that conditionally calls SetIcon() a second time if
            the PingType is of a registered AVS vehicle, otherwise does nothing. The architecture is designed as a
            daisy-chain approach where every other lib or AVS incarnation can do exactly the same, regardless of
            load-order and the final behavior will always produce the desired outcome. 
            </remarks>
            <param name="input">A collection of code instructions representing the original IL code of the method being patched.</param>
            <returns>
            A modified collection of code instructions with the required IL changes to implement the custom patch logic.
            </returns>
        </member>
        <member name="T:AVS.Patches.AvsUpgradesListener">
            <summary>
            Helper for enabling AVS upgrades on a Cyclops.
            </summary>
        </member>
        <member name="T:AVS.Patches.UpgradeConsolePatcher">
            <summary>
            Patcher for Cyclops Upgrade Console to ensure AVS upgrades work correctly.
            </summary>
        </member>
        <member name="M:AVS.Patches.UpgradeConsolePatcher.UpgradeConsoleAwakeHarmonyPostfix(UpgradeConsole)">
            <summary>
            Postfix method invoked after the `Awake` method of the UpgradeConsole has been executed.
            Ensures that the UpgradeConsole is properly configured to support AVS upgrades.
            </summary>
            <param name="__instance">The instance of the UpgradeConsole that has been initialized.</param>
        </member>
        <member name="M:AVS.Patches.UpgradeConsolePatcher.UpgradeConsoleInitializeModulesHarmonyPostfix(UpgradeConsole)">
            <summary>
            Postfix method invoked after the `InitializeModules` method of the UpgradeConsole has been executed.
            Ensures that the UpgradeConsole is properly configured to process modules and support AVS upgrades.
            </summary>
            <param name="__instance">The instance of the UpgradeConsole that has been initialized.</param>
        </member>
        <member name="M:AVS.Patches.UpgradeConsolePatcher.UpgradeConsoleOnProtoDeserializePrefix(UpgradeConsole)">
            <summary>
            Prefix method invoked before the `OnProtoDeserialize` method of the UpgradeConsole is executed.
            Ensures that the UpgradeConsole's state is correctly updated to support AVS upgrades during deserialization.
            </summary>
            <param name="__instance">The instance of the UpgradeConsole being deserialized.</param>
        </member>
        <member name="M:AVS.Patches.UpgradeConsolePatcher.UpgradeConsoleOnProtoDeserializeObjectTreePrefix(UpgradeConsole)">
            <summary>
            Prefix method invoked before the `OnProtoDeserializeObjectTree` method of the UpgradeConsole is executed.
            Ensures that the UpgradeConsole is correctly initialized to handle AVS upgrades by updating its signals.
            </summary>
            <param name="__instance">The instance of the UpgradeConsole that is being deserialized.</param>
        </member>
        <member name="M:AVS.Patches.UpgradeConsolePatcher.UpdateSignals(UpgradeConsole)">
            <summary>
            Updates signals for the UpgradeConsole to ensure compatibility with AVS upgrades.
            Configures the equipment module event listeners and processes all existing upgrades.
            </summary>
            <param name="console">The instance of the UpgradeConsole to update signals for.</param>
        </member>
        <member name="T:AVS.Patches.VehicleDockingBayPatch">
            <summary>
            Provides Harmony patches for the <c>VehicleDockingBay</c> class, modifying its behavior
            related to docking and undocking vehicles. These patches enhance or customize the functionality
            of docking bays for smaller vehicles while addressing compatibility and interaction concerns.
            The patches perform the following tasks:
            - Determine if a vehicle is dockable based on its type and size.
            - Animate the docking bay arms during docking operations.
            - Manage the status and positioning of docked vehicles.
            - Trigger alerts to notify vehicles when they have been docked.
            - Handle trigger interactions for detecting nearby or departing vehicles.
            - Update relevant docking bay states and perform cleanup upon destruction.
            Note: This implementation complements <c>DockedVehicleHandTargetPatcher</c>, which handles undocking processes.
            </summary>
        </member>
        <member name="M:AVS.Patches.VehicleDockingBayPatch.LateUpdatePostfix(VehicleDockingBay)">
            <summary>
            Modifies the behavior of the VehicleDockingBay's LateUpdate method to add animation functionality
            when an AvsVehicle is docked. If the currently docked vehicle is an instance of AvsVehicle,
            it triggers the moonpool arm animation logic within the docked vehicle.
            </summary>
            <param name="__instance">The instance of the VehicleDockingBay currently being updated.</param>
        </member>
        <member name="M:AVS.Patches.VehicleDockingBayPatch.DockVehiclePostfix(VehicleDockingBay,Vehicle,System.Boolean)">
            <summary>
            Extends the behavior of the VehicleDockingBay's DockVehicle method to handle additional logic
            specific to the docking of an AvsVehicle. This includes notifying the docked vehicle and
            managing docking animations or other related functionality.
            </summary>
            <param name="__instance">The instance of the VehicleDockingBay where the vehicle is docked.</param>
            <param name="vehicle">The vehicle being docked into the docking bay.</param>
            <param name="rebuildBase">A flag indicating whether the base should be rebuilt during the docking process.</param>
        </member>
        <member name="M:AVS.Patches.VehicleDockingBayPatch.SetVehicleDockedPostfix(VehicleDockingBay,Vehicle)">
            <summary>
            Enhances the operation of the VehicleDockingBay's SetVehicleDocked method to handle the docking
            of AvsVehicle instances by invoking necessary custom logic. This ensures that when a vehicle is
            docked, additional actions specific to AvsVehicle instances are triggered.
            </summary>
            <param name="__instance">The instance of the VehicleDockingBay where the vehicle is being docked.</param>
            <param name="vehicle">The vehicle being docked into the VehicleDockingBay.</param>
        </member>
        <member name="M:AVS.Patches.VehicleDockingBayPatch.OnTriggerEnterPrefix(VehicleDockingBay,UnityEngine.Collider)">
            <summary>
            Determines if a vehicle entering the trigger collider of the docking bay is dockable.
            Verifies the compatibility of the nearby game object with the docking bay mechanism
            and initiates docking procedures if applicable.
            </summary>
            <param name="__instance">The instance of the VehicleDockingBay being interacted with.</param>
            <param name="other">The collider of the object entering the docking bay's trigger area.</param>
            <returns>Returns true if the collider represents a dockable vehicle, otherwise false.</returns>
        </member>
        <member name="M:AVS.Patches.VehicleDockingBayPatch.UpdateDockedPositionPrefix(VehicleDockingBay,Vehicle,System.Single)">
            <summary>
            Adjusts the position and rotation of a docked AvsVehicle during the docking process.
            This prefix changes the default behavior of the UpdateDockedPosition method
            to handle specific cases for moonpool and cyclops docking, ensuring proper alignment
            and animation synchronization.
            </summary>
            <param name="__instance">The instance of the VehicleDockingBay being updated.</param>
            <param name="vehicle">The vehicle currently being docked, expected to be an AvsVehicle.</param>
            <param name="interpfraction">The interpolation fraction indicating the progress of the docking process.</param>
            <returns>Returns false to replace the original method's execution when the vehicle is an AvsVehicle,
            and true otherwise.</returns>
        </member>
        <member name="M:AVS.Patches.VehicleDockingBayPatch.LaunchbayAreaEnterPrefix(VehicleDockingBay,UnityEngine.GameObject)">
            <summary>
            Determines whether the object entering the launch bay area is dockable based on custom
            criteria. If the object is deemed dockable, it allows subsequent logic to proceed.
            </summary>
            <param name="__instance">The instance of the VehicleDockingBay encountering the entering object.</param>
            <param name="nearby">The GameObject that has entered the launch bay area trigger.</param>
            <returns>Returns true if the object is dockable, otherwise false to prevent further processing.</returns>
        </member>
        <member name="M:AVS.Patches.VehicleDockingBayPatch.LaunchbayAreaExitPrefix(VehicleDockingBay,UnityEngine.GameObject)">
            <summary>
            Determines if a nearby object is eligible to exit the launch bay area and prevents
            interaction with objects that do not meet the docking criteria.
            </summary>
            <param name="__instance">The instance of the VehicleDockingBay being evaluated.</param>
            <param name="nearby">The GameObject that is attempting to exit the launch bay area.</param>
            <returns>True if the nearby object is dockable, otherwise false to block the exit interaction.</returns>
        </member>
        <member name="M:AVS.Patches.VehicleDockingBayPatch.VehicleDockingBayStartPostfix(VehicleDockingBay)">
            <summary>
            Adds the instance of the VehicleDockingBay to the list of docking bays when the VehicleDockingBay starts.
            This enables tracking and management of all active docking bays for further operations or interactions.
            </summary>
            <param name="__instance">The VehicleDockingBay instance that is being initialized.</param>
        </member>
        <member name="M:AVS.Patches.VehicleDockingBayPatch.VehicleDockingBayOnDestroyPostfix(VehicleDockingBay)">
            <summary>
            Modifies the behavior of the VehicleDockingBay's OnDestroy method to ensure
            the docking bay is removed from the internal tracking list when it is destroyed.
            This prevents stale references to destroyed docking bay instances, maintaining
            the integrity of the docking bay management system.
            </summary>
            <param name="__instance">The instance of the VehicleDockingBay being destroyed.</param>
        </member>
        <member name="P:AVS.Patches.VehicleDockingBayPatch.DockingBays">
            <summary>
            A read-only list of all registered VehicleDockingBay instances.
            </summary>
            <remarks>
            The property provides access to the internal collection of docking bays managed by the patch.
            It enables iterating through or performing actions on all loaded VehicleDockingBay instances.
            </remarks>
        </member>
        <member name="T:AVS.Patches.VehicleDockingBayPatch2">
            <summary>
            Provides Harmony patches for the <c>VehicleDockingBay</c> class, focusing on enhancing docking behavior for vehicles,
            specifically addressing compatibility with <c>AvsVehicle</c>. These patches allow seamless docking of in-game vehicles
            with customized logic and ensure proper operation within docking bays. The key functionality includes:
            - Intercepting the method <c>VehicleDockingBay.LateUpdate</c> to modify docking behavior.
            - Enabling or restricting cinematic mode initiation during docking, based on the <c>AvsVehicle</c> type.
            - Maintaining compatibility with vanilla vehicle docking processes.
            - Safeguarding against improper cinematic triggers for non-standard vehicles.
            This implementation supplements base docking behavior and integrates with extended vehicle systems.
            </summary>
        </member>
        <member name="M:AVS.Patches.VehicleDockingBayPatch2.VehicleDockingBayLateUpdateTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction})">
            <summary>
            Transpiler method that modifies the IL code of the VehicleDockingBay's LateUpdate method.
            It alters the behavior of the StartCinematicMode call, adding a delegate to invoke custom logic
            for handling cinematic mode transitions in specific scenarios.
            </summary>
            <param name="instructions">The original collection of IL instructions from the LateUpdate method.</param>
            <returns>A modified collection of IL instructions that includes custom logic for cinematic mode handling.</returns>
        </member>
        <member name="T:AVS.Patches.VehiclePatcher">
            <summary>
            A class designed to patch and modify the behavior of the Vehicle class.
            The modifications primarily ensure that AvsVehicle instances behave appropriately
            within the context of the base Vehicle class functionality.
            </summary>
            <remarks>
            This class uses Harmony patches to inject custom behavior at runtime. Each patch ensures
            compatibility and extended functionality for AvsVehicle instances. Specific logic is implemented for
            lifecycle methods, energy management, storage handling, and other core vehicle operations.
            </remarks>
            <example>
            The VehiclePatcher class intercepts and adjusts specific methods of the Vehicle class to
            support specialized behavior for AvsVehicle instances, such as overriding initialization, storage
            interactions, and powering behavior.
            </example>
        </member>
        <member name="M:AVS.Patches.VehiclePatcher.OnHandHoverPrefix(Vehicle)">
            <summary>
            A Harmony prefix patch for the OnHandHover method in the Vehicle class.
            This prefix is intended to modify the behavior of AvsVehicle instances while maintaining the default logic for normal Vehicle instances.
            </summary>
            <param name="__instance">The Vehicle instance on which the method is being called. This can be cast to AvsVehicle if applicable.</param>
            <returns>
            A boolean indicating whether the original OnHandHover method in the Vehicle class should be executed.
            Return true to allow the original method to execute; return false to skip the original method logic.
            </returns>
        </member>
        <member name="M:AVS.Patches.VehiclePatcher.ApplyPhysicsMovePrefix(Vehicle,System.Boolean@,VehicleAccelerationModifier[]@)">
            <summary>
            A Harmony prefix patch for the ApplyPhysicsMove method in the Vehicle class.
            This prefix modifies the physics behavior for instances of the AvsVehicle class
            while retaining the default behavior for other Vehicle instances.
            </summary>
            <param name="__instance">The Vehicle instance on which the method is being called. This can be cast to AvsVehicle if applicable.</param>
            <param name="___wasAboveWater">A reference to a boolean indicating whether the vehicle was above water in the last frame.</param>
            <param name="___accelerationModifiers">A reference to an array of VehicleAccelerationModifier instances that influence the vehicle's acceleration behavior.</param>
            <returns>
            A boolean value indicating whether the original ApplyPhysicsMove method in the Vehicle class should be executed.
            Return true to allow the original method to execute; return false to skip the original method logic.
            </returns>
        </member>
        <member name="M:AVS.Patches.VehiclePatcher.LazyInitializePrefix(Vehicle,EnergyInterface@)">
            <summary>
            A Harmony prefix patch for the LazyInitialize method in the Vehicle class.
            This prefix is used to initialize the EnergyInterface for AvsVehicle instances while preserving the behavior for standard Vehicle instances.
            </summary>
            <param name="__instance">The Vehicle instance being initialized. This can be cast to AvsVehicle if applicable.</param>
            <param name="___energyInterface">A reference to the EnergyInterface field of the Vehicle instance to initialize or update.</param>
            <returns>
            A boolean indicating whether the original LazyInitialize method in the Vehicle class should execute.
            Return true to allow the original method to proceed; return false to skip the original method logic.
            </returns>
        </member>
        <member name="M:AVS.Patches.VehiclePatcher.GetAllStoragesPostfix(Vehicle,System.Collections.Generic.List{IItemsContainer}@)">
            <summary>
            A Harmony postfix patch for the GetAllStorages method in the Vehicle class.
            This method adds additional storage containers specific to AvsVehicle instances
            to the list of containers collected by the original Vehicle logic.
            </summary>
            <param name="__instance">The instance of the Vehicle class for which the GetAllStorages method is called. Can be cast to AvsVehicle if applicable.</param>
            <param name="containers">A reference to the list of IItemsContainer objects that the original method collects. Additional containers are appended to this list.</param>
        </member>
        <member name="M:AVS.Patches.VehiclePatcher.IsPoweredPostfix(Vehicle,EnergyInterface@,System.Boolean@)">
            <summary>
            A Harmony postfix patch for the IsPowered method in the Vehicle class.
            This postfix modifies the result of the IsPowered method for instances of AvsVehicle
            by taking into account the IsPoweredOn state of the AvsVehicle instance.
            </summary>
            <param name="__instance">The Vehicle instance on which the method is being called. This can be cast to AvsVehicle if applicable.</param>
            <param name="___energyInterface">The energy interface associated with the Vehicle, which reflects its energy behavior.</param>
            <param name="__result">A reference to the original method result. This value can be modified by the postfix.</param>
        </member>
        <member name="M:AVS.Patches.VehiclePatcher.Transpiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction})">
            <summary>
            A Harmony transpiler patch for the Update method in the Vehicle class.
            This transpiler ensures compatibility and introduces custom rotation control for AvsVehicle instances,
            maintaining integration with existing Vehicle logic.
            </summary>
            <param name="instructions">The original sequence of IL code instructions from the Update method.</param>
            <returns>
            A modified sequence of IL code instructions, with additional logic injected to handle AvsVehicle-specific rotation control.
            </returns>
        </member>
        <member name="M:AVS.Patches.VehiclePatcher.VehicleReAttachPrefix(Vehicle)">
            <summary>
            A Harmony prefix patch for the ReAttach method in the Vehicle class.
            This prefix ensures that the docking bay is notified properly when a Vehicle instance is re-attached.
            </summary>
            <param name="__instance">The Vehicle instance on which the ReAttach method is being invoked.</param>
            <returns>
            A boolean indicating whether the original ReAttach method in the Vehicle class should be executed.
            Return true to allow the original method to execute; return false to skip the original method logic.
            </returns>
        </member>
        <member name="M:AVS.Patches.VehiclePatcher.VehicleAwakeHarmonyPostfix(Vehicle)">
            <summary>
            A Harmony postfix patch for the Awake method in the Vehicle class.
            This patch registers the Vehicle instance with the GameObjectManager, enabling further management and tracking of the instance.
            </summary>
            <param name="__instance">The Vehicle instance that has completed its Awake initialization.</param>
        </member>
        <member name="T:AVS.Patches.VehiclePatcher2">
            <summary>
            A class that extends and customizes the behavior of the Vehicle class through Harmony patches.
            It primarily focuses on modifying energy management functionality to accommodate specific behaviors
            for AvsVehicle instances and ensure seamless integration with the base Vehicle class.
            </summary>
            <remarks>
            VehiclePatcher2 applies a transpiler to the Vehicle class's energy recharge logic, allowing for
            dynamic modifications that enhance compatibility with AvsVehicles. Additionally, it provides
            custom logic for retrieving appropriate PowerRelay objects associated with vehicles, depending
            on their specific type and hierarchy within the game world.
            </remarks>
        </member>
        <member name="M:AVS.Patches.VehiclePatcher2.Transpiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction})">
            <summary>
            Transpiler method for the Vehicle.UpdateEnergyRecharge method using Harmony.
            This method modifies the IL code of the original UpdateEnergyRecharge method to make
            the energy recharge logic more generic and optionally change component retrieval behavior,
            ensuring compatibility with AvsVehicles while docked.
            </summary>
            <param name="instructions">A collection of CodeInstruction objects representing the IL code of the Vehicle.UpdateEnergyRecharge method.</param>
            <returns>
            An IEnumerable of CodeInstruction objects representing the modified IL code to be executed in place of the original method.
            </returns>
        </member>
        <member name="T:AVS.Patches.VehicleUpgradeConsoleInputPatcher">
            <summary>
            Provides functionality to patch the behavior of the VehicleUpgradeConsoleInput
            in order to prevent drones from accessing upgrades, ensure proper display
            of upgrade module models, and utilize custom upgrade background images.
            </summary>
            <remarks>
            This patch is critical for maintaining appropriate behavior and providing
            essential developer utilities within the upgrade console system.
            </remarks>
        </member>
        <member name="M:AVS.Patches.VehicleUpgradeConsoleInputPatcher.UpdateVisualsPostfix(VehicleUpgradeConsoleInput)">
            <summary>
            Postfix method called when the UpdateVisuals method of VehicleUpgradeConsoleInput is invoked.
            Updates the slot visuals for the vehicle upgrade console by verifying the active equipment
            against available slots and activating or deactivating the corresponding models.
            </summary>
            <param name="__instance">The instance of VehicleUpgradeConsoleInput for which UpdateVisuals was called.</param>
        </member>
        <member name="M:AVS.Patches.VehicleUpgradeConsoleInputPatcher.VehicleUpgradeConsoleInputOnHandClickHarmonyPostfix(VehicleUpgradeConsoleInput)">
            <summary>
            Postfix method that triggers when the VehicleUpgradeConsoleInput's OnHandClick method is invoked.
            It identifies any active vehicles associated with the provided VehicleUpgradeConsoleInput instance
            and signals the opening of the module using ModuleBuilder.
            </summary>
            <param name="__instance">The instance of VehicleUpgradeConsoleInput that triggered the OnHandClick event.</param>
        </member>
        <member name="T:AVS.Patches.VFXConstructingPatch">
            <summary>
            Contains patch methods aimed at enhancing or modifying the behavior of the <see cref="T:VFXConstructing"/> class
            related to visual effects during the construction process.
            </summary>
            <remarks>
            This class uses Harmony to intercept and modify the functionality of methods in the <see cref="T:VFXConstructing"/> class.
            Its primary focus is on handling the application and customization of visual effects such as colors and materials
            during the vehicle construction process.
            </remarks>
        </member>
        <member name="M:AVS.Patches.VFXConstructingPatch.ManageColor(VFXConstructing,AVS.BaseVehicle.AvsVehicle)">
            <summary>
            Manages the visual effects (VFX) colors for a construction process, including ghost and wireframe colors.
            </summary>
            <remarks>This method updates the ghost material and wireframe colors of the provided <paramref
            name="vfx"/> instance based on the configuration settings in the <paramref name="av"/> instance. If the
            ghost or wireframe colors in the configuration are set to <see cref="P:UnityEngine.Color.black"/>, the corresponding
            visual effect will not be updated. The method waits until the ghost material of the <paramref name="vfx"/>
            instance is initialized before applying any updates.</remarks>
            <param name="vfx">The <see cref="T:VFXConstructing"/> instance representing the visual effects to be updated. Must not be null.</param>
            <param name="av">The <see cref="T:AVS.BaseVehicle.AvsVehicle"/> instance containing configuration settings for the construction process. Must
            not be null.</param>
            <returns>An enumerator that can be used to control the execution of the color management process.</returns>
        </member>
        <member name="M:AVS.Patches.VFXConstructingPatch.StartConstructionPostfix(VFXConstructing)">
            <summary>
            Modifies the construction process of a vehicle to account for custom build times and triggers related
            events.
            </summary>
            <remarks>This method adjusts the construction time based on the configuration of the
            associated <see cref="T:AVS.BaseVehicle.AvsVehicle"/> component, if present. It also broadcasts and sends messages to notify
            other components of the construction process and starts a coroutine to manage additional visual effects or
            behaviors.</remarks>
            <param name="__instance">The instance of <see cref="T:VFXConstructing"/> being patched, representing the vehicle under construction.</param>
        </member>
        <member name="T:AVS.Patches.WaterClipProxyPatcher">
            <summary>
            The WaterClipProxyPatcher class is designed to apply patches to the
            WaterClipProxy class, enabling improved handling for instances
            with negative scaling. This patch ensures the behavior of
            WaterClipProxy objects is more intuitive and consistent in such scenarios.
            </summary>
            <remarks>
            This patch introduces moderate value for specific use cases where
            negative scaling of WaterClipProxy objects might cause unintended
            or non-intuitive behavior, ensuring smoother and more predictable outcomes.
            </remarks>
        </member>
        <member name="T:AVS.RootModController">
            <summary>
            AVS root mod controller class. Must be inherited by the main mod class.
            </summary>
        </member>
        <member name="P:AVS.RootModController.Images">
            <summary>
            Loaded patcher images. Available after <see cref="M:AVS.RootModController.LoadImages"/> is called in <see cref="M:AVS.RootModController.Awake"/>.
            </summary>
        </member>
        <member name="P:AVS.RootModController.DepthModule1Icon">
            <summary>
            The icon for the Depth Module 1 upgrade.
            </summary>
        </member>
        <member name="P:AVS.RootModController.DepthModule2Icon">
            <summary>
            The icon for the Depth Module 2 upgrade.
            </summary>
        </member>
        <member name="P:AVS.RootModController.DepthModule3Icon">
            <summary>
            The icon for the Depth Module 3 upgrade.
            </summary>
        </member>
        <member name="P:AVS.RootModController.DepthModuleNodeIcon">
            <summary>
            The icon to use for the parent node of all depth modules in the crafting tree.
            </summary>
        </member>
        <member name="M:AVS.RootModController.LoadImages">
            <summary>
            Loads the images used by AVS.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AVS.RootModController.PluginId">
            <summary>
            Unique identifier for the plugin.
            </summary>
        </member>
        <member name="P:AVS.RootModController.ModName">
            <summary>
            Simple name of the plugin, used for logging and identification.
            Should be a short, human-readable name without spaces or special characters.
            Prefix used for registered identifiers so to not collide with other mods.
            </summary>
        </member>
        <member name="P:AVS.RootModController.LogVerbosity">
            <summary>
            Logging verbosity level for the mod.
            </summary>
        </member>
        <member name="M:AVS.RootModController.Awake">
            <summary>
            Begins plugin patching and initialization.
            Also initializes the logger. Before this method is called, the logger will not work.
            </summary>
        </member>
        <member name="M:AVS.RootModController.OnDestroy">
            <inheritdoc/>
        </member>
        <member name="M:AVS.RootModController.Start">
            <inheritdoc/>
        </member>
        <member name="M:AVS.RootModController.PrePatch">
            <summary>
             PrePatch is called before any patches are applied.
            </summary>
        </member>
        <member name="M:AVS.RootModController.Patch">
            <summary>
            Applies various patches and event registrations necessary for mod compatibility and game state management.
            </summary>
            <remarks>This method registers save data events, patches external mods for compatibility, and
            manages game state transitions. It uses the Harmony library to apply patches to methods in other mods,
            ensuring that they work correctly with this mod. Additionally, it sets up event handlers to manage game
            state changes during loading and unloading of scenes.</remarks>
        </member>
        <member name="M:AVS.RootModController.PostPatch">
            <summary>
            Executes post-patch operations for vehicle data management.
            </summary>
            <remarks>This method is intended to be called after patching operations to ensure that vehicle
            data is correctly updated. It may involve operations such as scattering data boxes for craftable
            items.</remarks>
        </member>
        <member name="M:AVS.RootModController.StartAvsCoroutine(System.String,System.Func{AVS.Log.SmartLog,System.Collections.IEnumerator})">
            <summary>
            Starts a new coroutine with enhanced error handling and logging.
            </summary>
            <param name="routine">The routine being executed</param>
            <param name="methodName">Name of the method or context for logging purposes.</param>
            <returns>The coroutine executing the enumerator</returns>
        </member>
        <member name="M:AVS.RootModController.StartModCoroutine(System.String,System.Func{AVS.Log.SmartLog,System.Collections.IEnumerator})">
            <summary>
            Starts a new coroutine with enhanced error handling and logging.
            </summary>
            <param name="routine">The routine being executed</param>
            <param name="methodName">Name of the method or context for logging purposes.</param>
            <returns>The coroutine executing the enumerator</returns>
        </member>
        <member name="T:AVS.SaveLoad.Data">
            <summary>
            Captures and restores data produced by an entity.
            </summary>
        </member>
        <member name="M:AVS.SaveLoad.Data.#ctor(System.String,AVS.SaveLoad.DataBlock[])">
            <summary>
            Creates a new file with the given name and blocks.
            </summary>
            <param name="name">File name for debugging and logging purposes.
            Not persisted to JSON.</param>
            <param name="blocks">File blocks, each containing a collection of properties.</param>
        </member>
        <member name="P:AVS.SaveLoad.Data.Name">
            <summary>
            File name for debugging and logging purposes.
            Not persisted to JSON.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.Data.Blocks">
            <summary>
            File blocks, each containing a collection of properties.
            </summary>
        </member>
        <member name="T:AVS.SaveLoad.DataBlock">
            <summary>
            Data associated with a specific save context (e.g. a vehicle type specific data).
            Each instance should be handled by one class only.
            </summary>
        </member>
        <member name="M:AVS.SaveLoad.DataBlock.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the collection of properties.
            </summary>
            <returns>An enumerator for the collection of properties.</returns>
        </member>
        <member name="M:AVS.SaveLoad.DataBlock.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates through a collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:AVS.SaveLoad.DataBlock.#ctor(System.String,AVS.SaveLoad.IPersistable[])">
            <summary>
            Creates a new file block with the given name and properties.
            </summary>
            <param name="name">File block name</param>
            <param name="properties">Contained properties</param>
        </member>
        <member name="M:AVS.SaveLoad.DataBlock.#ctor(System.String,System.Collections.Generic.IEnumerable{AVS.SaveLoad.IPersistable})">
            <summary>
            Creates a new file block with the given name and properties.
            </summary>
            <param name="name">File block name</param>
            <param name="properties">Contained properties</param>
        </member>
        <member name="M:AVS.SaveLoad.DataBlock.Add(AVS.SaveLoad.IPersistable)">
            <summary>
            Appends a new property to the block.
            </summary>
            <param name="property">New property</param>
        </member>
        <member name="P:AVS.SaveLoad.DataBlock.Name">
            <summary>
            File block name, used to identify the block in the JSON file.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.DataBlock.Properties">
            <summary>
            Gets the collection of properties associated with the current object.
            </summary>
        </member>
        <member name="T:AVS.SaveLoad.IPersistable">
            <summary>
            Data entry that can be persisted to a JSON file.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.IPersistable.Name">
            <summary>
            Name of the property as written to JSON.
            </summary>
        </member>
        <member name="M:AVS.SaveLoad.IPersistable.ExportValue">
            <summary>
            Exports the value of the property as a value that can be written to JSON.
            </summary>
            <returns>Value to be saved.</returns>
        </member>
        <member name="M:AVS.SaveLoad.IPersistable.RestoreValue(Newtonsoft.Json.Linq.JToken,AVS.Log.SmartLog)">
            <summary>
            Restores the value of the property.
            </summary>
            <param name="value">Value to restore.</param>
            <param name="writer">Log writer to use for logging.</param>
        </member>
        <member name="T:AVS.SaveLoad.Persistable">
            <summary>
            Helper class to create persistent properties.
            </summary>
        </member>
        <member name="M:AVS.SaveLoad.Persistable.Property``1(System.String,System.Func{``0},System.Action{``0})">
            <summary>
            Creates a persistent property with the given name, getter and setter.
            </summary>
            <typeparam name="T">Type preserved in JSON. Should be a simple type (bool, int, string, ...)</typeparam>
            <param name="name">Name of the property.</param>
            <param name="get">Function to get the value.</param>
            <param name="set">Action to set the value.</param>
            <returns>New persistent property.</returns>
        </member>
        <member name="T:AVS.SaveLoad.PersistentProperty`1">
            <summary>
            Property written to and restored from a JSON file.
            </summary>
            <typeparam name="T">Type preserved in JSON. Should be a simple type (bool, int, string, ...)
            </typeparam>
        </member>
        <member name="P:AVS.SaveLoad.PersistentProperty`1.Name">
            <summary>
            The name of the property as written to JSON.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.PersistentProperty`1.ExportValue">
            <summary>
            The function to export the value of the property.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.PersistentProperty`1.ApplyImportedValue">
            <summary>
            Gets the action that reapply the value to its owner.
            </summary>
        </member>
        <member name="T:AVS.SaveLoad.FilePath">
            <summary>
            Represents a file path and provides utility methods and properties to interact with the file system.
            </summary>
            <remarks>
            This struct encapsulates the functionality for working with file paths, including validation,
            determining the type of path (file or directory), and interacting with files such as reading
            or writing file content. It ensures that paths are handled consistently and safely.
            </remarks>
        </member>
        <member name="P:AVS.SaveLoad.FilePath.FullName">
            <summary>
            Full file path, including directory and file name.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.FilePath.Name">
            <summary>
            Gets the name of the file or directory without the parent directories, including the file extension if applicable.
            </summary>
        </member>
        <member name="M:AVS.SaveLoad.FilePath.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.SaveLoad.FilePath"/> class with the specified file path.
            </summary>
        </member>
        <member name="M:AVS.SaveLoad.FilePath.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.SaveLoad.FilePath"/> class by combining multiple parts into a single file path.
            </summary>
            <param name="parts"></param>
        </member>
        <member name="P:AVS.SaveLoad.FilePath.IsValid">
            <summary>
            Checks whether <see cref="P:AVS.SaveLoad.FilePath.FullName"/> is valid.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.FilePath.IsFile">
            <summary>
            Checks whether <see cref="P:AVS.SaveLoad.FilePath.FullName" /> points to a valid file.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.FilePath.IsDirectory">
            <summary>
            Checks whether <see cref="P:AVS.SaveLoad.FilePath.FullName" /> points to a valid directory.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.FilePath.FileSize">
            <summary>
            Gets the size of the file in bytes.
            </summary>
        </member>
        <member name="M:AVS.SaveLoad.FilePath.ReadAllText">
            <summary>
            Reads all text from the file specified by the current path.
            </summary>
            <remarks>This method reads the entire content of the file into memory. Ensure that the file
            size is manageable to avoid memory issues.</remarks>
            <returns>The entire content of the file as a string.</returns>
        </member>
        <member name="M:AVS.SaveLoad.FilePath.WriteAllText(System.String)">
            <summary>
            Writes the specified text to the file, overwriting any existing content.
            </summary>
            <remarks>This method writes the entire content to the file specified by the <see
            cref="P:AVS.SaveLoad.FilePath.FullName"/> property. If the file does not exist, it will be created. If the file already contains
            data, it will be replaced with the new content.</remarks>
            <param name="fileContent">The text to write to the file. Cannot be null.</param>
        </member>
        <member name="T:AVS.SaveLoad.SavedColor">
            <summary>
            Color representation used for saving and loading vehicle colors.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.SavedColor.HSB">
            <summary>
            Hue, Saturation, Brightness (HSB) representation of the color.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.SavedColor.RGB">
            <summary>
            RGB representation of the color in hex format (e.g., #FF5733).
            </summary>
        </member>
        <member name="M:AVS.SaveLoad.SavedColor.From(AVS.VehicleComponents.VehicleColor)">
            <summary>
            Resets the local color representation from the given color.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:AVS.SaveLoad.SavedColor.WriteTo(AVS.VehicleComponents.VehicleColor@)">
            <summary>
            Writes the current saved color data into the specified <see cref="T:AVS.VehicleComponents.VehicleColor"/> reference.
            </summary>
            <param name="color">The reference to the <see cref="T:AVS.VehicleComponents.VehicleColor"/> instance to update.</param>
        </member>
        <member name="M:AVS.SaveLoad.SavedColor.ToColor">
            <summary>
            Converts the local color representation to a <see cref="T:AVS.VehicleComponents.VehicleColor"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AVS.SaveLoad.SaveFiles">
            <summary>
            Files of one save slot.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.SaveFiles.Current">
            <summary>
            Accesses the current save slot files.
            </summary>
        </member>
        <member name="M:AVS.SaveLoad.SaveFiles.OfSlot(System.String)">
            <summary>
            Accesses the save files of a specific slot.
            </summary>
            <param name="slot">Slot to access</param>
        </member>
        <member name="P:AVS.SaveLoad.SaveFiles.Slot">
            <summary>
            Save game slot identifier.
            </summary>
        </member>
        <member name="M:AVS.SaveLoad.SaveFiles.WritePrefabReflected``1(PrefabIdentifier,System.String,``0,AVS.RootModController)">
            <summary>
            Writes data associated with a prefab identifier to a JSON file.
            </summary>
            <typeparam name="T">Type of the data to write</typeparam>
            <param name="prefabID">Prefab identifier to write to</param>
            <param name="prefix">File prefix</param>
            <param name="data">Data to write</param>
            <param name="rmc">Owning root mod controller</param>
        </member>
        <member name="M:AVS.SaveLoad.SaveFiles.WritePrefabData(PrefabIdentifier,System.String,AVS.SaveLoad.Data,AVS.RootModController)">
            <summary>
            Writes data associated with a prefab identifier to a JSON file.
            </summary>
            <param name="prefabID">Prefab identifier to write to</param>
            <param name="prefix">File prefix</param>
            <param name="data">Data to write</param>
            <param name="rmc">Owning root mod controller</param>
            <returns>True if the data was successfully written, false otherwise.</returns>
        </member>
        <member name="M:AVS.SaveLoad.SaveFiles.WriteReflected``1(System.String,``0,AVS.RootModController)">
            <summary>
            Serializes the specified data to JSON and writes it to a file.
            </summary>
            <remarks>If serialization fails, an error is logged using the provided <paramref
            name="rmc"/>, and the method returns <see langword="false"/>. If the file writing operation fails, the
            method also returns <see langword="false"/>.</remarks>
            <typeparam name="T">The type of the data to be serialized.</typeparam>
            <param name="innerName">Inner file name without folder or trailing extension</param>
            <param name="data">The object to serialize into JSON. Cannot be null.</param>
            <param name="rmc">Owning root mod controller</param>
            <returns><see langword="true"/> if the JSON data was successfully written to the file; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:AVS.SaveLoad.SaveFiles.ReadReflected``1(System.String,``0@,AVS.RootModController)">
            <summary>
            Reads JSON data from files and deserializes it into an object of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type to deserialize from JSON</typeparam>
            <param name="innerName">Inner file name without folder or trailing extension</param>
            <param name="data">Deserialized data. Null if loading has failed</param>
            <param name="rmc">Owning root mod controller</param>
            <returns>True if loading has succeeded and produced non-null data</returns>
        </member>
        <member name="M:AVS.SaveLoad.SaveFiles.ReadPrefabReflected``1(PrefabIdentifier,System.String,``0@,AVS.RootModController)">
            <summary>
            Deserializes JSON data for a specified prefab identifier.
            </summary>
            <typeparam name="T">Type to deserialize from JSON</typeparam>
            <param name="prefabID">The identifier of the prefab to read. Cannot be <see langword="null"/>.</param>
            <param name="prefix">A string prefix used to construct the JSON file name.</param>
            <param name="outData">Deserialized data</param>
            <param name="rmc">Owning root mod controller</param>
            <returns>True on success</returns>
        </member>
        <member name="M:AVS.SaveLoad.SaveFiles.ReadPrefabData(PrefabIdentifier,System.String,AVS.SaveLoad.Data,AVS.RootModController)">
            <summary>
            Reads and processes JSON data for a specified prefab identifier.
            </summary>
            <remarks>This method attempts to read JSON data associated with the given <paramref
            name="prefabID"/> and populate the provided <paramref name="data"/> object. If <paramref name="prefabID"/>
            is <see langword="null"/>, or if the JSON data cannot be read, an error is logged.</remarks>
            <param name="prefabID">The identifier of the prefab to read. Cannot be <see langword="null"/>.</param>
            <param name="prefix">A string prefix used to construct the JSON file name.</param>
            <param name="data">The data object to populate with the JSON content.</param>
            <param name="rmc">Owning root mod controller.</param>
        </member>
        <member name="M:AVS.SaveLoad.SaveFiles.WriteJson(System.String,System.String,AVS.RootModController)">
            <summary>
            Writes JSON data to files based on the provided filename.
            </summary>
            <param name="innerName">Inner file name without folder or trailing extension</param>
            <param name="json">Serialized JSON</param>
            <param name="rmc">Owning root mod controller</param>
            <returns>True if the file was successfully written</returns>
        </member>
        <member name="T:AVS.SaveLoad.SaveLoadUtils">
            <summary>
            Provides utility methods for saving and loading operations within the AVS.SaveLoad namespace.
            </summary>
        </member>
        <member name="T:AVS.SaveLoad.SubmarineSaveData">
            <summary>
            Save data for submarines.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.SubmarineSaveData.DefaultColorName">
            <summary>
            True if the default coloring should be used for the name display
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.SubmarineSaveData.CurrentHelmIndex">
            <summary>
            The seat currently used by the player to pilot this submarine.
            </summary>
        </member>
        <member name="T:AVS.SaveLoad.VehicleSaveData">
            <summary>
            Basic save data written for all vehicles
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.VehicleSaveData.IsControlling">
            <summary>
            The player is currently at the helm of this vehicle.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.VehicleSaveData.EnteredThroughHatch">
            <summary>
            The hatch through which the player entered this vehicle.
            -1 if the player is not inside this vehicle.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.VehicleSaveData.VehicleName">
            <summary>
            The given name of this vehicle.
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.VehicleSaveData.BaseColor">
            <summary>
            The set base color of this vehicle
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.VehicleSaveData.InteriorColor">
            <summary>
            The set interior color of this vehicle
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.VehicleSaveData.StripeColor">
            <summary>
            The set stripe color of this vehicle
            </summary>
        </member>
        <member name="P:AVS.SaveLoad.VehicleSaveData.NameColor">
            <summary>
            The set name color of this vehicle
            </summary>
        </member>
        <member name="T:AVS.StorageComponents.MobileWaterPark">
            <summary>
            Helper structure for fishtanks that work like an aquapark but can
            be mobile.
            </summary>
        </member>
        <member name="P:AVS.StorageComponents.MobileWaterPark.Container">
            <summary>
            Accessor for the storage container.
            Throws an exception if called before Awake() or OnCraftEnd() were called.
            </summary>
        </member>
        <member name="P:AVS.StorageComponents.MobileWaterPark.DisplayName">
            <summary>
            The display name of the storage container.
            Must be reapplied on vehicle awake or it will reset to the default value.
            </summary>
        </member>
        <member name="F:AVS.StorageComponents.MobileWaterPark.width">
            <summary>
            Storage container width.
            </summary>
        </member>
        <member name="F:AVS.StorageComponents.MobileWaterPark.height">
            <summary>
            Storage container height.
            </summary>
        </member>
        <member name="T:AVS.InnateStorageContainer">
            <summary>
            Innate storage container for vehicles.
            Component attached to gameobjects declared as innate storage containers in the vehicle's composition.
            </summary>
        </member>
        <member name="F:AVS.InnateStorageContainer.isAllowedToAdd">
            <summary>
            Custom delegate to check if an item is allowed to be added to the storage container.
            </summary>
        </member>
        <member name="F:AVS.InnateStorageContainer.isAllowedToRemove">
            <summary>
            Indicates whether the current entity is allowed to be removed.
            </summary>
        </member>
        <member name="P:AVS.InnateStorageContainer.Container">
            <summary>
            Accessor for the storage container.
            Throws an exception if called before Awake() or OnCraftEnd() were called.
            </summary>
        </member>
        <member name="M:AVS.InnateStorageContainer.Awake">
            <inheritdoc />
        </member>
        <member name="M:AVS.InnateStorageContainer.OnCraftEnd(TechType)">
            <summary>
            Called via reflection when the vehicle is crafted.
            </summary>
            <param name="techType"></param>
        </member>
        <member name="P:AVS.InnateStorageContainer.DisplayName">
            <summary>
            The display name of the storage container.
            Must be reapplied on vehicle awake or it will reset to the default value.
            </summary>
        </member>
        <member name="F:AVS.InnateStorageContainer.width">
            <summary>
            Storage container width.
            </summary>
        </member>
        <member name="F:AVS.InnateStorageContainer.height">
            <summary>
            Storage container height.
            </summary>
        </member>
        <member name="F:AVS.InnateStorageContainer.allowedTech">
            <summary>
            Tech that may be stored in this container.
            If empty, all tech is allowed.
            </summary>
        </member>
        <member name="T:AVS.UpgradeModules.AvsVehicleModule">
            <summary>
            Base class for all mod vehicle upgrades.
            Provides core properties and recipe handling.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleModule.Owner">
            <summary>
            Queries the owner of this upgrade.
            </summary>
        </member>
        <member name="M:AVS.UpgradeModules.AvsVehicleModule.GetModule(TechType)">
            <summary>
            Resolves the module for the given tech type.
            </summary>
            <remarks>
            Only resolves instances of type <see cref="T:AVS.UpgradeModules.AvsVehicleModule"/>
            that have been registered
            </remarks>
            <param name="tt">Tech type to lookup</param>
            <returns>Corresponding module or null</returns>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleModule.TechTypes">
            <summary>
            The registered tech types of this upgrade.
            Available once the upgrade has been registered.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleModule.LastRegisteredTechType">
            <summary>
            The last set sepcific tech type for this upgrade.
            Used to daisy chain unlock conditions.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleModule.Node">
            <summary>
            The node this upgrade has been registered to.
            Available once the upgrade has been registered.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleModule.IsVehicleSpecific">
            <summary>
            Gets a value indicating whether the item is specific to a vehicle.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleModule.ClassId">
            <summary>
            The unique class ID for this upgrade.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleModule.DisplayName">
            <summary>
            The display name for this upgrade.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleModule.Description">
            <summary>
            The description for this upgrade.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleModule.QuickSlotType">
            <summary>
            The quick slot type for this upgrade.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleModule.UnlockAtStart">
            <summary>
            If true, this upgrade is unlocked at the start of a new game.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleModule.Color">
            <summary>
            The color associated with this upgrade.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleModule.CraftingTime">
            <summary>
            The time required to craft this upgrade.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleModule.Icon">
            <summary>
            The icon for this upgrade.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleModule.UnlockWith">
            <summary>
            The TechType that this module unlocks together with.
            If this tech type is unlocked, this upgrade is also unlocked.
            </summary>
        </member>
        <member name="F:AVS.UpgradeModules.AvsVehicleModule.DefaultUnlockMessage">
            <summary>
            The default unlock message for this upgrade.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleModule.UnlockedMessage">
            <summary>
            The message shown when this upgrade is unlocked.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleModule.UnlockedSprite">
            <summary>
            The sprite shown when this upgrade is unlocked.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleModule.Recipe">
            <summary>
            The base recipe for this upgrade.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleModule.AutoDisplace">
            <summary>
            Module types that are automatically displaced when this upgrade is added to a vehicle.
            </summary>
        </member>
        <member name="M:AVS.UpgradeModules.AvsVehicleModule.OnAdded(AVS.UpgradeModules.AddActionParams)">
            <summary>
            Called when this upgrade is added to a vehicle.
            </summary>
            <param name="param">Parameters for the add action.</param>
        </member>
        <member name="M:AVS.UpgradeModules.AvsVehicleModule.OnRemoved(AVS.UpgradeModules.AddActionParams)">
            <summary>
            Called when this upgrade is removed from a vehicle.
            </summary>
            <param name="param">Parameters for the remove action.</param>
        </member>
        <member name="M:AVS.UpgradeModules.AvsVehicleModule.OnCyclops(AVS.UpgradeModules.AddActionParams)">
            <summary>
            Called when this upgrade is added to or removed from a Cyclops.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleModule.SimpleRecipeExtensions">
            <summary>
            Holds additional simple ingredients to extend the recipe.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AvsVehicleModule.UnlockTechType">
            <summary>
            The tech type this one effectively unlocks with.
            </summary>
        </member>
        <member name="M:AVS.UpgradeModules.AvsVehicleModule.GetRecipe(AVS.Crafting.VehicleType)">
            <summary>
            Gets the full recipe for this upgrade for a specific vehicle type.
            </summary>
            <param name="type">The vehicle type.</param>
            <returns>A list of ingredients for crafting.</returns>
        </member>
        <member name="M:AVS.UpgradeModules.AvsVehicleModule.ExtendRecipe(AVS.UpgradeModules.AvsVehicleModule)">
            <summary>
            Adds the given module as a single extension to the local recipe
            </summary>
            <param name="module">The module to add.</param>
        </member>
        <member name="M:AVS.UpgradeModules.AvsVehicleModule.ExtendRecipeSimple(AVS.Configuration.RecipeIngredient)">
            <summary>
            Adds a simple ingredient to the recipe extensions.
            </summary>
            <param name="ingredient">The ingredient to add.</param>
        </member>
        <member name="M:AVS.UpgradeModules.AvsVehicleModule.HasTechType(TechType)">
            <summary>
            Checks if this upgrade has the specified <see cref="T:TechType"/>.
            </summary>
            <param name="tt">The tech type to check.</param>
            <returns>True if the tech type is present; otherwise, false.</returns>
        </member>
        <member name="M:AVS.UpgradeModules.AvsVehicleModule.GetNumberInstalled(Vehicle)">
            <summary>
            Gets the number of this upgrade currently installed in the specified vehicle.
            </summary>
            <param name="vehicle">The vehicle to check.</param>
            <returns>The number of upgrades installed.</returns>
        </member>
        <member name="M:AVS.UpgradeModules.AvsVehicleModule.CanRemoveFrom(AVS.BaseVehicle.AvsVehicle,System.Nullable{AVS.Localization.MaybeTranslate}@)">
            <summary>
            Checks if this upgrade can be removed from the specified vehicle.
            </summary>
            <param name="vehicle">Vehicle that this upgrade is being removed from</param>
            <param name="errorMessage">An error message to show via the PDA message system if this method returns false.</param>
            <returns></returns>
        </member>
        <member name="M:AVS.UpgradeModules.AvsVehicleModule.OnTechTypesAssigned(AVS.Crafting.UpgradeTechTypes)">
            <summary>
            Invoked when the <see cref="T:AVS.Crafting.UpgradeTechTypes"/> are assigned to the object.
            </summary>
            <remarks>This method provides a hook for derived classes to perform custom logic when tech
            types are assigned. The default implementation does nothing. Override this method in a derived class to
            handle the event.</remarks>
            <param name="techTypes">The <see cref="T:AVS.Crafting.UpgradeTechTypes"/> that have been assigned.</param>
        </member>
        <member name="T:AVS.UpgradeModules.Common.DepthModule1">
            <summary>
            Represents the first depth module upgrade for vehicles, enhancing their maximum depth capability.
            </summary>
            <remarks>This module can be crafted using specific ingredients and installed on compatible vehicles to
            increase their maximum operational depth.  It is part of the modular vehicle upgrade system and is categorized
            under the "Depth Modules" tab in the crafting interface.</remarks>
        </member>
        <member name="P:AVS.UpgradeModules.Common.DepthModule1.ClassId">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.Common.DepthModule1.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.Common.DepthModule1.Description">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.Common.DepthModule1.Recipe">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.Common.DepthModule1.Icon">
            <inheritdoc/>
        </member>
        <member name="M:AVS.UpgradeModules.Common.DepthModule1.OnAdded(AVS.UpgradeModules.AddActionParams)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.UpgradeModules.Common.DepthModule1.OnRemoved(AVS.UpgradeModules.AddActionParams)">
            <inheritdoc/>
        </member>
        <member name="T:AVS.UpgradeModules.Common.DepthModule2">
            <summary>
            Represents the second-tier depth module upgrade for vehicles, enhancing their maximum depth capacity.
            </summary>
            <remarks>This module is part of the vehicle upgrade system and provides an increased depth limit for
            supported vehicles. It can be crafted using specific materials and installed in the vehicle's upgrade
            console.</remarks>
        </member>
        <member name="P:AVS.UpgradeModules.Common.DepthModule2.ClassId">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.Common.DepthModule2.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.Common.DepthModule2.Description">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.Common.DepthModule2.Recipe">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.Common.DepthModule2.Icon">
            <inheritdoc/>
        </member>
        <member name="M:AVS.UpgradeModules.Common.DepthModule2.OnAdded(AVS.UpgradeModules.AddActionParams)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.UpgradeModules.Common.DepthModule2.OnRemoved(AVS.UpgradeModules.AddActionParams)">
            <inheritdoc/>
        </member>
        <member name="T:AVS.UpgradeModules.Common.DepthModule3">
            <summary>
            Level 3 depth module for vehicles, allowing deeper dives.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Common.DepthModule3.ClassId">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.Common.DepthModule3.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.Common.DepthModule3.Description">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.Common.DepthModule3.Recipe">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.Common.DepthModule3.Icon">
            <inheritdoc/>
        </member>
        <member name="M:AVS.UpgradeModules.Common.DepthModule3.OnAdded(AVS.UpgradeModules.AddActionParams)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.UpgradeModules.Common.DepthModule3.OnRemoved(AVS.UpgradeModules.AddActionParams)">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.Common.DepthModuleBase.AutoDisplace">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.Common.DepthModuleBase`1.Registered">
            <summary>
            Tech types of the derived depth module.
            </summary>
        </member>
        <member name="T:AVS.UpgradeModules.Node">
            <summary>
            Folder in the crafting tree.
            Can only contain either folders or upgrade modules, not both.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Node.Parent">
            <summary>
            The parent folder of this folder, if any.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Node.Identifier">
            <summary>
            The name of the folder, used for identification.
            Must not be empty, must not contain slashes, and must be unique within the parent folder.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Node.DisplayName">
            <summary>
            Gets the display name of the folder.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Node.Icon">
            <summary>
            Gets the icon associated with this folder.
            Should not be null but loading may have failed, so it is nullable.
            </summary>
        </member>
        <member name="M:AVS.UpgradeModules.Node.Create(System.String,System.String,UnityEngine.Sprite,AVS.UpgradeModules.Node)">
            <summary>
            Creates a new folder with the specified name, display name, and ideally icon, and adds it to the specified
            parent folder if provided.
            </summary>
            <remarks>If a folder with the same path already exists, the existing folder is returned
            instead of creating a new one.</remarks>
            <param name="name">The unique name of the folder to be created. This name is used as an identifier within the folder path.</param>
            <param name="displayName">The display name of the folder, which is shown in the user interface.</param>
            <param name="icon">An icon representing the folder. If not provided, the folder will have no icon.</param>
            <param name="parent">The parent folder to which the new folder will be added. If <see langword="null"/>, the folder is created at
            the root level.</param>
            <returns>The newly created <see cref="T:AVS.UpgradeModules.Node"/> instance.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the specified parent folder already contains modules, preventing the addition of a new folder.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the provided name is null, empty, or contains slashes.</exception>
        </member>
        <member name="M:AVS.UpgradeModules.Node.RegisterUpgrade(AVS.UpgradeModules.AvsVehicleModule,AVS.Crafting.UpgradeCompat)">
            <summary>
            Registers an upgrade to the local node node with the given compatibility settings.
            </summary>
            <param name="upgrade">The upgrade the register.</param>
            <param name="compat">The compatibility settings for the upgrade. Defaults to the standard compatibility if not specified.</param>
            <returns>The type of upgrade technology registered for the node.</returns>
        </member>
        <member name="M:AVS.UpgradeModules.Node.GetPath">
            <summary>
            Retrieves the name path of this folder in the crafting tree, starting from the root.
            </summary>
        </member>
        <member name="T:AVS.UpgradeModules.AddActionParams">
            <summary>
            Parameters passed to <see cref="M:AVS.UpgradeModules.AvsVehicleModule.OnAdded(AVS.UpgradeModules.AddActionParams)"/> and
            <see cref="M:AVS.UpgradeModules.AvsVehicleModule.OnRemoved(AVS.UpgradeModules.AddActionParams)"/>.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AddActionParams.Vehicle">
            <summary>
            The vehicle that a module was added to or removed from.
            Null if the module was added to or removed from a Cyclops.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AddActionParams.Cyclops">
            <summary>
            If the vehicle is a Cyclops, this is the Cyclops subroot.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AddActionParams.SlotID">
            <summary>
            The index of the slot in which the module was added or removed.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AddActionParams.TechType">
            <summary>
            Gets the tech type of the module that was added or removed.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.AddActionParams.Added">
            <summary>
            True if the module has just been added to the vehicle.
            False if it has just been removed from the vehicle.
            </summary>
        </member>
        <member name="T:AVS.UpgradeModules.Variations.ChargeableModule">
            <summary>
            An upgrade module that can be charged by holding the quickbar button.
            </summary>
        </member>
        <member name="T:AVS.UpgradeModules.Variations.ChargeableModule.Params">
            <summary>
            Parameters passed to <see cref="M:AVS.UpgradeModules.Variations.SelectableChargeableModule.OnActivate(AVS.UpgradeModules.Variations.SelectableChargeableModule.Params)"/>.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.ChargeableModule.Params.Vehicle">
            <summary>
            The vehicle that the upgrade is being used on.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.ChargeableModule.Params.SlotID">
            <summary>
            The index of the slot in the quickbar where the upgrade is selected.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.ChargeableModule.Params.TechType">
            <summary>
            The tech type of the upgrade being acted upon.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.ChargeableModule.Params.Charge">
            <summary>
            Total charge level reached (>0)
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.ChargeableModule.Params.ChargeFraction">
            <summary>
            Relative charge level (>0, 1 = fully charged, 0 = empty)
            </summary>
        </member>
        <member name="M:AVS.UpgradeModules.Variations.ChargeableModule.Params.#ctor(Vehicle,System.Int32,TechType,System.Single,System.Single)">
            <summary>
            Represents the parameters for a chargeable action that can be selected, associated with a specific vehicle
            and slot.
            </summary>
            <remarks>This constructor initializes the parameters required for a chargeable action,
            including the vehicle, slot, technology type, and charge details. Ensure that the provided values meet the
            specified constraints to avoid unexpected behavior.</remarks>
            <param name="vehicle">The vehicle associated with the chargeable action. Cannot be null.</param>
            <param name="slotID">The ID of the slot within the vehicle where the action is applied. Must be a non-negative integer.</param>
            <param name="techType">The type of technology associated with the chargeable action.</param>
            <param name="charge">Total charge level reached. Must be a non-negative value.</param>
            <param name="chargeFraction">The fraction of the total charge capacity to be applied. Must be a value between 0 and 1, inclusive.</param>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.ChargeableModule.QuickSlotType">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.ChargeableModule.ChargeLimit">
            <summary>
            Gets the maximum charge level that must be reached in order to activate.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.ChargeableModule.EnergyCostPerSecond">
            <summary>
            Gets the energy cost per second when the player holds the quick slot key to charge the upgrade.
            This value accumulates over time while the player holds the key until the maximum charge is reached.
            </summary>
        </member>
        <member name="M:AVS.UpgradeModules.Variations.ChargeableModule.OnActivate(AVS.UpgradeModules.Variations.ChargeableModule.Params)">
            <summary>
            Triggered when the charge limit was reached or the left mouse button was released.
            </summary>
            <param name="param">The current charge state.</param>
        </member>
        <member name="T:AVS.UpgradeModules.Variations.SelectableChargeableModule">
            <summary>
            An upgrade that can be selected in the quickbar and charged by holding the left mouse button.
            </summary>
        </member>
        <member name="T:AVS.UpgradeModules.Variations.SelectableChargeableModule.Params">
            <summary>
            Parameters passed to <see cref="M:AVS.UpgradeModules.Variations.SelectableChargeableModule.OnActivate(AVS.UpgradeModules.Variations.SelectableChargeableModule.Params)"/>.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.SelectableChargeableModule.Params.Vehicle">
            <summary>
            The vehicle that the upgrade is being used on.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.SelectableChargeableModule.Params.SlotID">
            <summary>
            The index of the slot in the quickbar where the upgrade is selected.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.SelectableChargeableModule.Params.TechType">
            <summary>
            The tech type of the upgrade being acted upon.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.SelectableChargeableModule.Params.Charge">
            <summary>
            Total charge level reached (>0)
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.SelectableChargeableModule.Params.ChargeFraction">
            <summary>
            Relative charge level (>0, 1 = fully charged, 0 = empty)
            </summary>
        </member>
        <member name="M:AVS.UpgradeModules.Variations.SelectableChargeableModule.Params.#ctor(Vehicle,System.Int32,TechType,System.Single,System.Single)">
            <summary>
            Represents the parameters for a chargeable action that can be selected, associated with a specific vehicle
            and slot.
            </summary>
            <remarks>This constructor initializes the parameters required for a chargeable action,
            including the vehicle, slot, technology type, and charge details. Ensure that the provided values meet the
            specified constraints to avoid unexpected behavior.</remarks>
            <param name="vehicle">The vehicle associated with the chargeable action. Cannot be null.</param>
            <param name="slotID">The ID of the slot within the vehicle where the action is applied. Must be a non-negative integer.</param>
            <param name="techType">The type of technology associated with the chargeable action.</param>
            <param name="charge">Total charge level reached. Must be a non-negative value.</param>
            <param name="chargeFraction">The fraction of the total charge capacity to be applied. Must be a value between 0 and 1, inclusive.</param>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.SelectableChargeableModule.QuickSlotType">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.SelectableChargeableModule.ChargeLimit">
            <summary>
            Gets the maximum charge level that must be reached in order to activate.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.SelectableChargeableModule.EnergyCostPerSecond">
            <summary>
            Gets the energy cost per second when the player holds the quick slot key to charge the upgrade.
            This value accumulates over time while the player holds the key until the maximum charge is reached.
            </summary>
        </member>
        <member name="M:AVS.UpgradeModules.Variations.SelectableChargeableModule.OnActivate(AVS.UpgradeModules.Variations.SelectableChargeableModule.Params)">
            <summary>
            Triggered when the charge limit was reached or the left mouse button was released.
            </summary>
            <param name="param">The current charge state.</param>
        </member>
        <member name="T:AVS.UpgradeModules.Variations.SelectableModule">
            <summary>
            Abstract base class for selectable vehicle upgrade modules.
            This modules can be selected in the quickbar and used by the player.
            </summary>
        </member>
        <member name="T:AVS.UpgradeModules.Variations.SelectableModule.Params">
            <summary>
            Parameters passed to <see cref="M:AVS.UpgradeModules.Variations.SelectableModule.OnSelected(AVS.UpgradeModules.Variations.SelectableModule.Params)"/>.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.SelectableModule.Params.Vehicle">
            <summary>
            The vehicle to which the upgrade belongs. May be null if <see cref="P:AVS.UpgradeModules.Variations.SelectableModule.Params.Cyclops"/> is not null.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.SelectableModule.Params.Cyclops">
            <summary>
            Reference to the owning Cyclops vehicle, if any. May be null.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.SelectableModule.Params.SlotID">
            <summary>
            The index of the slot in which the upgrade is located.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.SelectableModule.Params.TechType">
            <summary>
            The tech type of the upgrade being acted upon.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.SelectableModule.QuickSlotType">
            <inheritdoc/>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.SelectableModule.Cooldown">
            <summary>
            Time in seconds that the module remains unselectable after last selection
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.SelectableModule.EnergyCost">
            <summary>
            Energy cost per selection
            </summary>
        </member>
        <member name="M:AVS.UpgradeModules.Variations.SelectableModule.OnSelected(AVS.UpgradeModules.Variations.SelectableModule.Params)">
            <summary>
            Invoked if this module is selected
            </summary>
            <param name="param"></param>
        </member>
        <member name="T:AVS.UpgradeModules.Variations.IToggleState">
            <summary>
            Parameters for toggleable upgrade actions.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.IToggleState.Vehicle">
            <summary>
            The vehicle the action is being performed on.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.IToggleState.SlotID">
            <summary>
            The index of the slot in which the upgrade is located.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.IToggleState.IsActive">
            <summary>
            True if the upgrade is toggled on, false if off.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.IToggleState.EventTime">
            <summary>
            The current time in seconds since the upgrade was activated.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.IToggleState.LastRepeatTime">
            <summary>
            The last time (<see cref="P:AVS.UpgradeModules.Variations.IToggleState.EventTime"/>) in seconds the upgrade was repeated.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.IToggleState.RepeatIteration">
            <summary>
            The iteration number of this repition.
            -1 before the first call to <see cref="M:AVS.UpgradeModules.Variations.ToggleableModule.OnRepeat(AVS.UpgradeModules.Variations.IToggleState)"/>,
            0 during the first call, incremented by 1 for each subsequent call.
            </summary>
        </member>
        <member name="M:AVS.UpgradeModules.Variations.IToggleState.Deactivate">
            <summary>
            Deactivates the upgrade module.
            </summary>
        </member>
        <member name="T:AVS.UpgradeModules.Variations.ToggleableModule">
            <summary>
            Abstract base class for toggleable upgrade modules on AVS vehicles.
            A module of this type will consume <see cref="P:AVS.UpgradeModules.Variations.ToggleableModule.EnergyCostPerSecond"/> energy
            every second and call <see cref="M:AVS.UpgradeModules.Variations.ToggleableModule.OnRepeat(AVS.UpgradeModules.Variations.IToggleState)"/>
            while active.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.ToggleableModule.QuickSlotType">
            <inheritdoc />
        </member>
        <member name="P:AVS.UpgradeModules.Variations.ToggleableModule.RepeatDelay">
            <summary>
            Time in seconds between calls to <see cref="M:AVS.UpgradeModules.Variations.ToggleableModule.OnRepeat(AVS.UpgradeModules.Variations.IToggleState)"/>
            while the module is active.
            Should not be 0 or the module will repeat once per frame.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.ToggleableModule.DelayUntilFirstOnRepeat">
            <summary>
            The time in seconds before the first call to <see cref="M:AVS.UpgradeModules.Variations.ToggleableModule.OnRepeat(AVS.UpgradeModules.Variations.IToggleState)"/>
            after the module is activated.
            </summary>
        </member>
        <member name="P:AVS.UpgradeModules.Variations.ToggleableModule.EnergyCostPerSecond">
            <summary>
            The energy cost per second while the module is active.
            If the vehicle does not have enough energy, the module will auto-toggle off.
            </summary>
        </member>
        <member name="M:AVS.UpgradeModules.Variations.ToggleableModule.OnRepeat(AVS.UpgradeModules.Variations.IToggleState)">
            <summary>
            Executed once every <see cref="P:AVS.UpgradeModules.Variations.ToggleableModule.RepeatDelay"/> seconds while the module is active.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:AVS.UpgradeModules.Variations.ToggleableModule.OnToggle(AVS.UpgradeModules.Variations.IToggleState)">
            <summary>
            Executed when the module is toggled on or off, before waiting <see cref="P:AVS.UpgradeModules.Variations.ToggleableModule.DelayUntilFirstOnRepeat"/>.
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:AVS.UpgradeProxy">
            <summary>
            Manages the initialization and setup of upgrade slots for AVS vehicles.
            </summary>
            <remarks>The <see cref="T:AVS.UpgradeProxy"/> class is responsible for creating and managing upgrade slots
            and assigning them to specified proxy transforms. It initializes
            the slots during the <see cref="M:AVS.UpgradeProxy.Awake"/> method by starting a coroutine to ensure the Seamoth is ready and then
            setting up the upgrade slots.</remarks>
        </member>
        <member name="F:AVS.UpgradeProxy.proxies">
            <summary>
            Proxies for individual upgrade slots.
            Specifies where the upgrade modules will be instantiated.
            </summary>
        </member>
        <member name="F:AVS.UpgradeProxy.slots">
            <summary>
            Slot list passed on to the VehicleUpgradeConsoleInput.
            </summary>
        </member>
        <member name="M:AVS.UpgradeProxy.Awake">
            <inheritdoc />
        </member>
        <member name="M:AVS.UpgradeProxy.GetSeamothBitsASAP(AVS.Log.SmartLog)">
            <summary>
            Initializes and configures the upgrade slots as soon as possible.
            </summary>
            <remarks>This method ensures that the Seamoth is available and then sets up the upgrade slots
            by instantiating the necessary models. It clears any existing proxies and assigns new models to each slot
            based on the current configuration.</remarks>
            <returns>An enumerator that can be used to iterate through the coroutine execution process.</returns>
        </member>
        <member name="T:AVS.Util.InstanceContainer">
            <summary>
            Container for the result of <see cref="M:AVS.Util.AvsCraftData.InstantiateFromPrefabAsync(AVS.Log.SmartLog,TechType,AVS.Util.InstanceContainer,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:AVS.Util.InstanceContainer.Instance">
            <summary>
            Created instance or null if none could be created
            </summary>
        </member>
        <member name="M:AVS.Util.AvsCraftData.InstantiateFromPrefabAsync(AVS.Log.SmartLog,TechType,AVS.Util.InstanceContainer,System.Boolean)">
            <summary>
            Asynchronously instantiates a GameObject from a prefab based on a specified TechType.
            </summary>
            <param name="log">The logging instance used for logging messages during the instantiation process.</param>
            <param name="techType">The type of technology for which the prefab is being instantiated.</param>
            <param name="result">The result wrapper that will hold the instantiated GameObject.</param>
            <param name="ifNotFoundLeaveEmpty">Specifies what to do if the tech type could not be found.
            If true, <paramref name="result"/> will be left empty (null).
            If false, <paramref name="result"/> is filled with a new generic loot item that has the requested tech type attached
            but no other components.</param>
            <returns>An enumerator allowing for asynchronous operation during the prefab instantiation process.</returns>
        </member>
        <member name="T:AVS.Util.Character">
            <summary>
            Helper for the player character.
            </summary>
        </member>
        <member name="P:AVS.Util.Character.PDA">
            <summary>
            Gets the current PDA status
            </summary>
        </member>
        <member name="P:AVS.Util.Character.IsBuildMenuOpen">
            <summary>
            Checks if the build menu is currently open.
            </summary>
        </member>
        <member name="P:AVS.Util.Character.IsMainMenuOpen">
            <summary>
            Checks if the main menu is currently open.
            </summary>
        </member>
        <member name="P:AVS.Util.Character.IsAnyMenuOpen">
            <summary>
            Checks if any menu is currently open.
            </summary>
        </member>
        <member name="M:AVS.Util.Character.TeleportTo(UnityEngine.Vector3)">
            <summary>
            Teleports the player to a specified destination.
            </summary>
            <remarks>
            Takes the player's current vehicle into account, if any.
            </remarks>
            <param name="destination">Target location</param>
        </member>
        <member name="M:AVS.Util.Character.GrantInvincibility(AVS.RootModController,System.Single)">
            <summary>
            Grants the player invincibility for a specified duration.
            </summary>
            <param name="time">Time in seconds to become invincible</param>
            <param name="rmc">root mod controller instance to run the coroutine</param>
        </member>
        <member name="M:AVS.Util.Character.SitDown(AVS.RootModController)">
            <summary>
            Asynchronously animates the character to sit down in a chair.
            </summary>
        </member>
        <member name="M:AVS.Util.Character.SetArmsIKTargets(UnityEngine.Transform,UnityEngine.Transform,System.Single)">
            <summary>
            Sets the player inverse kinematics (IK) targets for the hands.
            </summary>
            <param name="leftHandTarget">Left hand target</param>
            <param name="rightHandTarget">Right hand target</param>
            <param name="ikArmToggleTime">Time to toggle IK arms</param>
        </member>
        <member name="M:AVS.Util.Character.StandUp(AVS.RootModController)">
            <summary>
            Makes the player stand up from a seated position.
            </summary>
            <remarks>
            This method initiates an animation sequence to transition the player character from sitting to standing.
            The process is managed asynchronously and may involve resetting player animator states.
            </remarks>
        </member>
        <member name="M:AVS.Util.Character.ExitToSurface(AVS.RootModController,UnityEngine.Transform)">
            <summary>
            Exits the player to the surface at a specified surface exit location.
            </summary>
            <remarks>
            Used when the player exits a vehicle underwater but needs to resurface.
            </remarks>
            <param name="surfaceExitLocation">The location to exit to the surface.</param>
            <param name="rmc">The root mod controller instance used to start coroutines.</param>
        </member>
        <member name="T:AVS.Util.CodeInstructionExtensions">
            <summary>
            Static helpers for dealing with code instructions
            </summary>
        </member>
        <member name="M:AVS.Util.CodeInstructionExtensions.ToStr(System.Reflection.Emit.Label)">
            <summary>
            Converts a label to string
            </summary>
        </member>
        <member name="M:AVS.Util.CodeInstructionExtensions.ToStr(HarmonyLib.CodeInstruction)">
            <summary>
            Converts a CodeInstruction instance to a descriptive string representation.
            </summary>
            <param name="i">The CodeInstruction instance to be converted.</param>
            <returns>A string representation of the CodeInstruction, including its opcode, operand, and associated labels.</returns>
        </member>
        <member name="M:AVS.Util.CodeInstructionExtensions.ObjectToStr(System.Object)">
            <summary>
            Converts instruction artifacts to readable strings
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:AVS.Util.CommonExtensions">
            <summary>
            Contains extension methods for common operations involving float conversions and percentage calculations.
            </summary>
        </member>
        <member name="M:AVS.Util.CommonExtensions.ToStr(System.Single)">
            <summary>
            Converts a float into a string using the universal decimal sign (.)
            </summary>
            <param name="f">Float to convert</param>
            <returns>Converted float</returns>
        </member>
        <member name="M:AVS.Util.CommonExtensions.ToFloat(System.String,System.Single@)">
            <summary>
            Parses a string into a float using the universal decimal sign (.)
            </summary>
            <param name="s">String to try parse</param>
            <param name="f">Resulting float</param>
            <returns>True on success</returns>
        </member>
        <member name="M:AVS.Util.CommonExtensions.ToFloat(System.String)">
            <summary>
            Converts a string into a float using the universal decimal sign (.)
            </summary>
            <param name="s">String to parse</param>
            <returns>Converted float</returns>
        </member>
        <member name="M:AVS.Util.CommonExtensions.Percentage(System.Single,System.Single)">
            <summary>
            Produces a percentage string from a float value.
            If the max value is zero, it returns "-%".
            Rounds the percentage to two decimal places.
            </summary>
            <param name="x"></param>
            <param name="max"></param>
            <returns>String in the form "[v]%" where [v] is either 1.23 or - </returns>
        </member>
        <member name="M:AVS.Util.CommonExtensions.Percentage(LiveMixin)">
            <summary>
            Produces a percentage string from a LiveMixin's current health status.
            </summary>
            <remarks>
            If the <paramref name="live"/> is null, has no max health or is invincible,
            it returns "-%".
            </remarks>
            <param name="live">Live mixin to produce the health percent of</param>
            <returns>String in the form "[v]%" where [v] is either 1.23 or - </returns>
        </member>
        <member name="T:AVS.Util.GameObjectHelper">
            <summary>
            Various utility extensions and methods for querying or manipulating GameObjects and Components.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.TryCopyComponentWithFieldsTo``1(``0,UnityEngine.GameObject)">
            <summary>
            Duplicates a source component onto another object, copying all its fields in the process.
            </summary>
            <typeparam name="T">Type being copied</typeparam>
            <param name="original">Original component. May be null</param>
            <param name="destination">Destination owner</param>
            <returns>Duplicated component</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.CopyComponentWithFieldsTo``1(``0,UnityEngine.GameObject)">
            <summary>
            Duplicates a source component onto another object, copying all its fields in the process.
            </summary>
            <typeparam name="T">Type being copied</typeparam>
            <param name="original">Original component</param>
            <param name="destination">Destination owner</param>
            <returns>Duplicated component</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.Or``1(``0,``0)">
            <summary>
            Returns the first non-null object from the two provided.
            </summary>
            <typeparam name="T">Type being compared</typeparam>
            <param name="a">First object to return if not null</param>
            <param name="b">Second objec to return if <paramref name="a"/> is null</param>
            <returns><paramref name="a"/> if not null, <paramref name="b"/> if <paramref name="a"/> is null,
            null if both are null</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.Or``1(``0,System.Func{``0})">
            <summary>
            Returns the first non-null object from the two provided.
            </summary>
            <typeparam name="T">Type being compared</typeparam>
            <param name="a">First object to return if not null</param>
            <param name="bFactory">Factory for the second object to return if <paramref name="a"/> is null</param>
            <returns><paramref name="a"/> if not null, otherwise the result of <paramref name="bFactory"/>.</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.OrRequired``1(``0,``0)">
            <summary>
            Returns the first non-null object from the two provided.
            Either <paramref name="a"/> or <paramref name="b"/> must not be null.
            </summary>
            <typeparam name="T">Type being compared</typeparam>
            <param name="a">First object to return if not null</param>
            <param name="b">Second object to return if <paramref name="a"/> is null</param>. Must not be null
            <returns><paramref name="a"/> if not null, <paramref name="b"/> if <paramref name="a"/> is null</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.OrRequired``1(``0,System.Func{``0})">
            <summary>
            Returns the first non-null object from the two provided.
            Either <paramref name="a"/> or the result of <paramref name="bFactory"/> must not be null.
            </summary>
            <typeparam name="T">Type being compared</typeparam>
            <param name="a">First object to return if not null</param>
            <param name="bFactory">Factory for the second object to return if <paramref name="a"/> is null</param>. Must not produce null
            <returns><paramref name="a"/> if not null, <paramref name="bFactory"/>() if <paramref name="a"/> is null</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.OrThrow``1(``0,System.Func{System.Exception})">
            <summary>
            Returns a non-null object or throws an exception if the object is null.
            </summary>
            <typeparam name="T">Unity object type to check</typeparam>
            <param name="item">Unity object to check</param>
            <param name="exceptionFactory">Factory that produces the exception to throw. Can throw itself</param>
            <returns>Non-null <paramref name="item"/></returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.OrThrow``1(``0,System.String)">
            <summary>
            Returns a non-null object or throws an exception if the object is null.
            </summary>
            <typeparam name="T">Unity object type to check</typeparam>
            <param name="item">Unity object to check</param>
            <param name="msg">Message to throw as an <see cref="T:System.InvalidOperationException" /></param>
            <returns>Non-null <paramref name="item"/></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.LoggedSetActive(UnityEngine.GameObject,System.Boolean,AVS.Log.SmartLog)">
            <summary>
            Changes the active state of a GameObject and logs the action, including any exceptions that occur.
            </summary>
            <remarks>
            Does nothing if the object already matches the new state
            </remarks>
            <param name="gameObject">Game object being manipulated</param>
            <param name="toEnabled">New enabled state</param>
            <param name="log">Out logging facilities</param>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetTransform(UnityEngine.GameObject)">
            <summary>
            Selectively returns the transform of a GameObject.
            Returns null if the GameObject is null.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.GetTransform(UnityEngine.Component)">
            <summary>
            Selectively returns the transform of a Component.
            Returns null if the Component is null.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetGameObject(UnityEngine.Component)">
            <summary>
            Selectively returns the GameObject of a Component.
            Returns null if the Component is null.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetTransform(UnityEngine.Component)">
            <summary>
            Selectively returns the transform of a Component.
            Returns null if the Component is null.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetTexture2D(UnityEngine.Sprite)">
            <summary>
            Selectively returns the Texture2D of a Sprite.
            Returns null if the Sprite is null.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.NiceName(UnityEngine.Object)">
            <summary>
            Queries a nicer representation of an Object for logging purposes.
            Includes the object's name, type, and instance ID.
            Returns "&lt;null&gt;" if the object is null.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.PathToString(UnityEngine.Component,UnityEngine.Transform)">
            <summary>
            Produces the full hierarchy path of a Transform as a single string using / as separator.
            Returns "&lt;null&gt;" if the Transform is null.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetChildren(UnityEngine.Transform)">
            <summary>
            Queries all children of a Transform as an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of Transforms.
            Returns an empty enumerable if the Transform is null or has no children.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetGameObjectOf(UnityEngine.Collider)">
            <summary>
            Gets the GameObject associated with a Collider.
            Favors the attached Rigidbody if available, otherwise uses the Collider's GameObject.
            Returns null if the Collider is null.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.RequireActive(UnityEngine.MonoBehaviour,UnityEngine.Transform)">
            <summary>
            Changes the active state of a MonoBehaviour and its parent hierarchy if necessary,
            such that the MonoBehaviour ends up active and enabled.
            Logs changes and errors as errors.
            </summary>
            <param name="c">Behavior to change the state of</param>
            <param name="rootTransform">Hierarchy root which will not be altered. If encountered, the loop stops</param>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetComponentsInChildren``1(UnityEngine.Component,System.Boolean)">
            <summary>
            Retrieves all components of type <typeparamref name="T"/> from the current component and its children.
            </summary>
            <typeparam name="T">The type of component to retrieve.</typeparam>
            <param name="c">The component from which to begin the search. If <see langword="null"/>, an empty array is returned.</param>
            <param name="includeInactive">Also include inactive game objects</param>
            <returns>An array of components of type <typeparamref name="T"/> found in the current component and its children.
            Returns an empty array if <paramref name="c"/> is <see langword="null"/> or no components of the specified
            type are found.</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetComponentsInChildren``1(UnityEngine.GameObject)">
            <summary>
            Retrieves all components of type <typeparamref name="T"/> from the specified <see cref="T:UnityEngine.GameObject"/>  and
            its child objects. Returns an empty array if the <see cref="T:UnityEngine.GameObject"/> is null.
            </summary>
            <typeparam name="T">The type of component to retrieve. Must derive from <see cref="T:UnityEngine.Component"/>.</typeparam>
            <param name="o">The <see cref="T:UnityEngine.GameObject"/> from which to retrieve the components. Can be null.</param>
            <returns>An array of components of type <typeparamref name="T"/> found in the <see cref="T:UnityEngine.GameObject"/> and its
            children.  Returns an empty array if the <paramref name="o"/> is null.</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetComponentInChildren``1(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Retrieves the first component of type <typeparamref name="T"/> in the specified <see cref="T:UnityEngine.GameObject"/> or
            its children.
            </summary>
            <typeparam name="T">The type of component to retrieve.</typeparam>
            <param name="o">The <see cref="T:UnityEngine.GameObject"/> to search. Can be <see langword="null"/>.</param>
            <param name="includeInactive">A value indicating whether to include inactive GameObjects in the search.  <see langword="true"/> to include
            inactive GameObjects; otherwise, <see langword="false"/>.</param>
            <returns>The first component of type <typeparamref name="T"/> found in the <paramref name="o"/> or its children,  or
            <see langword="null"/> if no such component is found or if <paramref name="o"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetComponentInChildren``1(UnityEngine.Component,System.Boolean)">
            <summary>
            Retrieves the first component of type <typeparamref name="T"/> from the specified component or its children.
            Returns <see langword="null"/> if the transform is <see langword="null"/> or if no such component is found.
            </summary>
            <typeparam name="T">The type of component to retrieve.</typeparam>
            <param name="c">The Component from which to search for the sibling or contained component.</param>
            <param name="includeInactive">Whether to include inactive child GameObjects in the search.</param>
            <returns>The first component of type <typeparamref name="T"/> found, or <see langword="null"/> if none is found.</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetComponentInParent``1(UnityEngine.Component)">
            <summary>
            Retrieves the first component of type <typeparamref name="T"/> in the parent hierarchy of the specified component.
            Returns null if the component is null or if no such component is found in the parent hierarchy.
            </summary>
            <typeparam name="T">The type of component to retrieve.</typeparam>
            <param name="c">The Component from which to search for the sibling or parent component.</param>
            <returns>The first component of type <typeparamref name="T"/> found, or <see langword="null"/> if none is found.</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetComponent``1(UnityEngine.Component)">
            <summary>
            Selectively gets a component of type <typeparamref name="T"/> from a sibling component.
            If the component is null, returns null.
            </summary>
            <typeparam name="T">Requested component type</typeparam>
            <param name="c">Component to get the sibling component of</param>
            <returns>Requested component or null</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetComponent``1(UnityEngine.GameObject)">
            <summary>
            Retrieves a component of the specified type from the given <see cref="T:UnityEngine.GameObject"/>
            only if the game object is not null.
            Otherwise, returns null.
            </summary>
            <typeparam name="T">The type of the component to retrieve. Must derive from <see cref="T:UnityEngine.Component"/>.</typeparam>
            <param name="go">The <see cref="T:UnityEngine.GameObject"/> from which to retrieve the component. Can be <see langword="null"/>.</param>
            <returns>The component of type <typeparamref name="T"/> if found; otherwise, <see langword="null"/>.  Returns <see
            langword="null"/> if <paramref name="go"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetParent(UnityEngine.Transform)">
            <summary>
            Returns the parent <see cref="T:UnityEngine.Transform"/> of the given <paramref name="t"/>,
            or <see langword="null"/> if <paramref name="t"/> is <see langword="null"/>.
            </summary>
            <param name="t">The <see cref="T:UnityEngine.Transform"/> whose parent is to be retrieved. Can be <see langword="null"/>.</param>
            <returns>The parent <see cref="T:UnityEngine.Transform"/>, or <see langword="null"/> if <paramref name="t"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGetVehicle``1(Player)">
            <summary>
            Attempts to retrieve the player's current vehicle as a specific type.
            </summary>
            <typeparam name="T">The type of vehicle to retrieve. Must derive from <see cref="T:Vehicle"/>.</typeparam>
            <param name="player">The player whose vehicle is being queried. Can be <see langword="null"/>.</param>
            <returns>
            The player's current vehicle cast to type <typeparamref name="T"/>, or <see langword="null"/> if the player is <see langword="null"/>,
            the player is not in a vehicle, or the vehicle is not of type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeSetActive(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Sets the active state of the specified <see cref="T:UnityEngine.GameObject"/> if it is not null.
            Does nothing if the <paramref name="gameObject"/> is null.
            </summary>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/> to set active or inactive. Can be null.</param>
            <param name="value">The active state to set.</param>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeDo``1(``0,System.Action{``0})">
            <summary>
            Executes the specified action if the object is not null.
            </summary>
            <remarks>This method provides a safe way to perform an action on a nullable object derived
            from <see cref="T:UnityEngine.Object"/>. If <paramref name="item"/> is null, the method does
            nothing.</remarks>
            <typeparam name="T">The type of the object, which must derive from <see cref="T:UnityEngine.Object"/>.</typeparam>
            <param name="item">The object to check for null before executing the action.</param>
            <param name="action">The action to execute if <paramref name="item"/> is not null.</param>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.SafeGet``2(``0,System.Func{``0,``1},``1)">
            <summary>
            Safely retrieves a value from an object using a getter function, returning a fallback value if the object is null.
            </summary>
            <typeparam name="TObject">Object type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="item">Item to get a value of</param>
            <param name="getter">Getter function</param>
            <param name="fallback">Fallback value if <paramref name="item"/> is null</param>
            <returns>Result of <paramref name="getter"/> if <paramref name="item"/> is not null, <paramref name="fallback"/> otherwise</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.PrefabId(UnityEngine.Component)">
            <summary>
            Retrieves the <see cref="T:PrefabIdentifier"/> component attached to the specified component.
            </summary>
            <param name="c">The component from which to retrieve the <see cref="T:PrefabIdentifier"/>. Can be <see langword="null"/>.</param>
            <returns>The <see cref="T:PrefabIdentifier"/> component if found; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.PrefabId(UnityEngine.GameObject)">
            <summary>
            Retrieves the <see cref="T:PrefabIdentifier"/> component attached to the specified game object.
            </summary>
            <returns>The <see cref="T:PrefabIdentifier"/> component if found; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.WriteReflected``1(PrefabIdentifier,System.String,``0,AVS.RootModController)">
            <summary>
            Extension method to write reflected data associated with a prefab identifier to a JSON file of the current save game slot.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.WriteData(PrefabIdentifier,System.String,AVS.SaveLoad.Data,AVS.RootModController)">
            <summary>
            Extension method to write data associated with a prefab identifier to a JSON file of the current save game slot.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.ReadReflected``1(PrefabIdentifier,System.String,``0@,AVS.RootModController)">
            <summary>
            Extension method to read data via reflection from a JSON file in the current save game slot.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.ReadData(PrefabIdentifier,System.String,AVS.SaveLoad.Data,AVS.RootModController)">
            <summary>
            Extension method to read data associated with a prefab identifier from a JSON file in the current save game slot.
            </summary>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.GetVehicleName(Vehicle)">
            <summary>
            Resolves the vehicle name of a vehicle.
            </summary>
            <param name="vehicle">Vehicle to get the name of</param>
            <returns>Vehicle name or "&lt;null&gt;"</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.ReplaceMaterial(UnityEngine.Renderer,System.Int32,UnityEngine.Material)">
            <summary>
            Sets a material on a specific slot of a renderer.
            </summary>
            <param name="renderer">The renderer to set the material of</param>
            <param name="index">The index of the material on the renderer</param>
            <param name="material">The material to set</param>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.DestroyChildren(UnityEngine.Transform)">
            <summary>
            Destroys all child transforms of <paramref name="transform"/>
            </summary>
            <remarks>
            The children will actually be destroyed at the end of the frame, but they will immediately be de-parented
            </remarks>
            <param name="transform">Parent transform to destroy all children of</param>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.IsNull(UnityEngine.Object)">
            <summary>
            Safely checks if a Unity object is null
            </summary>
            <param name="o">Object to check</param>
            <returns>True if null, false if not null</returns>
        </member>
        <member name="M:AVS.Util.GameObjectHelper.IsNotNull(UnityEngine.Object)">
            <summary>
            Safely checks if a Unity object is not null
            </summary>
            <param name="o">Object to check</param>
            <returns>True if not null, false if null</returns>
        </member>
        <member name="T:AVS.Util.HierarchyAnalyzer">
            <summary>
            Game object/component hierarchy analyzer
            </summary>
        </member>
        <member name="M:AVS.Util.HierarchyAnalyzer.LogToJson(UnityEngine.Component,System.String)">
            <summary>
            Logs a component and its children as JSON to the specified file.
            If the file already exists, it is overwritten.
            If the directory does not exist, an attempt is made to create it
            </summary>
            <param name="c">Component to log</param>
            <param name="filename">Filename to write to</param>
        </member>
        <member name="M:AVS.Util.HierarchyAnalyzer.LogToJson(UnityEngine.Transform,System.String)">
            <summary>
            Logs a transform and its children as JSON to the specified file.
            If the file already exists, it is overwritten.
            If the directory does not exist, an attempt is made to create it
            </summary>
            <param name="t">Transform to log</param>
            <param name="filename">Filename to write to</param>
        </member>
        <member name="T:AVS.Util.IsNotNullExtensions">
            <summary>
            Various null testing extensions for non-Unity types
            </summary>
        </member>
        <member name="T:AVS.Util.IsNullExtensions">
            <summary>
            Various null testing extensions for non-Unity types
            </summary>
        </member>
        <member name="T:AVS.Util.ListExt">
            <summary>
            Provides a set of extension methods for operations on collections and lists.
            </summary>
        </member>
        <member name="M:AVS.Util.ListExt.FindIndexOf``1(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Finds the index of the first element in the source list that matches the specified predicate.
            </summary>
            <typeparam name="T">The type of elements in the source list.</typeparam>
            <param name="source">The source list to search.</param>
            <param name="predicate">A function that defines the condition to match the elements.</param>
            <returns>The zero-based index of the first element that matches the predicate, or -1 if no such element is found.</returns>
        </member>
        <member name="M:AVS.Util.ListExt.Last``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Returns the last element in the source list.
            </summary>
            <typeparam name="TSource">The type of elements in the source list.</typeparam>
            <param name="source">The source list to retrieve the last element from.</param>
            <returns>The last element in the source list.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the source list is empty.</exception>
        </member>
        <member name="M:AVS.Util.ListExt.ToRoList``1(``0)">
            <summary>
            Converts the specified single object to a read-only list containing that object as its single element.
            </summary>
            <typeparam name="TSource">The type of the object to convert.</typeparam>
            <param name="source">The object to convert into a read-only list.</param>
            <returns>A read-only list containing the specified object as its only element.</returns>
        </member>
        <member name="M:AVS.Util.ListExt.CollectionsEqual``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Collections.Generic.IReadOnlyCollection{``0})">
            <summary>
            Determines whether two collections are equal by comparing their elements in sequence.
            </summary>
            <typeparam name="TSource">The type of elements in the collections.</typeparam>
            <param name="first">The first collection to compare.</param>
            <param name="second">The second collection to compare.</param>
            <returns>True if the two collections are equal in length and their corresponding elements are equal; otherwise, false.</returns>
        </member>
        <member name="M:AVS.Util.ListExt.ToArray``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> to an array.
            </summary>
            <typeparam name="T">The type of elements in the source list.</typeparam>
            <param name="source">The source list to convert to an array.</param>
            <returns>An array containing all the elements of the source list, in the same order.</returns>
        </member>
        <member name="M:AVS.Util.ListExt.AddRange``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a range of items to the specified HashSet and returns the count of items that were successfully added.
            </summary>
            <typeparam name="T">The type of elements in the set and the collection.</typeparam>
            <param name="set">The HashSet to add items to.</param>
            <param name="items">The collection of items to add to the HashSet.</param>
            <returns>The number of items successfully added to the HashSet.</returns>
        </member>
        <member name="M:AVS.Util.ListExt.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes the specified action for each element in the source collection.
            </summary>
            <typeparam name="T">The type of elements in the source collection.</typeparam>
            <param name="source">The collection of elements to process.</param>
            <param name="action">The action to perform on each element in the collection.</param>
        </member>
        <member name="M:AVS.Util.ListExt.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the elements of the given enumerable to a HashSet.
            </summary>
            <typeparam name="T">The type of elements in the source enumerable.</typeparam>
            <param name="source">The source enumerable to convert.</param>
            <returns>A HashSet containing the elements of the source enumerable.</returns>
        </member>
        <member name="M:AVS.Util.ListExt.Least``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Finds the element in the source sequence that has the least value as determined by the specified selector function.
            </summary>
            <typeparam name="T">The type of elements in the source sequence.</typeparam>
            <param name="source">The source sequence to search.</param>
            <param name="selector">A function to extract a float value from each element for comparison.</param>
            <returns>The element in the source sequence with the least value as determined by the selector function.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the source sequence contains no elements.</exception>
        </member>
        <member name="M:AVS.Util.ListExt.Repeat(System.String,System.Int32)">
            <summary>
            Creates a new character array by repeating the specified string a given number of times.
            </summary>
            <param name="s">The string to be repeated. Cannot be <see langword="null"/> or empty.</param>
            <param name="count">The number of times to repeat the string. Must be greater than zero.</param>
            <returns>A character array containing the repeated string. Returns an empty array if <paramref name="count"/> is less
            than or equal to zero or if <paramref name="s"/> is <see langword="null"/> or empty.</returns>
        </member>
        <member name="T:AVS.Util.OrderedSet`1">
            <summary>
            Represents a collection of unique elements that maintains the order in which items are added.
            </summary>
            <typeparam name="T">The type of elements in the set.</typeparam>
        </member>
        <member name="M:AVS.Util.OrderedSet`1.#ctor">
            <summary>
            Constructs an empty set.
            </summary>
        </member>
        <member name="M:AVS.Util.OrderedSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructs an empty set with a customer comparer.
            </summary>
            <param name="comparer">The comparer to use</param>
        </member>
        <member name="M:AVS.Util.OrderedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructs a new set from a given set of items
            </summary>
            <param name="items">Items to fill into the new set</param>
        </member>
        <member name="M:AVS.Util.OrderedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructs a new set with a customer comparer from a given set of items
            </summary>
            <param name="items">Items to fill into the new set</param>
            <param name="comparer">The comparer to use</param>
        </member>
        <member name="M:AVS.Util.OrderedSet`1.ToHashSet">
            <summary>
            Converts the <see cref="T:AVS.Util.OrderedSet`1"/> to a <see cref="T:System.Collections.Generic.HashSet`1"/> containing the same elements.
            </summary>
            <remarks>
            The order of elements will be lost in the process
            </remarks>
            <returns>A <see cref="T:System.Collections.Generic.HashSet`1"/> containing all elements of the <see cref="T:AVS.Util.OrderedSet`1"/>.</returns>
        </member>
        <member name="M:AVS.Util.OrderedSet`1.ToList">
            <summary>
            Converts the local set to a list
            </summary>
            <returns></returns>
        </member>
        <member name="M:AVS.Util.OrderedSet`1.ToArray">
            <summary>
            Converts the elements of the set to an array.
            </summary>
            <returns>An array containing all elements in the set, preserving their order.</returns>
        </member>
        <member name="P:AVS.Util.OrderedSet`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:AVS.Util.OrderedSet`1"/>.
            </summary>
            <value>The total count of elements in the set.</value>
        </member>
        <member name="P:AVS.Util.OrderedSet`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:AVS.Util.OrderedSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items to the <see cref="T:AVS.Util.OrderedSet`1"/>.
            </summary>
            <param name="items">The collection of elements to add to the set.</param>
            <returns>The updated <see cref="T:AVS.Util.OrderedSet`1"/> instance.</returns>
        </member>
        <member name="M:AVS.Util.OrderedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:AVS.Util.OrderedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:AVS.Util.OrderedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:AVS.Util.OrderedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:AVS.Util.OrderedSet`1.ContainsAll(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set contains all elements from the specified collection.
            </summary>
            <param name="other">The collection of elements to check against the current set.</param>
            <returns>True if the current set contains all elements from the specified collection; otherwise, false.</returns>
        </member>
        <member name="M:AVS.Util.OrderedSet`1.ContainsAny(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current set contains any elements from the specified collection.
            </summary>
            <param name="other">The collection of elements to check against the current set.</param>
            <returns>True if the current set contains at least one element from the specified collection; otherwise, false.</returns>
        </member>
        <member name="M:AVS.Util.OrderedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:AVS.Util.OrderedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:AVS.Util.OrderedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:AVS.Util.OrderedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:AVS.Util.OrderedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:AVS.Util.OrderedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:AVS.Util.OrderedSet`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:AVS.Util.OrderedSet`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all elements from the set that match the given predicate.
            </summary>
            <param name="match">The predicate function that determines whether an element should be removed.</param>
            <returns>The current set with the elements removed.</returns>
        </member>
        <member name="M:AVS.Util.OrderedSet`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:AVS.Util.OrderedSet`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AVS.Util.OrderedSet`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:AVS.Util.OrderedSet`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:AVS.Util.OrderedSet`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AVS.Util.OrderedSet`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="T:AVS.Util.RayCaster">
            <summary>
            Physical helper structure to contain all hits from a ray cast.
            </summary>
        </member>
        <member name="P:AVS.Util.RayCaster.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:AVS.Util.RayCaster.Count">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Util.RayCaster.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:AVS.Util.RayCaster.RayCastAll(UnityEngine.Ray,System.Single,System.Int32,UnityEngine.QueryTriggerInteraction)">
            <summary>
            Raycasts all objects in the scene and returns the number of hits.
            </summary>
            <remarks>The results are stored in the local instance</remarks>
            <param name="ray">Ray to cast</param>
            <param name="maxDistance">Max hit distance along the ray</param>
            <param name="layerMask">Collider layer mask</param>
            <param name="queryTriggerInteraction">Whether to hit trigger colliders</param>
            <returns>Number of detected hits that are stored in the local structure</returns>
        </member>
        <member name="T:AVS.Util.Shaders">
            <summary>
            Constants and helper methods related to shaders.
            </summary>
        </member>
        <member name="P:AVS.Util.Shaders.MainShader">
            <summary>
            Name of the (only) shader used for all vehicles.
            </summary>
        </member>
        <member name="P:AVS.Util.Shaders.EmissionKeyword">
            <summary>
            Shader keyword used if the material emits light
            </summary>
        </member>
        <member name="P:AVS.Util.Shaders.SpecmapKeyword">
            <summary>
            Shader keyword used if the material has a specular map and accesses the environment map.
            </summary>
        </member>
        <member name="P:AVS.Util.Shaders.GlowField">
            <summary>
            Shader property that controls glow strength.
            </summary>
        </member>
        <member name="P:AVS.Util.Shaders.GlowNightField">
            <summary>
            Shader property that controls glow strength at night.
            </summary>
        </member>
        <member name="P:AVS.Util.Shaders.EmissionField">
            <summary>
            Shader property that controls emission strength.
            </summary>
        </member>
        <member name="P:AVS.Util.Shaders.EmissionNightField">
            <summary>
            Shader property that controls emission strength as night.
            </summary>
        </member>
        <member name="P:AVS.Util.Shaders.SpecIntField">
            <summary>
            Shader property that controls the specular intensity.
            </summary>
        </member>
        <member name="P:AVS.Util.Shaders.ColorField">
            <summary>
            Shader property that controls color.
            </summary>
        </member>
        <member name="P:AVS.Util.Shaders.GlowColorField">
            <summary>
            Shader property that controls the glow color.
            </summary>
        </member>
        <member name="M:AVS.Util.Shaders.FindMainShader">
            <summary>
            Finds and returns the main shader used for vehicles.
            </summary>
            <remarks>If the shader cannot be located, an error message is logged to the console.</remarks>
            <returns>The <see cref="T:UnityEngine.Shader"/> instance representing the main vehicle shader,  or <see langword="null"/> if the
            shader cannot be found.</returns>
        </member>
        <member name="M:AVS.Util.Shaders.LogMainShaderPropertiesToDebug">
            <summary>
            Logs the properties of the main shader to the debug console.
            </summary>
            <remarks>This method retrieves the main shader, iterates through its properties, and logs each
            property's name and type to the debug console. It is intended for debugging purposes to inspect the shader's
            properties.</remarks>
        </member>
        <member name="M:AVS.Util.Shaders.LogAllShadersInUseAnywhere">
            <summary>
            Logs the names of all unique shaders currently in use across all loaded materials in the application.
            </summary>
            <remarks>This method scans all materials currently loaded in memory and identifies the shaders
            they reference. It then logs the names of these shaders to the Unity console. This can be useful for
            debugging or analyzing which shaders are actively being used in the application.</remarks>
        </member>
        <member name="M:AVS.Util.Shaders.ApplyMainShaderRecursively(UnityEngine.GameObject)">
            <summary>
            Applies the main shader to all materials of <see cref="T:UnityEngine.MeshRenderer"/> components  in the specified <see
            cref="T:UnityEngine.GameObject"/> and its children.
            </summary>
            <remarks>This method recursively traverses the hierarchy of the specified <see
            cref="T:UnityEngine.GameObject"/>  and applies the main shader to all materials of any <see cref="T:UnityEngine.MeshRenderer"/>
            components found. Hidden or inactive objects are also included in the traversal.</remarks>
            <param name="go">The root <see cref="T:UnityEngine.GameObject"/> whose child <see cref="T:UnityEngine.MeshRenderer"/> components will have their
            materials updated.</param>
        </member>
        <member name="M:AVS.Util.Shaders.EnableSimpleEmission(UnityEngine.Material,System.Single,System.Single)">
            <summary>
            Enables emission for the specified material using predefined day and night emission values.
            </summary>
            <remarks>This method configures the material to use emission under the "marmosetuber" shader. 
            It sets the emission intensity for both day and night modes and enables the necessary shader keywords. Note
            that not all materials may behave as expected with this configuration, particularly if they do not  require
            a specular map, which could result in unintended visual effects such as increased brightness or
            shininess.</remarks>
            <param name="mat">The material for which emission will be enabled. Cannot be <see langword="null"/>.</param>
            <param name="dayAmount">The emission intensity to apply during the day. The default value is 1.0.</param>
            <param name="nightAmount">The emission intensity to apply during the night. The default value is 1.0.</param>
        </member>
        <member name="T:AVS.Util.WaterClipUtil">
            <summary>
            Utility class for binding a WaterClipProxy to a target GameObject.
            </summary>
        </member>
        <member name="M:AVS.Util.WaterClipUtil.BindProxy(AVS.RootModController,UnityEngine.GameObject,UnityEngine.Texture3D,UnityEngine.Bounds)">
            <summary>
            Binds a WaterClipProxy to the specified target GameObject using the provided distance map and bounds.
            </summary>
            <remarks>
            The Seamoth has to be loaded before this method is called.
            </remarks>
            <param name="rmc">Root mod controller for logging purposes</param>
            <param name="target">Target object that should contain the WaterClipProxy and its renderers. Should not contain any components</param>
            <param name="distanceMap">3D distance map to use</param>
            <param name="localBounds">Bounding box of the 3D Distance map in a vehicle located in the point of origin with no rotation</param>
            <exception cref="T:System.InvalidOperationException">The Seamoth helper was not loaded before this method is called</exception>
        </member>
        <member name="M:AVS.Util.WaterClipUtil.UnbindProxy(AVS.RootModController,UnityEngine.GameObject)">
            <summary>
            Unbinds the WaterClipProxy from the specified target GameObject.
            </summary>
            <param name="rmc">Root mod controller for logging purposes</param>
            <param name="target">Target object that may contain the WaterClipProxy and its renderers</param>
        </member>
        <member name="T:AVS.VehicleBuilding.Helm">
            <summary>
            Represents the control interface for a vehicle, typically used for piloting.
            The helm defines the positions and orientations of the pilot seat,
            controls, and exit points, as well as whether helm requires a seated position.
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.Helm.IsSeated">
            <summary>
            True if the player is expected to be seated at this helm.
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.Helm.Root">
            <summary>
            The helm root object
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.Helm.PlayerControlLocation">
            <summary>
            The location at which the player is inserted when entering helm control
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.Helm.ExitLocation">
            <summary>
            The exit location when the player exits the helm. Can be null
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.Helm.LeftHandTarget">
            <summary>
            This is what the player's left hand will 'grab' while you pilot.
            Can be null if the vehicle does not have a steering wheel.
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.Helm.RightHandTarget">
            <summary>
            This is what the player's right hand will 'grab' while you pilot.
            Can be null if the vehicle does not have a steering wheel.
            </summary>
        </member>
        <member name="M:AVS.VehicleBuilding.Helm.#ctor(UnityEngine.GameObject,UnityEngine.GameObject,UnityEngine.Transform,System.Boolean,UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Constructs a new instance of <see cref="T:AVS.VehicleBuilding.Helm"/>.
            </summary>
            <param name="root">The helm root object</param>
            <param name="playerControlLocation">The location at which the player is inserted when entering helm control</param>
            <param name="exitLocation"></param>
            <param name="isSeated"></param>
            <param name="steeringWheelLeftHandTarget"></param>
            <param name="steeringWheelRightHandTarget"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:AVS.VehicleBuilding.Helm.CalculatedExitLocation">
            <summary>
            Walking position, just behind the chair.
            Todo: Should the configured exit location be used instead?
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.Helm.AnyExitLocation">
            <summary>
            Gets the exit location for the player when exiting the vehicle
            or calculates one.
            </summary>
        </member>
        <member name="T:AVS.VehicleBuilding.VehicleHatchDefinition">
            <summary>
            Defines the attributes and locations associated with a vehicle hatch.
            A vehicle hatch includes the hatch object itself and specified transform locations
            for entry, exit, and surface exit points. These attributes are crucial for
            handling the entry and exit mechanics of a vehicle.
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleHatchDefinition.Hatch">
            <summary>
            The root object of the hatch itself. Should contain a collider so that a hand target can be assigned
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleHatchDefinition.EntryLocation">
            <summary>
            The entry location when entering the vehicle through this hatch.
            Currently the rotation is ignored.
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleHatchDefinition.ExitLocation">
            <summary>
            The exit transform when exiting the vehicle through this hatch.
            Currently the rotation is ignored.
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleHatchDefinition.SurfaceExitLocation">
            <summary>
            The exit-transform to use instead of <see cref="P:AVS.VehicleBuilding.VehicleHatchDefinition.ExitLocation"/> when the submarine
            is close to the water surface while exiting.
            </summary>
        </member>
        <member name="M:AVS.VehicleBuilding.VehicleHatchDefinition.#ctor(UnityEngine.GameObject,UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Represents the definition of a vehicle hatch, including its transform locations for entry, exit, and surface exit.
            </summary>
        </member>
        <member name="T:AVS.VehicleBuilding.MobileWaterPark">
            <summary>
            Definition of a fish tank within a vehicle.
            The fish tank can accommodate fish and other aquatic life
            that may be added to a water park.
            Eggs will hatch eventually and fish may reproduce.
            </summary>
            <param name="ContentContainer">The game object that will contain the fish.</param>
            <param name="Root">The park root object</param>
            <param name="Width">The grid width of the total tank storage capacity.</param>
            <param name="Height">The grid height of the total tank storage capacity.</param>
            <param name="DisplayName">The display text for the fish tank, which can be localized.</param>
            <param name="AllowReproduction">If true, fish in this tank may reproduce.</param>
            <param name="HatchEggs">If true, eggs in this tank will hatch eventually.</param>
            <param name="CollidersAreLive">Function that returns true if the colliders are active and fish can move.
            If the function returns false, fish shall become invisible and immobile so as to now swim out of the containment</param>
            <param name="WallLayerMask">A bit-mask that encapsules all tank walls, floor, and ceiling in order to ray cast only the walls. Should not contain layer 0 (fish)</param>
        </member>
        <member name="M:AVS.VehicleBuilding.MobileWaterPark.#ctor(UnityEngine.Transform,UnityEngine.GameObject,System.Int32,System.Int32,System.Nullable{AVS.Localization.MaybeTranslate},System.Boolean,System.Boolean,System.Func{System.Boolean},System.Int32)">
            <summary>
            Definition of a fish tank within a vehicle.
            The fish tank can accommodate fish and other aquatic life
            that may be added to a water park.
            Eggs will hatch eventually and fish may reproduce.
            </summary>
            <param name="ContentContainer">The game object that will contain the fish.</param>
            <param name="Root">The park root object</param>
            <param name="Width">The grid width of the total tank storage capacity.</param>
            <param name="Height">The grid height of the total tank storage capacity.</param>
            <param name="DisplayName">The display text for the fish tank, which can be localized.</param>
            <param name="AllowReproduction">If true, fish in this tank may reproduce.</param>
            <param name="HatchEggs">If true, eggs in this tank will hatch eventually.</param>
            <param name="CollidersAreLive">Function that returns true if the colliders are active and fish can move.
            If the function returns false, fish shall become invisible and immobile so as to now swim out of the containment</param>
            <param name="WallLayerMask">A bit-mask that encapsules all tank walls, floor, and ceiling in order to ray cast only the walls. Should not contain layer 0 (fish)</param>
        </member>
        <member name="P:AVS.VehicleBuilding.MobileWaterPark.ContentContainer">
            <summary>The game object that will contain the fish.</summary>
        </member>
        <member name="P:AVS.VehicleBuilding.MobileWaterPark.Root">
            <summary>The park root object</summary>
        </member>
        <member name="P:AVS.VehicleBuilding.MobileWaterPark.Width">
            <summary>The grid width of the total tank storage capacity.</summary>
        </member>
        <member name="P:AVS.VehicleBuilding.MobileWaterPark.Height">
            <summary>The grid height of the total tank storage capacity.</summary>
        </member>
        <member name="P:AVS.VehicleBuilding.MobileWaterPark.DisplayName">
            <summary>The display text for the fish tank, which can be localized.</summary>
        </member>
        <member name="P:AVS.VehicleBuilding.MobileWaterPark.AllowReproduction">
            <summary>If true, fish in this tank may reproduce.</summary>
        </member>
        <member name="P:AVS.VehicleBuilding.MobileWaterPark.HatchEggs">
            <summary>If true, eggs in this tank will hatch eventually.</summary>
        </member>
        <member name="P:AVS.VehicleBuilding.MobileWaterPark.CollidersAreLive">
            <summary>Function that returns true if the colliders are active and fish can move.
            If the function returns false, fish shall become invisible and immobile so as to now swim out of the containment</summary>
        </member>
        <member name="P:AVS.VehicleBuilding.MobileWaterPark.WallLayerMask">
            <summary>A bit-mask that encapsules all tank walls, floor, and ceiling in order to ray cast only the walls. Should not contain layer 0 (fish)</summary>
        </member>
        <member name="T:AVS.VehicleBuilding.VehicleStorage">
            <summary>
            Represents a storage unit within a vehicle, defined by its container and grid dimensions.
            </summary>
            <remarks>The <see cref="T:AVS.VehicleBuilding.VehicleStorage"/> struct encapsulates the storage characteristics of a
            vehicle, including its physical container, dimensions, and display properties. It is immutable and ensures that
            the storage dimensions are valid upon initialization.</remarks>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleStorage.Container">
            <summary>
            The game object that represents the storage.
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleStorage.Height">
            <summary>
            The grid height of the total storage capacity.
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleStorage.Width">
            <summary>
            The grid width of the total storage capacity.
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleStorage.DisplayName">
            <summary>
            The display text for the vehicle storage, which can be localized.
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleStorage.InnateIsAllowedToAdd">
            <summary>
            Custom logic to determine if items can be added to this storage.
            Only applicable for innate storage containers.
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleStorage.InnateIsAllowedToRemove">
            <summary>
            Custom logic to determine if items can be removed from this storage.
            Only applicable for innate storage containers.
            </summary>
        </member>
        <member name="M:AVS.VehicleBuilding.VehicleStorage.#ctor(UnityEngine.GameObject,System.Nullable{AVS.Localization.MaybeTranslate},System.Int32,System.Int32,IsAllowedToAdd,IsAllowedToRemove)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.VehicleBuilding.VehicleStorage"/> class with the specified container, display
            name, and dimensions.
            </summary>
            <param name="container">The <see cref="T:UnityEngine.GameObject"/> that represents the storage container. This parameter cannot be <see
            langword="null"/>.</param>
            <param name="displayName">The display name for the vehicle storage. This can be <see langword="null"/> if no display name is required.</param>
            <param name="height">The height of the vehicle storage. Must be greater than zero.</param>
            <param name="width">The width of the vehicle storage. Must be greater than zero.</param>
            <param name="innateIsAllowedToAdd">Custom logic to determine if items can be added to this innate storage. Not effective on modular storages. May be null</param>
            <param name="innateIsAllowedToRemove">Custom logic to determine if items can be removed from this innate storage. Not effective on modular storages.May be null</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="container"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="height"/> or <paramref name="width"/> is less than or equal to zero.</exception>
        </member>
        <member name="T:AVS.VehicleBuilding.VehicleUpgrades">
            <summary>
            Definition of vehicle upgrades, including the interface, flap, angles, and module proxies.
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleUpgrades.Interface">
            <summary>
            The object that serves as the hand target to open the upgrades interface.
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleUpgrades.Flap">
            <summary>
            A flap geometry that automatically rotates to indicate the upgrades interface is open or closed.
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleUpgrades.AnglesOpened">
            <summary>
            Euler angles of flap when opened
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleUpgrades.AnglesClosed">
            <summary>
            Euler angles of flap when closed
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleUpgrades.ModuleProxies">
            <summary>
            Parent transforms to put module models into.
            If null, no model will be provided for installed modules.
            </summary>
        </member>
        <member name="M:AVS.VehicleBuilding.VehicleUpgrades.#ctor(UnityEngine.GameObject,UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Vector3,System.Collections.Generic.IReadOnlyList{UnityEngine.Transform})">
            <summary>
            Represents the configuration and attributes of vehicle upgrades, including interface objects, flap components,
            positional angles, and module proxies used in the upgrade system.
            </summary>
        </member>
        <member name="T:AVS.VehicleBuilding.VehicleBatteryDefinition">
            <summary>
            Represents a vehicle power cell definition, including the battery slot, proxy, and display name.
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleBatteryDefinition.Root">
            <summary>
            Primary access point for the battery slot.
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleBatteryDefinition.BatteryProxy">
            <summary>
            Parent to place the respective power cell model in.
            Any other contained children are purged on prefabrication.
            If null, the power cell model will not be placed.
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleBatteryDefinition.DisplayName">
            <summary>
            Name to display for the battery slot, which can be localized.
            </summary>
        </member>
        <member name="M:AVS.VehicleBuilding.VehicleBatteryDefinition.#ctor(UnityEngine.GameObject,UnityEngine.Transform,System.Nullable{AVS.Localization.MaybeTranslate})">
            <summary>
            Constructs a new instance of <see cref="T:AVS.VehicleBuilding.VehicleBatteryDefinition"/>.
            </summary>
            <param name="root">The game object representing the battery slot. Cannot be null.</param>
            <param name="batteryProxy">The transform where the battery model will be placed. Can be null if no model is needed.</param>
            <param name="displayName">The display name for the battery slot, which can be localized. Can be null if no display name is needed.</param>
        </member>
        <member name="T:AVS.VehicleBuilding.VehicleSpotLightDefinition">
            <summary>
            Head- or floodlight definition for vehicles.
            Defined spot lights will be maintained by AVS, toggled on- and off automatically,
            and configured to standard.
            The source objects may or may not already contain a light component.
            All AVS-created light sources will be configured to use the Subnautica volumetric light system,
            hard shadows, and a spot light type.
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleSpotLightDefinition.Light">
            <summary>
            The game object that represents the light source. The light shines along the Z axis of this object.
            If this object does not have a <see cref="T:UnityEngine.Light"/> component, AVS will add one.
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleSpotLightDefinition.Intensity">
            <summary>
            The intensity of the light, which must be non-negative.
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleSpotLightDefinition.Range">
            <summary>
            The range of the light in meters, which must be greater than zero.
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleSpotLightDefinition.Color">
            <summary>
            The color of the light, which can be any valid Unity <see cref="P:AVS.VehicleBuilding.VehicleSpotLightDefinition.Color"/>.
            </summary>
        </member>
        <member name="P:AVS.VehicleBuilding.VehicleSpotLightDefinition.Angle">
            <summary>
            The angle of the light cone in degrees, which must be between 0 and 179.
            Note that the volumetric Subnautica light cone visualization seems to be fixed at around 55 degrees.
            While <see cref="P:AVS.VehicleBuilding.VehicleSpotLightDefinition.Angle" /> will impact the light source's <see cref="P:UnityEngine.Light.spotAngle" /> maintained by AVS,
            the volumetric light cone is harded-coded in Subnautica and will not change.
            </summary>
        </member>
        <member name="M:AVS.VehicleBuilding.VehicleSpotLightDefinition.#ctor(UnityEngine.GameObject,System.Single,System.Single,UnityEngine.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.VehicleBuilding.VehicleSpotLightDefinition"/> class with the specified light object,
            intensity, range, color, and angle.
            </summary>
            <param name="light">The <see cref="T:UnityEngine.GameObject"/> representing the spotlight. Cannot be <see langword="null"/>.</param>
            <param name="intensity">The brightness of the spotlight. Must be non-negative.</param>
            <param name="range">The effective range of the spotlight, in meters. Must be greater than zero.</param>
            <param name="color">The color of the spotlight.</param>
            <param name="angle">The beam angle of the spotlight, in degrees. Must be between 0 and 179 inclusive.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="light"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="intensity"/> is negative, <paramref name="range"/> is less than or equal to zero,
            or <paramref name="angle"/> is outside the range 0 to 179 degrees.</exception>
        </member>
        <member name="T:AVS.VehicleComponents.PositiveValueThresholdTracker">
            <summary>
            Tracker for statuses where high values indicate worse status.
            </summary>
        </member>
        <member name="M:AVS.VehicleComponents.PositiveValueThresholdTracker.#ctor(AVS.Interfaces.AutopilotStatus[])">
            <summary>
            Tracker for statuses where high values indicate worse status.
            </summary>
        </member>
        <member name="T:AVS.VehicleComponents.NegativeValueThresholdTracker">
            <summary>
            Tracker for statuses where lower values indicate worse status.
            </summary>
        </member>
        <member name="T:AVS.VehicleComponents.Autopilot">
            <summary>
            The Autopilot class manages various autonomous functionalities for a vehicle,
            including monitoring and responding to power status, health, lights status,
            and surrounding dangers. It interacts with subsystems and implements
            multiple listener interfaces for vehicle, player, power, lights, and scuttle events.
            </summary>
        </member>
        <member name="P:AVS.VehicleComponents.Autopilot.HealthStatus">
            <summary>
            Gets the current health status of the autopilot system.
            </summary>
            <remarks>
            The health status is determined based on predefined thresholds and can represent
            various states including safe, low, or critical health conditions. This property
            dynamically monitors and updates the health state of the system.
            </remarks>
            <value>
            A value of type <see cref="T:AVS.Interfaces.AutopilotStatus"/> representing the current health status
            of the autopilot system.
            </value>
        </member>
        <member name="P:AVS.VehicleComponents.Autopilot.PowerStatus">
            <summary>
            Gets the current power status of the autopilot system.
            </summary>
            <remarks>
            The power status reflects the energy state of the system, determined by predefined levels.
            It provides insight into whether the system is operating within safe, low, critical, or dead power thresholds.
            The property dynamically tracks and updates the power condition of the system.
            </remarks>
            <value>
            A value of type <see cref="T:AVS.Interfaces.AutopilotStatus"/> representing the current power status of the autopilot system.
            </value>
        </member>
        <member name="P:AVS.VehicleComponents.Autopilot.DepthStatus">
            <summary>
            Gets the current depth status of the vehicle in relation to predefined safety thresholds.
            </summary>
            <remarks>
            The depth status is evaluated based on the vehicle's current depth and thresholds defining safe,
            near-crush, and beyond-crush levels. This property continuously monitors depth levels to provide
            real-time feedback on operational safety related to depth pressure conditions.
            </remarks>
            <value>
            A value of type <see cref="T:AVS.Interfaces.AutopilotStatus"/> indicating the current depth status, such as
            <see cref="F:AVS.Interfaces.AutopilotStatus.DepthSafe"/>, <see cref="F:AVS.Interfaces.AutopilotStatus.DepthNearCrush"/>,
            or <see cref="F:AVS.Interfaces.AutopilotStatus.DepthBeyondCrush"/>.
            </value>
        </member>
        <member name="P:AVS.VehicleComponents.Autopilot.DangerStatus">
            <summary>
            Gets the current danger status as determined by the proximity of nearby threats or hazardous environmental conditions.
            </summary>
            <remarks>
            The danger status reflects the level of threat in the current environment, and it is dynamically updated
            based on events such as the presence of nearby Leviathans or other critical factors. The status transitions
            between predefined categories to indicate the severity of the danger.
            </remarks>
            <value>
            A value of type <see cref="T:AVS.Interfaces.AutopilotStatus"/> representing the current danger status of the autopilot system.
            </value>
        </member>
        <member name="M:AVS.VehicleComponents.Autopilot.Awake">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleComponents.Autopilot.Start">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleComponents.Autopilot.Update">
            <inheritdoc/>
        </member>
        <member name="T:AVS.VehicleComponents.AvAttached">
            <summary>
            Common parent class for components that are attached to an AVS vehicle.
            </summary>
        </member>
        <member name="P:AVS.VehicleComponents.AvAttached.AV">
            <summary>
            Queries the vehicle this component is attached to. If not already set, it will search the parent hierarchy for an <see cref="T:AVS.BaseVehicle.AvsVehicle"/> component.
            </summary>
        </member>
        <member name="M:AVS.VehicleComponents.AvAttached.EnsureSelfDestructing``1(UnityEngine.GameObject,AVS.BaseVehicle.AvsVehicle,AVS.Log.SmartLog)">
            <summary>
            Ensures that the specified component of type <typeparamref name="T"/> exists on the given vehicle's
            GameObject. If the component does not exist, it is added and initialized.
            </summary>
            <remarks>This variant allows components to instantly self-destruct upon instantiation, returning null in this case.</remarks>
            <typeparam name="T">The type of the component to ensure. Must inherit from <see cref="T:AVS.VehicleComponents.AvAttached"/>.</typeparam>
            <param name="av">The vehicle instance to be attached to the created component</param>
            <param name="log">The logging instance used to record actions performed by this method</param>
            <param name="go">The GameObject to which the component should be attached</param>
            <returns>The existing or newly added component of type <typeparamref name="T"/>, or <c>null</c> if the component
            could not be added.</returns>
        </member>
        <member name="M:AVS.VehicleComponents.AvAttached.EnsureSelfDestructing``1(AVS.BaseVehicle.AvsVehicle,AVS.Log.SmartLog)">
            <summary>
            Ensures that the specified component of type <typeparamref name="T"/> exists on the given vehicle's
            GameObject. If the component does not exist, it is added and initialized.
            </summary>
            <remarks>This variant allows components to instantly self-destruct upon instantiation, returning null in this case.</remarks>
            <typeparam name="T">The type of the component to ensure. Must inherit from <see cref="T:AVS.VehicleComponents.AvAttached"/>.</typeparam>
            <param name="av">The vehicle instance whose GameObject is being checked or modified</param>
            <param name="log">The logging instance used to record actions performed by this method</param>
            <returns>The existing or newly added component of type <typeparamref name="T"/>, or <c>null</c> if the component
            could not be added.</returns>
        </member>
        <member name="T:AVS.VehicleComponents.ForeverBattery">
            <summary>
            Energy mixin for a power cell that never depletes
            </summary>
        </member>
        <member name="T:AVS.VehicleComponents.LightControllers.BaseLightController">
            <summary>
            Base class for light controllers in AVS vehicles.
            </summary>
        </member>
        <member name="P:AVS.VehicleComponents.LightControllers.BaseLightController.IsLightsOn">
            <summary>
            The current state of the lights managed by this controller.
            </summary>
        </member>
        <member name="M:AVS.VehicleComponents.LightControllers.BaseLightController.HandleLighting(System.Boolean)">
            <summary>
            Called when the light enabled status has changed.
            Intended to switch lights on or off in the vehicle.
            </summary>
            <param name="lightsAreNowEnabled">True if the lights have been switched on</param>
        </member>
        <member name="M:AVS.VehicleComponents.LightControllers.BaseLightController.HandleSound(System.Boolean)">
            <summary>
            Called when the light enabled status has changed.
            Intended to play a sound when the lights are toggled on or off.
            </summary>
            <param name="lightsAreNowEnabled">True if the lights have been switched on</param>
        </member>
        <member name="M:AVS.VehicleComponents.LightControllers.BaseLightController.Toggle">
            <summary>
            Toggles the lights on &lt;-&gt; off.
            </summary>
        </member>
        <member name="T:AVS.VehicleComponents.LightControllers.FloodlightsController">
            <summary>
            Controller for the floodlights on a submarine.
            </summary>
        </member>
        <member name="M:AVS.VehicleComponents.LightControllers.FloodlightsController.HandleLighting(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleComponents.LightControllers.FloodlightsController.HandleSound(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleComponents.LightControllers.FloodlightsController.Awake">
            <inheritdoc/>
        </member>
        <member name="T:AVS.VehicleComponents.LightControllers.HeadlightsController">
            <summary>
            Controller for the headlights of a vehicle.
            </summary>
        </member>
        <member name="M:AVS.VehicleComponents.LightControllers.HeadlightsController.HandleLighting(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleComponents.LightControllers.HeadlightsController.HandleSound(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleComponents.LightControllers.HeadlightsController.Awake">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleComponents.LightControllers.HeadlightsController.Update">
            <inheritdoc/>
        </member>
        <member name="T:AVS.VehicleComponents.LightControllers.InteriorLightsController">
            <summary>
            The controller for the interior lights of a submarine.
            </summary>
        </member>
        <member name="M:AVS.VehicleComponents.LightControllers.InteriorLightsController.HandleLighting(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleComponents.LightControllers.InteriorLightsController.HandleSound(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleComponents.LightControllers.InteriorLightsController.Awake">
            <inheritdoc/>
        </member>
        <member name="T:AVS.VehicleComponents.LightControllers.NavigationLightsController">
            <summary>
            The controller for the navigation lights of a submarine.
            </summary>
        </member>
        <member name="M:AVS.VehicleComponents.LightControllers.NavigationLightsController.HandleLighting(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleComponents.LightControllers.NavigationLightsController.HandleSound(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleComponents.LightControllers.NavigationLightsController.Awake">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleComponents.LightControllers.NavigationLightsController.Start">
            <inheritdoc/>
        </member>
        <member name="T:AVS.VehicleComponents.MaterialReactorConversionDeclaration">
            <summary>
            Represents a declaration of input parameters for a material reactor, including the input and output types and
            energy specifications.
            </summary>
            <remarks>This structure is used to define the characteristics of a material reactor's input,
            specifying the type of material used, the total energy it provides, the rate of energy release, and the
            resulting output type.</remarks>
        </member>
        <member name="P:AVS.VehicleComponents.MaterialReactorConversionDeclaration.InputTechType">
            <summary>
            The tech type of the material being consumed by the reactor.
            Each input tech type must be unique within the reactor's configuration.
            </summary>
        </member>
        <member name="P:AVS.VehicleComponents.MaterialReactorConversionDeclaration.TotalEnergy">
            <summary>
            The total amount of energy that can be generated from the input material.
            </summary>
        </member>
        <member name="P:AVS.VehicleComponents.MaterialReactorConversionDeclaration.EnergyPerSecond">
            <summary>
            Gets the amount of energy produced per second when consuming the input material.
            All materials in the reactor can be processed simultaneously,
            so the effective energy production rate is at most the sum of all materials'
            energy per second.
            </summary>
        </member>
        <member name="P:AVS.VehicleComponents.MaterialReactorConversionDeclaration.OutputTechType">
            <summary>
            Waste material produced by the reactor after processing the input material.
            <see cref="F:TechType.None" /> if no waste is produced.
            </summary>
        </member>
        <member name="M:AVS.VehicleComponents.MaterialReactorConversionDeclaration.#ctor(TechType,System.Single,System.Single,TechType)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.VehicleComponents.MaterialReactorConversionDeclaration"/> struct with the specified parameters.
            </summary>
        </member>
        <member name="T:AVS.VehicleComponents.MaterialReactor">
            <summary>
            Represents a reactor that processes materials to generate energy within a vehicle.
            </summary>
            <remarks>The <see cref="T:AVS.VehicleComponents.MaterialReactor"/> is designed to be attached to a vehicle and is responsible
            for converting materials into energy. It manages an internal container for materials, processes them according
            to specified energy values, and interacts with the vehicle's energy system. The reactor can display a whitelist
            of processable materials and their energy potentials, and it supports localization for interaction
            text.</remarks>
        </member>
        <member name="F:AVS.VehicleComponents.MaterialReactor.isGeneratingEnergy">
            <summary>
            Set to true if the reactor is currently processing materials and generating energy.
            If the local batteries are full, this will be false even if the reactor has materials
            to process.
            </summary>
        </member>
        <member name="F:AVS.VehicleComponents.MaterialReactor.canViewWhitelist">
            <summary>
            True if the PDA should show the whitelist of materials that can be processed by this reactor
            when the user right-clicks on it.
            </summary>
        </member>
        <member name="F:AVS.VehicleComponents.MaterialReactor.listPotentials">
            <summary>
            If true, the reactor will list the potential energy of each material in the whitelist.
            Not effective if <see cref="F:AVS.VehicleComponents.MaterialReactor.canViewWhitelist"/> is false.
            </summary>
        </member>
        <member name="F:AVS.VehicleComponents.MaterialReactor.onClosePDAAction">
            <summary>
            Action to execute when the PDA is closed after being opened from this reactor.
            </summary>
        </member>
        <member name="F:AVS.VehicleComponents.MaterialReactor.onItemsAdded">
            <summary>
            Action to execute when items were added to the local reactor.
            The first argument is the item that was added,
            the second argument is the total number of items in the reactor after the addition.
            </summary>
        </member>
        <member name="M:AVS.VehicleComponents.MaterialReactor.Initialize(AVS.BaseVehicle.AvsVehicle,System.Int32,System.Int32,AVS.Localization.MaybeTranslate,System.Single,System.Collections.Generic.List{AVS.VehicleComponents.MaterialReactorConversionDeclaration})">
            <summary>
            Initializes the MaterialReactor with the specified vehicle, container size, label, total energy capacity, and material data.
            </summary>
            <param name="avsVehicle">The vehicle to which this reactor is attached. Must not be null.</param>
            <param name="height">The height of the reactor's internal container grid. Must be positive.</param>
            <param name="width">The width of the reactor's internal container grid. Must be positive.</param>
            <param name="label">The label for the reactor's container UI.</param>
            <param name="totalCapacity">The total energy capacity of the reactor. Must be non-negative.</param>
            <param name="iMaterialData">A list of material data specifying which materials can be processed, their energy values, and output types. Must not be empty and all entries must have positive energy values.</param>
            <remarks>
            This method sets up the internal ItemsContainer, configures allowed materials, and initializes the energy mixin and battery.
            It also ensures that only one MaterialReactor is attached to a given vehicle at a time.
            An unintialized MaterialReactor will log an error and destroy itself on the first update cycle.
            </remarks>
        </member>
        <member name="M:AVS.VehicleComponents.MaterialReactor.Update">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleComponents.MaterialReactor.GetFuelPotential">
            <summary>
            Computes the total energy potential of all materials in the reactor.
            </summary>
        </member>
        <member name="M:AVS.VehicleComponents.MaterialReactor.GetBioReactorData(System.Single)">
            <summary>
            Gets consumption data for bio reactors.
            </summary>
            <param name="energyPerSecond">The energy produced per second by each added material.</param>
        </member>
        <member name="M:AVS.VehicleComponents.MaterialReactor.GetNuclearReactorData(System.Single)">
            <summary>
            Gets consumption data for nuclear reactors.
            The returned list contains a single entry for the reactor rod.
            </summary>
            <param name="energyPerSecond">The energy produced per second by each added reactor rod.</param>
        </member>
        <member name="T:AVS.VehicleComponents.SteeringWheel">
            <summary>
            Represents a component that allows a steering wheel to animate in correspondence
            with the movements of a vehicle by using angular velocity data.
            </summary>
        </member>
        <member name="P:AVS.VehicleComponents.SteeringWheel.UseRigidbody">
            <summary>
            Gets the Rigidbody associated with the parent Vehicle component, if available.
            </summary>
            <remarks>
            This property retrieves the Rigidbody from the parent Vehicle component, allowing
            the steering wheel to access the angular velocity data of the vehicle for animation.
            Returns null if no parent Vehicle component with a Rigidbody is present.
            </remarks>
        </member>
        <member name="F:AVS.VehicleComponents.SteeringWheel.smoothTime">
            <summary>
            Defines the amount of time, in seconds, for the steering wheel's rotation to smooth between its current and target values.
            </summary>
            <remarks>
            Smaller values create faster and sharper adjustments, while larger values create smoother but slower transitions.
            This value is used in conjunction with Mathf.SmoothDamp to ensure the steering wheel's rotation responds
            fluidly to changes based on the vehicle's angular velocity.
            </remarks>
        </member>
        <member name="F:AVS.VehicleComponents.SteeringWheel.yawAxis">
            <summary>
            Defines the axis along which the yaw rotation of the steering wheel is applied.
            </summary>
            <remarks>
            This field determines the local axis around which the steering wheel's rotation
            is animated to correspond to the movement and angular velocity of the vehicle.
            The available options include the x, y, and z axes, as well as their negative counterparts.
            </remarks>
        </member>
        <member name="F:AVS.VehicleComponents.SteeringWheel.maxExpectedAngularVelocity">
            <summary>
            Represents the maximum angular velocity (in radians per second) that can be expected
            from the Rigidbody associated with the vehicle. This value is used as a reference
            to normalize the angular velocity when calculating steering wheel rotation.
            </summary>
            <remarks>
            Adjusting this value may be necessary to ensure the steering wheel animation behaves
            as expected, particularly when dealing with vehicles that operate at significantly
            higher or lower angular velocities than the default value.
            </remarks>
        </member>
        <member name="F:AVS.VehicleComponents.SteeringWheel.maxSteeringWheelAngle">
            <summary>
            Sets the maximum angle, in degrees, to which the steering wheel can rotate.
            </summary>
            <remarks>
            This value defines the limits of the steering wheel's rotation to ensure
            it corresponds with the vehicle's steering. Adjusting this value changes
            how far the steering wheel will turn in response to the vehicle's angular velocity.
            </remarks>
        </member>
        <member name="T:AVS.VehicleComponents.SteeringWheel.YawAxis">
            <summary>
            Defines the possible axes used for determining the rotation direction
            of a steering wheel or similar components in relation to angular motion.
            </summary>
        </member>
        <member name="F:AVS.VehicleComponents.SteeringWheel.YawAxis.X">
            <summary>
            Represents the positive X-axis as the designated yaw rotation axis.
            This value is used to determine the rotation direction for components
            such as a steering wheel relative to angular motion.
            </summary>
        </member>
        <member name="F:AVS.VehicleComponents.SteeringWheel.YawAxis.MinusX">
            <summary>
            Represents the negative X-axis as the designated yaw rotation axis.
            This value is used to determine the opposite rotation direction for components
            such as a steering wheel relative to angular motion.
            </summary>
        </member>
        <member name="F:AVS.VehicleComponents.SteeringWheel.YawAxis.Y">
            <summary>
            Represents the positive Y-axis as the designated yaw rotation axis.
            This value is used to determine the rotation direction for components
            such as a steering wheel relative to angular motion.
            </summary>
        </member>
        <member name="F:AVS.VehicleComponents.SteeringWheel.YawAxis.MinusY">
            <summary>
            Represents the negative Y-axis as the designated yaw rotation axis.
            This value is used to define the rotation direction for components
            such as a steering wheel relative to angular motion.
            </summary>
        </member>
        <member name="F:AVS.VehicleComponents.SteeringWheel.YawAxis.Z">
            <summary>
            Represents the positive Z-axis as the designated yaw rotation axis.
            This value is utilized to define angular motion around the Z-axis,
            often applied to components like a steering wheel for rotation animations.
            </summary>
        </member>
        <member name="F:AVS.VehicleComponents.SteeringWheel.YawAxis.MinusZ">
            <summary>
            Represents the negative Z-axis as the designated yaw rotation axis.
            This value is used to determine the rotation direction for components
            such as a steering wheel relative to angular motion.
            </summary>
        </member>
        <member name="M:AVS.VehicleComponents.SteeringWheel.Start">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleComponents.SteeringWheel.Update">
            <inheritdoc/>
        </member>
        <member name="T:AVS.VehicleComponents.TetherSource">
            <summary>
            Represents a tether point within a Submarine, which manages player interactions
            and ensures proper recognition of player proximity and entry events.
            </summary>
            <remarks>
            Tether sources are designed to purely exist within the bounds of a submarine
            and are integral for the functionality of player leashing.
            This ensures smooth player recognition regardless of warp or entry conditions.
            </remarks>
        </member>
        <member name="T:AVS.VehicleComponents.VehicleColor">
            <summary>
            A full color definition, including HSB (Hue, Saturation, Brightness) values and the corresponding RGB color.
            </summary>
        </member>
        <member name="P:AVS.VehicleComponents.VehicleColor.RGB">
            <summary>
            The applied RGB color.
            </summary>
        </member>
        <member name="P:AVS.VehicleComponents.VehicleColor.HSB">
            <summary>
            The HSB (Hue, Saturation, Brightness) representation of the color.
            Zero if not supplied. ASV does nothing with this value.
            </summary>
        </member>
        <member name="P:AVS.VehicleComponents.VehicleColor.Default">
            <summary>
            Default vehicle color.
            </summary>
        </member>
        <member name="M:AVS.VehicleComponents.VehicleColor.#ctor(UnityEngine.Color,UnityEngine.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:AVS.VehicleComponents.VehicleColor"/> class with the specified HSB values and
            corresponding color.
            </summary>
            <param name="hsb">A <see cref="T:UnityEngine.Vector3"/> representing the hue, saturation, and brightness (HSB) values of the color. Optional.</param>
            <param name="rgb">A <see cref="P:AVS.VehicleComponents.VehicleColor.RGB"/> representing the corresponding color in the RGB color space.</param>
        </member>
        <member name="M:AVS.VehicleComponents.VehicleColor.Equals(AVS.VehicleComponents.VehicleColor)">
            <summary>
            Determines whether the specified <see cref="T:AVS.VehicleComponents.VehicleColor"/> is equal to the current <see cref="T:AVS.VehicleComponents.VehicleColor"/>.
            </summary>
            <param name="other">The <see cref="T:AVS.VehicleComponents.VehicleColor"/> to compare with the current <see cref="T:AVS.VehicleComponents.VehicleColor"/>.</param>
            <returns>true if the specified <see cref="T:AVS.VehicleComponents.VehicleColor"/> is equal to the current <see cref="T:AVS.VehicleComponents.VehicleColor"/>; otherwise, false.</returns>
        </member>
        <member name="M:AVS.VehicleComponents.VehicleColor.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current <see cref="T:AVS.VehicleComponents.VehicleColor"/>.
            </summary>
            <param name="obj">The object to compare with the current <see cref="T:AVS.VehicleComponents.VehicleColor"/>.</param>
            <returns>true if the specified object is equal to the current <see cref="T:AVS.VehicleComponents.VehicleColor"/>; otherwise, false.</returns>
        </member>
        <member name="M:AVS.VehicleComponents.VehicleColor.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:AVS.VehicleComponents.VehicleColor"/> type.
            </summary>
            <returns>A hash code for the current <see cref="T:AVS.VehicleComponents.VehicleColor"/>.</returns>
        </member>
        <member name="M:AVS.VehicleComponents.VehicleColor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleComponents.VehicleColor.op_Equality(AVS.VehicleComponents.VehicleColor,AVS.VehicleComponents.VehicleColor)">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleComponents.VehicleColor.op_Inequality(AVS.VehicleComponents.VehicleColor,AVS.VehicleComponents.VehicleColor)">
            <inheritdoc/>
        </member>
        <member name="T:AVS.PilotingTrigger">
            <summary>
            Hand target added to the pilot seat
            </summary>
        </member>
        <member name="F:AVS.PilotingTrigger.av">
            <summary>
            The owning vehicle. Assigned during instantiation
            </summary>
        </member>
        <member name="F:AVS.PilotingTrigger.helmIndex">
            <summary>
            The index of the seat this trigger was attached to
            </summary>
        </member>
        <member name="T:AVS.PowerManager">
            <summary>
            The PowerManager class is responsible for managing all power-related functionalities for the AvsVehicle.
            </summary>
            <remarks>
            This class handles power consumption and evaluates the power status of the vehicle. It monitors various power drains,
            including lights and driving mechanics, and consolidates these drains into a unified management system.
            Additionally, it broadcasts notifications related to power changes and offers methods to check and spend energy.
            </remarks>
        </member>
        <member name="T:AVS.PowerManager.PowerStatus">
            <summary>
            The PowerStatus structure represents the binary power state of an entity,
            encapsulating whether it has sufficient charge and is operationally powered.
            </summary>
            <remarks>
            This structure is used to define and evaluate power conditions within the AvsVehicle's power management system.
            It provides predefined status states, including ChargedAndPowered, and allows for quick evaluation of combined charge and power states.
            </remarks>
            <param name="HasCharge">The vehicle has charge in its batteries</param>
            <param name="IsPowered">The vehicle is powered on</param>
        </member>
        <member name="M:AVS.PowerManager.PowerStatus.#ctor(System.Boolean,System.Boolean)">
            <summary>
            The PowerStatus structure represents the binary power state of an entity,
            encapsulating whether it has sufficient charge and is operationally powered.
            </summary>
            <remarks>
            This structure is used to define and evaluate power conditions within the AvsVehicle's power management system.
            It provides predefined status states, including ChargedAndPowered, and allows for quick evaluation of combined charge and power states.
            </remarks>
            <param name="HasCharge">The vehicle has charge in its batteries</param>
            <param name="IsPowered">The vehicle is powered on</param>
        </member>
        <member name="P:AVS.PowerManager.PowerStatus.HasCharge">
            <summary>The vehicle has charge in its batteries</summary>
        </member>
        <member name="P:AVS.PowerManager.PowerStatus.IsPowered">
            <summary>The vehicle is powered on</summary>
        </member>
        <member name="P:AVS.PowerManager.PowerStatus.ChargedAndPowered">
            <summary>
            Represents a static predefined power status indicating that the vehicle
            is both fully charged and has active power.
            </summary>
        </member>
        <member name="P:AVS.PowerManager.PowerStatus.IsChargedAndPowered">
            <summary>
            Indicates whether the entity has sufficient charge and is operationally powered.
            </summary>
            <remarks>
            Combines the charge and power state to provide a single true/false evaluation
            of whether the entity is both charged and powered. This is typically used
            within the power management system for decision-making processes.
            </remarks>
        </member>
        <member name="M:AVS.PowerManager.EvaluatePowerStatus">
            <summary>
            Evaluates and determines the current power status of the AvsVehicle.
            It checks whether the vehicle has remaining charge and whether it is powered on.
            </summary>
            <returns>A <see cref="T:AVS.PowerManager.PowerStatus"/> indicating the vehicle's power state,
            including whether it has charge and whether it is powered on.</returns>
        </member>
        <member name="M:AVS.PowerManager.TrySpendEnergy(System.Single)">
            <summary>
            Attempts to spend the specified amount of energy from the energy source.
            The method will consume as much energy as possible up to the requested amount,
            depending on the available energy.
            </summary>
            <param name="val">The amount of energy requested to be spent.</param>
            <returns>The actual amount of energy that was successfully consumed.</returns>
        </member>
        <member name="M:AVS.PowerManager.Update">
            <inheritdoc />
        </member>
        <member name="T:AVS.VoiceLine">
            <summary>
            Represents a voice line consisting of one or more audio clips, along with a text translation key and priority
            level.
            </summary>
            <remarks>A <see cref="T:AVS.VoiceLine"/> can either contain a single audio clip or a collection of audio
            clips to be played in sequence (unless interrupted).
            It is typically used to represent a line of dialogue or sound effect in an application, with an
            associated translation key for localization and an optional priority to determine playback order or
            importance.</remarks>
        </member>
        <member name="P:AVS.VoiceLine.Clip">
            <summary>
            The single audio clip of this voice line.
            If multiple clips are provided, this will be null.
            </summary>
        </member>
        <member name="P:AVS.VoiceLine.Clips">
            <summary>
            Multiple audio clips of this voice line.
            If a single clip is provided, this will be null.
            </summary>
        </member>
        <member name="P:AVS.VoiceLine.Gaps">
            <summary>
            Time in seconds between each two clips in <see cref="P:AVS.VoiceLine.Clips"/>.
            If null or with less elements than <see cref="P:AVS.VoiceLine.Clips"/>(-1), trailing gaps will be 0.
            </summary>
        </member>
        <member name="P:AVS.VoiceLine.TextTranslationKey">
            <summary>
            The translation key for the text associated with this voice line.
            Null if no subtitle should be displayed (even if configured).
            Effective only if <see cref="P:AVS.Configuration.VehicleConfiguration.GetVoiceSubtitlesEnabled"/> is true.
            </summary>
        </member>
        <member name="P:AVS.VoiceLine.Priority">
            <summary>
            The queue priority of this voice line.
            Voice lines of higher priority will interrupt queued clips of lower priority.
            </summary>
        </member>
        <member name="P:AVS.VoiceLine.Volume">
            <summary>
            Individual volume of this voice line, further modified by <see cref="P:AVS.Configuration.VehicleConfiguration.GetVoiceSoundVolume"/>,
            </summary>
        </member>
        <member name="P:AVS.VoiceLine.HasAnyClips">
            <summary>
            Checks if this voice line has any audio clips assigned.
            </summary>
        </member>
        <member name="M:AVS.VoiceLine.#ctor(UnityEngine.AudioClip,System.String,System.Int32)">
            <summary>
            Constructs a new <see cref="T:AVS.VoiceLine"/> with a single audio clip, a text translation key, and an optional priority.
            </summary>
            <param name="clip">Clip to play. May be null</param>
            <param name="textTranslationKey">Text translation key of this line. Null if no subtitle of this line should ever be shown</param>
            <param name="priority">Interruption priority</param>
        </member>
        <member name="M:AVS.VoiceLine.#ctor(System.Collections.Generic.IReadOnlyList{UnityEngine.AudioClip},System.Collections.Generic.IReadOnlyList{System.Single},System.String,System.Int32)">
            <summary>
            Constructs a new <see cref="T:AVS.VoiceLine"/> with multiple audio clips, a text translation key, and an optional priority.
            </summary>
            <param name="clips">Clips to play in sequence. While a single playing clip cannot be interrupted, subsequent clips can</param>
            <param name="textTranslationKey">Text translation key of this line</param>
            <param name="priority">Interruption priority</param>
            <param name="gaps">Time in seconds between each two clips in <paramref name="clips"/>. Should have one less element than <paramref name="clips"/> or be null. </param>
        </member>
        <member name="T:AVS.VoiceQueue">
            <summary>
            Manages the playback of voice lines for a vehicle, including queuing, speaker setup, and audio playback control.
            </summary>
            <remarks>The <see cref="T:AVS.VoiceQueue"/> class is responsible for handling voice line playback for
            vehicles, such as submarines or submersibles. It manages a one-element-queue of voice lines, controls audio sources attached
            to the vehicle, and ensures proper playback behavior based on the vehicle's state (e.g., whether it is under
            command or has sufficient energy). This class also integrates with the game's subtitle system to display
            subtitles for voice lines when enabled.</remarks>
        </member>
        <member name="M:AVS.VoiceQueue.PauseSpeakers(System.Boolean)">
            <summary>
            Pauses or unpauses all speakers in this voice queue.
            </summary>
            <param name="pause">If true, pause all speakers, otherwise unpause them</param>
        </member>
        <member name="M:AVS.VoiceQueue.Awake">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VoiceQueue.Start">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VoiceQueue.Update">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VoiceQueue.Play(AVS.VoiceLine)">
            <summary>
            Schedules the given voice line to be player if none is currently playing or if the queued line has a higher priority than the current one.
            Otherwise, the line is not played and discarded.
            </summary>
            <param name="line">Line to play</param>
        </member>
        <member name="T:AVS.VehicleTypes.Skimmer">
            <summary>
                Incomplete surface boat class.
            </summary>
        </member>
        <member name="F:AVS.VehicleTypes.Skimmer.isPlayerInside">
            <summary>
                Indicates whether the player is currently inside the skimmer vehicle.
            </summary>
            <remarks>
                This variable determines the player's status regarding their presence inside the vehicle. It can be
                used to trigger actions or behaviors based on the player's occupancy state.
            </remarks>
        </member>
        <member name="M:AVS.VehicleTypes.Skimmer.#ctor(AVS.Configuration.VehicleConfiguration)">
            <summary>
                Constructs the vehicle with the given configuration.
            </summary>
            <param name="config">Vehicle configuration. Must not be null</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:AVS.VehicleTypes.Skimmer.Com">
            <summary>
                Gets the composition configuration specific to the skimmer vehicle.
                Provides access to the <see cref="T:AVS.Composition.SkimmerComposition" /> for managing
                specialized vehicle behavior and properties.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the skimmer's composition has not been initialized.
                Ensure that the <c>Skimmer.Awake()</c> method is invoked prior to accessing this property.
            </exception>
        </member>
        <member name="M:AVS.VehicleTypes.Skimmer.GetSkimmerComposition">
            <summary>
                Retrieves the composition of the skimmer.
                Executed once either during <see cref="M:AVS.BaseVehicle.AvsVehicle.Awake" /> or vehicle registration, whichever comes first.
            </summary>
        </member>
        <member name="M:AVS.VehicleTypes.Skimmer.GetVehicleComposition">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Skimmer.IsPlayerInside">
            <summary>
                Determines whether the player is currently inside the skimmer.
            </summary>
            <returns>
                True if the player is inside the skimmer; otherwise, false.
            </returns>
        </member>
        <member name="M:AVS.VehicleTypes.Skimmer.DoExitRoutines">
            <inheritdoc />
        </member>
        <member name="T:AVS.VehicleTypes.Submarine">
            <summary>
                Submarine is the class of self-leveling, walkable vehicle
            </summary>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.#ctor(AVS.Configuration.VehicleConfiguration)">
            <summary>
                Constructor for Submarine.
            </summary>
            <param name="config">Configuration to use</param>
        </member>
        <member name="P:AVS.VehicleTypes.Submarine.IsDefaultTexture">
            <summary>
                Indicates whether the submarine is using its default texture or a customized one.
            </summary>
        </member>
        <member name="P:AVS.VehicleTypes.Submarine.ThetherChecksSuspended">
            <summary>
                Tether checks are suspended until the next time the player enters or exits helm/the vehicle.
            </summary>
        </member>
        <member name="P:AVS.VehicleTypes.Submarine.Com">
            <summary>
                The composition of this submarine.
            </summary>
        </member>
        <member name="P:AVS.VehicleTypes.Submarine.Floodlights">
            <summary>
                Flood light controller created during Awake.
            </summary>
            <remarks>
                Auto-destroyed/nulled if no floodlights were declared.
            </remarks>
        </member>
        <member name="P:AVS.VehicleTypes.Submarine.Interiorlights">
            <summary>
                Interior light controller created during Awake.
            </summary>
            <remarks>
                Auto-destroyed/nulled if no interior lights were declared.
            </remarks>
        </member>
        <member name="P:AVS.VehicleTypes.Submarine.NavLights">
            <summary>
                Nav light controller created during Awake.
            </summary>
            <remarks>
                Auto-destroyed/nulled if no navigation lights were declared.
            </remarks>
        </member>
        <member name="P:AVS.VehicleTypes.Submarine.ActualEditScreen">
            <summary>
                Represents the actual edit screen associated with the submarine's color picker functionality.
                This is used to manage UI elements for editing colors and associated settings.
            </summary>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.Awake">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.Start">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.GetSubmarineComposition">
            <summary>
                Retrieves the composition for this submarine.
                Executed once during Awake.
            </summary>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.GetVehicleComposition">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.CreateDataBlocks(System.Action{AVS.SaveLoad.DataBlock})">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.OnDataLoaded">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.GetLoadedHelm">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.IsPlayerInside">
            <summary>
                True if the player is inside the submarine, false otherwise.
            </summary>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.IsPlayerPiloting">
            <summary>
                Gets a value indicating whether the player is currently piloting the vehicle.
            </summary>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.GetMainHelm">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.OnBeginHelmControl(AVS.VehicleBuilding.Helm)">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.OnEndHelmControl">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.OnPlayerEntry">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.OnPlayerExit">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.SubConstructionBeginning">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.SubConstructionComplete">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.OnKill">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.PaintNameDefaultStyle(System.String)">
            <summary>
                Paints the vehicle's name using the default style.
            </summary>
            <param name="name">The name to paint on the vehicle.</param>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.PaintVehicleDefaultStyle(System.String)">
            <summary>
                Paints the submarine vehicle's exterior using the default style, including default textures and name.
            </summary>
            <param name="name">The name of the vehicle to be painted.</param>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.PaintVehicleSection(System.String,AVS.VehicleComponents.VehicleColor)">
            <summary>
                Paints a specific section of the vehicle with the given material and color.
            </summary>
            <param name="materialName">The name of the material to be applied to the section of the vehicle.</param>
            <param name="col">The color to apply to the specified material.</param>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.PaintVehicleSection(System.String,UnityEngine.Color)">
            <summary>
                Paints a specific section of the vehicle with the specified material and color.
            </summary>
            <param name="materialName">The name of the material to be painted.</param>
            <param name="col">The color to apply to the specified material.</param>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.PaintVehicleName(System.String,AVS.VehicleComponents.VehicleColor,AVS.VehicleComponents.VehicleColor)">
            <summary>
                Paints the name of the vehicle and applies colors to the name and hull.
            </summary>
            <param name="name">The name of the vehicle to be painted.</param>
            <param name="nameColor">The color to be applied to the vehicle's name.</param>
            <param name="hullColor">The color to be applied to the vehicle's hull.</param>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.PaintVehicleName(System.String,UnityEngine.Color,UnityEngine.Color)">
            <summary>
                Paints the vehicle's name onto the vehicle using the specified colors.
            </summary>
            <param name="name">The name to be painted on the vehicle.</param>
            <param name="nameColor">The color to be used for the name text.</param>
            <param name="hullColor">The color to be used for the hull of the vehicle.</param>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.SetBaseColor(AVS.VehicleComponents.VehicleColor)">
            <summary>
            Sets the base color of the submarine.
            </summary>
            <param name="color">The color to be applied as the base color for the submarine.</param>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.SetInteriorColor(AVS.VehicleComponents.VehicleColor)">
            <summary>
            Sets the interior color of the submarine.
            </summary>
            <param name="color">The color to apply to the submarine's interior.</param>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.SetStripeColor(AVS.VehicleComponents.VehicleColor)">
            <summary>
            Sets the stripe color of the submarine.
            </summary>
            <param name="color">The color to set as the stripe color.</param>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.SetColorPickerUIColor(System.String,UnityEngine.Color)">
            <summary>
            Sets the UI color of the color picker for a specific section of the vehicle edit screen.
            </summary>
            <param name="name">The name of the corresponding section whose color needs to be updated.</param>
            <param name="col">The new color to apply.</param>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.OnColorChange(ColorChangeEventData)">
            <summary>
            Handles changes in the color selection for the submarine.
            </summary>
            <param name="eventData">Data representing the change in color, including the selected color information.</param>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.OnNameChange(System.String)">
            <summary>
            Called when the name of the vehicle is changed.
            </summary>
            <param name="e">The new name of the vehicle.</param>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.OnColorSubmit">
            <summary>
            Handles the submission of selected colors from the color picker.
            This method applies the selected colors to the submarine's base, interior, stripe, and name.
            Additionally, updates the submarine's paint style based on whether the default texture is used.
            </summary>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.OnStorageOpen(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.EnableFabricator(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.OnVehicleDocked">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.OnVehicleUndocked">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.OnPreDockingPlayerExit">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.OnUndockingPlayerEntry">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.ScuttleVehicle">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.UnscuttleVehicle">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.DoExitRoutines">
            <inheritdoc />
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.RegisterTetherEntry(AVS.VehicleComponents.TetherSource)">
            <summary>
                Registers that the player was close enough to a tether source to be considered inside the sub.
            </summary>
            <param name="tetherSource">Tether source that triggered the event</param>
        </member>
        <member name="M:AVS.VehicleTypes.Submarine.SuspendTetherChecks">
            <summary>
                Suspends tether checks until the character next enters or exits helm/the vehicle
            </summary>
        </member>
        <member name="T:AVS.VehicleTypes.Submersible">
            <summary>
            Non-walkable vehicle type that can be piloted underwater.
            </summary>
        </member>
        <member name="M:AVS.VehicleTypes.Submersible.#ctor(AVS.Configuration.VehicleConfiguration)">
            <summary>
            Constructs the vehicle with the given configuration.
            </summary>
            <param name="config">Vehicle configuration. Must not be null</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:AVS.VehicleTypes.Submersible.GetSubmersibleComposition">
            <summary>
            Retrieves the composition of the submarine.
            Executed once either during <see cref="M:AVS.BaseVehicle.AvsVehicle.Awake"/> or vehicle registration, whichever comes first.
            </summary>
        </member>
        <member name="M:AVS.VehicleTypes.Submersible.GetVehicleComposition">
            <inheritdoc/>
        </member>
        <member name="P:AVS.VehicleTypes.Submersible.Com">
            <summary>
            Resolved vehicle composition.
            If accessed before <see cref="M:AVS.BaseVehicle.AvsVehicle.Awake"/> (or vehicle registration), InvalidOperationException will be thrown.
            </summary>
        </member>
        <member name="M:AVS.VehicleTypes.Submersible.DoExitRoutines">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleTypes.Submersible.GetMainHelm">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleTypes.Submersible.EnterHelmControl">
            <summary>
            Begins piloting the submersible from the given seat.
            </summary>
        </member>
        <member name="M:AVS.VehicleTypes.Submersible.OnEndHelmControl">
            <inheritdoc/>
        </member>
        <member name="M:AVS.VehicleTypes.Submersible.OnPlayerEntry">
            <inheritdoc/>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Indicates that a method or property may return a null value (elements without this annotation never return null)
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute"/> class.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the annotated parameter will be null depending on the return value.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
    </members>
</doc>
